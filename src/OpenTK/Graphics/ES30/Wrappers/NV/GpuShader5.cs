//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES30
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "GpuShader5" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64NV")]
            public static void ProgramUniform1(uint program, int location, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64NV")]
            public static void ProgramUniform1(uint program, int location, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64NV")]
            public static void ProgramUniform2(uint program, int location, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64NV")]
            public static void ProgramUniform2(uint program, int location, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64NV")]
            public static void ProgramUniform3(uint program, int location, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64NV")]
            public static void ProgramUniform3(uint program, int location, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64NV")]
            public static void ProgramUniform4(uint program, int location, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64NV")]
            public static void ProgramUniform4(uint program, int location, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64NV")]
            public static void Uniform1(int location, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64NV")]
            public static void Uniform1(int location, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64NV")]
            public static void Uniform2(int location, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64NV")]
            public static void Uniform2(int location, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64NV")]
            public static void Uniform3(int location, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64NV")]
            public static void Uniform3(int location, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64NV")]
            public static void Uniform4(int location, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64NV")]
            public static void Uniform4(int location, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(365)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetUniformi64vNV(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long* @params);

            [Slot(507)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform1i64NV(uint program, int location, long x);

            [Slot(508)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform1i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] long* value);

            [Slot(511)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform1ui64NV(uint program, int location, ulong x);

            [Slot(512)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform1ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value);

            [Slot(517)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform2i64NV(uint program, int location, long x, long y);

            [Slot(518)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform2i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long* value);

            [Slot(521)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);

            [Slot(522)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform2ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value);

            [Slot(527)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform3i64NV(uint program, int location, long x, long y, long z);

            [Slot(528)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform3i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long* value);

            [Slot(531)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);

            [Slot(532)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform3ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value);

            [Slot(537)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);

            [Slot(538)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform4i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long* value);

            [Slot(541)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);

            [Slot(542)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform4ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value);

            [Slot(669)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform1i64NV(int location, long x);

            [Slot(670)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform1i64vNV(int location, int count, [CountAttribute(Parameter = "count*1")] long* value);

            [Slot(673)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform1ui64NV(int location, ulong x);

            [Slot(674)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform1ui64vNV(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value);

            [Slot(679)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform2i64NV(int location, long x, long y);

            [Slot(680)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform2i64vNV(int location, int count, [CountAttribute(Parameter = "count*2")] long* value);

            [Slot(683)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform2ui64NV(int location, ulong x, ulong y);

            [Slot(684)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform2ui64vNV(int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value);

            [Slot(689)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform3i64NV(int location, long x, long y, long z);

            [Slot(690)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform3i64vNV(int location, int count, [CountAttribute(Parameter = "count*3")] long* value);

            [Slot(693)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform3ui64NV(int location, ulong x, ulong y, ulong z);

            [Slot(694)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform3ui64vNV(int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value);

            [Slot(699)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform4i64NV(int location, long x, long y, long z, long w);

            [Slot(700)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform4i64vNV(int location, int count, [CountAttribute(Parameter = "count*4")] long* value);

            [Slot(703)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);

            [Slot(704)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform4ui64vNV(int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value);
        }
    }
}
