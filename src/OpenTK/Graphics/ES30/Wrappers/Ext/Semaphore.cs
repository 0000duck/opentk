//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES30
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Semaphore" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            public static void DeleteSemaphore([CountAttribute(Parameter = "n")] uint semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            public static void DeleteSemaphores(int n, [CountAttribute(Parameter = "n")] uint[] semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            public static void DeleteSemaphores(int n, [CountAttribute(Parameter = "n")] ref uint semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glDeleteSemaphoresEXT")]
            public static unsafe void DeleteSemaphores(int n, [CountAttribute(Parameter = "n")] uint* semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            public static uint GenSemaphore()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            public static void GenSemaphores(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            public static void GenSemaphores(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="semaphores">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGenSemaphoresEXT")]
            public static unsafe void GenSemaphores(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* semaphores)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            public static void GetSemaphoreParameter(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            public static void GetSemaphoreParameter(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glGetSemaphoreParameterui64vEXT")]
            public static unsafe void GetSemaphoreParameter(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glIsSemaphoreEXT")]
            public static bool IsSemaphore(uint semaphore)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            public static void SemaphoreParameter(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            public static void SemaphoreParameter(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, ref ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSemaphoreParameterui64vEXT")]
            public static unsafe void SemaphoreParameter(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="numBufferBarriers">
            /// </param>
            /// <param name="buffers">
            /// [length: COMPSIZE(numBufferBarriers)]
            /// </param>
            /// <param name="numTextureBarriers">
            /// </param>
            /// <param name="textures">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            /// <param name="dstLayouts">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            public static void SignalSemaphore(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] uint[] buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] uint[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout[] dstLayouts)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="numBufferBarriers">
            /// </param>
            /// <param name="buffers">
            /// [length: COMPSIZE(numBufferBarriers)]
            /// </param>
            /// <param name="numTextureBarriers">
            /// </param>
            /// <param name="textures">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            /// <param name="dstLayouts">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            public static void SignalSemaphore(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref uint buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref uint textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.TextureLayout dstLayouts)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="numBufferBarriers">
            /// </param>
            /// <param name="buffers">
            /// [length: COMPSIZE(numBufferBarriers)]
            /// </param>
            /// <param name="numTextureBarriers">
            /// </param>
            /// <param name="textures">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            /// <param name="dstLayouts">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glSignalSemaphoreEXT")]
            public static unsafe void SignalSemaphore(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] uint* buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] uint* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* dstLayouts)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="numBufferBarriers">
            /// </param>
            /// <param name="buffers">
            /// [length: COMPSIZE(numBufferBarriers)]
            /// </param>
            /// <param name="numTextureBarriers">
            /// </param>
            /// <param name="textures">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            /// <param name="srcLayouts">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            public static void WaitSemaphore(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] uint[] buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] uint[] textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout[] srcLayouts)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="numBufferBarriers">
            /// </param>
            /// <param name="buffers">
            /// [length: COMPSIZE(numBufferBarriers)]
            /// </param>
            /// <param name="numTextureBarriers">
            /// </param>
            /// <param name="textures">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            /// <param name="srcLayouts">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            public static void WaitSemaphore(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] ref uint buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] ref uint textures, [CountAttribute(Computed = "numTextureBarriers")] ref OpenTK.Graphics.ES30.TextureLayout srcLayouts)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_semaphore]
            /// </summary>
            /// <param name="semaphore">
            /// </param>
            /// <param name="numBufferBarriers">
            /// </param>
            /// <param name="buffers">
            /// [length: COMPSIZE(numBufferBarriers)]
            /// </param>
            /// <param name="numTextureBarriers">
            /// </param>
            /// <param name="textures">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            /// <param name="srcLayouts">
            /// [length: COMPSIZE(numTextureBarriers)]
            /// </param>
            [AutoGenerated(Category = "EXT_semaphore", Version = "", EntryPoint = "glWaitSemaphoreEXT")]
            public static unsafe void WaitSemaphore(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] uint* buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] uint* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* srcLayouts)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(122)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteSemaphoresEXT(int n, [CountAttribute(Parameter = "n")] uint* semaphores);

            [Slot(236)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenSemaphoresEXT(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* semaphores);

            [Slot(342)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetSemaphoreParameterui64vEXT(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, [OutAttribute] ulong* @params);

            [Slot(407)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsSemaphoreEXT(uint semaphore);

            [Slot(599)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glSemaphoreParameterui64vEXT(uint semaphore, OpenTK.Graphics.ES30.SemaphoreParameterName pname, ulong* @params);

            [Slot(603)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] uint* buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] uint* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* dstLayouts);

            [Slot(760)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, [CountAttribute(Computed = "numBufferBarriers")] uint* buffers, uint numTextureBarriers, [CountAttribute(Computed = "numTextureBarriers")] uint* textures, [CountAttribute(Computed = "numTextureBarriers")] OpenTK.Graphics.ES30.TextureLayout* srcLayouts);
        }
    }
}
