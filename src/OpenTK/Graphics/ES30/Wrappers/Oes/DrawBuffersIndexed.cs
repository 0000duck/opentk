//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES30
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "DrawBuffersIndexed" in the extension "Oes".
        /// </summary>
        public static partial class Oes
        {
            /// <summary>
            /// [requires: OES_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiOES")]
            public static void BlendEquationSeparate(uint buf, OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiOES")]
            public static void BlendEquation(uint buf, OpenTK.Graphics.ES30.BlendEquationMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiOES")]
            public static void BlendFuncSeparate(uint buf, OpenTK.Graphics.ES30.BlendingFactor srcRGB, OpenTK.Graphics.ES30.BlendingFactor dstRGB, OpenTK.Graphics.ES30.BlendingFactor srcAlpha, OpenTK.Graphics.ES30.BlendingFactor dstAlpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciOES")]
            public static void BlendFunc(uint buf, OpenTK.Graphics.ES30.BlendingFactor src, OpenTK.Graphics.ES30.BlendingFactor dst)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="r">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="g">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="b">
            /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "OES_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiOES")]
            public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(36)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendEquationSeparateiOES(uint buf, OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha);

            [Slot(33)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendEquationiOES(uint buf, OpenTK.Graphics.ES30.BlendEquationMode mode);

            [Slot(42)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendFuncSeparateiOES(uint buf, OpenTK.Graphics.ES30.BlendingFactor srcRGB, OpenTK.Graphics.ES30.BlendingFactor dstRGB, OpenTK.Graphics.ES30.BlendingFactor srcAlpha, OpenTK.Graphics.ES30.BlendingFactor dstAlpha);

            [Slot(39)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendFunciOES(uint buf, OpenTK.Graphics.ES30.BlendingFactor src, OpenTK.Graphics.ES30.BlendingFactor dst);

            [Slot(69)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColorMaskiOES(uint index, bool r, bool g, bool b, bool a);
        }
    }
}
