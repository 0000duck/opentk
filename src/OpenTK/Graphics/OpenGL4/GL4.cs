//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

#pragma warning disable 1591 // Missing doc comments
#pragma warning disable 1572 // Wrong param comments
#pragma warning disable 1573 // Missing param comments
#pragma warning disable 626 // extern method without DllImport

namespace OpenTK.Graphics.OpenGL4
{
    partial class GL
    {
        static GL()
        {
            EntryPointNames = new byte[]
            {
                103, 108, 65, 99, 116, 105, 118, 101, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 65, 99, 116, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 65, 112, 112, 108, 121, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 67, 77, 65, 65, 73, 78, 84, 69, 76, 0,
                103, 108, 65, 116, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 66, 101, 103, 105, 110, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 82, 101, 110, 100, 101, 114, 0,
                103, 108, 66, 101, 103, 105, 110, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 82, 101, 110, 100, 101, 114, 78, 86, 0,
                103, 108, 66, 101, 103, 105, 110, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 65, 77, 68, 0,
                103, 108, 66, 101, 103, 105, 110, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 66, 101, 103, 105, 110, 81, 117, 101, 114, 121, 0,
                103, 108, 66, 101, 103, 105, 110, 81, 117, 101, 114, 121, 73, 110, 100, 101, 120, 101, 100, 0,
                103, 108, 66, 101, 103, 105, 110, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 66, 105, 110, 100, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 66, 97, 115, 101, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 115, 66, 97, 115, 101, 0,
                103, 108, 66, 105, 110, 100, 66, 117, 102, 102, 101, 114, 115, 82, 97, 110, 103, 101, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 103, 68, 97, 116, 97, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 103, 68, 97, 116, 97, 76, 111, 99, 97, 116, 105, 111, 110, 73, 110, 100, 101, 120, 101, 100, 0,
                103, 108, 66, 105, 110, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 73, 109, 97, 103, 101, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 66, 105, 110, 100, 73, 109, 97, 103, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 66, 105, 110, 100, 77, 117, 108, 116, 105, 84, 101, 120, 116, 117, 114, 101, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 0,
                103, 108, 66, 105, 110, 100, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 66, 105, 110, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 83, 97, 109, 112, 108, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 83, 97, 109, 112, 108, 101, 114, 115, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 66, 105, 110, 100, 84, 101, 120, 116, 117, 114, 101, 85, 110, 105, 116, 0,
                103, 108, 66, 105, 110, 100, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 66, 108, 101, 110, 100, 66, 97, 114, 114, 105, 101, 114, 75, 72, 82, 0,
                103, 108, 66, 108, 101, 110, 100, 66, 97, 114, 114, 105, 101, 114, 78, 86, 0,
                103, 108, 66, 108, 101, 110, 100, 67, 111, 108, 111, 114, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 105, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 105, 65, 82, 66, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 105, 0,
                103, 108, 66, 108, 101, 110, 100, 69, 113, 117, 97, 116, 105, 111, 110, 83, 101, 112, 97, 114, 97, 116, 101, 105, 65, 82, 66, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 105, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 105, 65, 82, 66, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 105, 0,
                103, 108, 66, 108, 101, 110, 100, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 105, 65, 82, 66, 0,
                103, 108, 66, 108, 101, 110, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 66, 108, 105, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 108, 105, 116, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 65, 100, 100, 114, 101, 115, 115, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 80, 97, 103, 101, 67, 111, 109, 109, 105, 116, 109, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0,
                103, 108, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 97, 108, 108, 67, 111, 109, 109, 97, 110, 100, 76, 105, 115, 116, 78, 86, 0,
                103, 108, 67, 104, 101, 99, 107, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 67, 104, 101, 99, 107, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 67, 104, 101, 99, 107, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 116, 97, 116, 117, 115, 69, 88, 84, 0,
                103, 108, 67, 108, 97, 109, 112, 67, 111, 108, 111, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 102, 105, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 102, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 105, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 108, 101, 97, 114, 66, 117, 102, 102, 101, 114, 117, 105, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 67, 111, 108, 111, 114, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 0,
                103, 108, 67, 108, 101, 97, 114, 68, 101, 112, 116, 104, 102, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 102, 105, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 102, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 105, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 117, 105, 118, 0,
                103, 108, 67, 108, 101, 97, 114, 83, 116, 101, 110, 99, 105, 108, 0,
                103, 108, 67, 108, 101, 97, 114, 84, 101, 120, 73, 109, 97, 103, 101, 0,
                103, 108, 67, 108, 101, 97, 114, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 65, 116, 116, 114, 105, 98, 68, 101, 102, 97, 117, 108, 116, 69, 88, 84, 0,
                103, 108, 67, 108, 105, 101, 110, 116, 87, 97, 105, 116, 83, 121, 110, 99, 0,
                103, 108, 67, 108, 105, 112, 67, 111, 110, 116, 114, 111, 108, 0,
                103, 108, 67, 111, 108, 111, 114, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 0,
                103, 108, 67, 111, 108, 111, 114, 77, 97, 115, 107, 105, 0,
                103, 108, 67, 111, 108, 111, 114, 80, 51, 117, 105, 0,
                103, 108, 67, 111, 108, 111, 114, 80, 51, 117, 105, 118, 0,
                103, 108, 67, 111, 108, 111, 114, 80, 52, 117, 105, 0,
                103, 108, 67, 111, 108, 111, 114, 80, 52, 117, 105, 118, 0,
                103, 108, 67, 111, 108, 111, 114, 83, 117, 98, 84, 97, 98, 108, 101, 0,
                103, 108, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 0,
                103, 108, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 67, 111, 109, 109, 97, 110, 100, 76, 105, 115, 116, 83, 101, 103, 109, 101, 110, 116, 115, 78, 86, 0,
                103, 108, 67, 111, 109, 112, 105, 108, 101, 67, 111, 109, 109, 97, 110, 100, 76, 105, 115, 116, 78, 86, 0,
                103, 108, 67, 111, 109, 112, 105, 108, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 67, 111, 109, 112, 105, 108, 101, 83, 104, 97, 100, 101, 114, 73, 110, 99, 108, 117, 100, 101, 65, 82, 66, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 110, 115, 101, 114, 118, 97, 116, 105, 118, 101, 82, 97, 115, 116, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 78, 86, 0,
                103, 108, 67, 111, 110, 115, 101, 114, 118, 97, 116, 105, 118, 101, 82, 97, 115, 116, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 49, 68, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 50, 68, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 67, 111, 112, 121, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 111, 112, 121, 67, 111, 108, 111, 114, 83, 117, 98, 84, 97, 98, 108, 101, 0,
                103, 108, 67, 111, 112, 121, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 0,
                103, 108, 67, 111, 112, 121, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 49, 68, 0,
                103, 108, 67, 111, 112, 121, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 73, 109, 97, 103, 101, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 111, 112, 121, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 67, 111, 112, 121, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 67, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 97, 103, 101, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 84, 97, 98, 108, 101, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 67, 111, 109, 109, 97, 110, 100, 76, 105, 115, 116, 115, 78, 86, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 81, 117, 101, 114, 105, 101, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 97, 109, 112, 108, 101, 114, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 118, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 118, 69, 88, 84, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 116, 97, 116, 101, 115, 78, 86, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 83, 121, 110, 99, 70, 114, 111, 109, 67, 76, 101, 118, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 115, 0,
                103, 108, 67, 114, 101, 97, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 67, 117, 108, 108, 70, 97, 99, 101, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 65, 82, 66, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108, 98, 97, 99, 107, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 65, 82, 66, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 114, 111, 108, 75, 72, 82, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 65, 82, 66, 0,
                103, 108, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 73, 110, 115, 101, 114, 116, 75, 72, 82, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 67, 111, 109, 109, 97, 110, 100, 76, 105, 115, 116, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 78, 97, 109, 101, 100, 83, 116, 114, 105, 110, 103, 65, 82, 66, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 115, 65, 77, 68, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 69, 88, 84, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 81, 117, 101, 114, 105, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 97, 109, 112, 108, 101, 114, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 116, 97, 116, 101, 115, 78, 86, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 83, 121, 110, 99, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 115, 0,
                103, 108, 68, 101, 108, 101, 116, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 101, 112, 116, 104, 70, 117, 110, 99, 0,
                103, 108, 68, 101, 112, 116, 104, 77, 97, 115, 107, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 65, 114, 114, 97, 121, 118, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 102, 0,
                103, 108, 68, 101, 112, 116, 104, 82, 97, 110, 103, 101, 73, 110, 100, 101, 120, 101, 100, 0,
                103, 108, 68, 101, 116, 97, 99, 104, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 105, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 105, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 69, 88, 84, 0,
                103, 108, 68, 105, 115, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 0,
                103, 108, 68, 105, 115, 112, 97, 116, 99, 104, 67, 111, 109, 112, 117, 116, 101, 0,
                103, 108, 68, 105, 115, 112, 97, 116, 99, 104, 67, 111, 109, 112, 117, 116, 101, 71, 114, 111, 117, 112, 83, 105, 122, 101, 65, 82, 66, 0,
                103, 108, 68, 105, 115, 112, 97, 116, 99, 104, 67, 111, 109, 112, 117, 116, 101, 73, 110, 100, 105, 114, 101, 99, 116, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 65, 82, 66, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 73, 110, 115, 116, 97, 110, 99, 101, 0,
                103, 108, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 68, 114, 97, 119, 67, 111, 109, 109, 97, 110, 100, 115, 65, 100, 100, 114, 101, 115, 115, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 67, 111, 109, 109, 97, 110, 100, 115, 83, 116, 97, 116, 101, 115, 65, 100, 100, 114, 101, 115, 115, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 67, 111, 109, 109, 97, 110, 100, 115, 83, 116, 97, 116, 101, 115, 78, 86, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 65, 82, 66, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 73, 110, 115, 116, 97, 110, 99, 101, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 66, 97, 115, 101, 73, 110, 115, 116, 97, 110, 99, 101, 0,
                103, 108, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 115, 116, 97, 110, 99, 101, 100, 69, 88, 84, 0,
                103, 108, 68, 114, 97, 119, 82, 97, 110, 103, 101, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 68, 114, 97, 119, 82, 97, 110, 103, 101, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 0,
                103, 108, 68, 114, 97, 119, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 68, 114, 97, 119, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0,
                103, 108, 68, 114, 97, 119, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 83, 116, 114, 101, 97, 109, 0,
                103, 108, 68, 114, 97, 119, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 83, 116, 114, 101, 97, 109, 73, 110, 115, 116, 97, 110, 99, 101, 100, 0,
                103, 108, 68, 114, 97, 119, 86, 107, 73, 109, 97, 103, 101, 78, 86, 0,
                103, 108, 69, 100, 103, 101, 70, 108, 97, 103, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 105, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 101, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 105, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 69, 88, 84, 0,
                103, 108, 69, 110, 97, 98, 108, 101, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 65, 114, 114, 97, 121, 0,
                103, 108, 69, 110, 100, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 82, 101, 110, 100, 101, 114, 0,
                103, 108, 69, 110, 100, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 82, 101, 110, 100, 101, 114, 78, 86, 0,
                103, 108, 69, 110, 100, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 65, 77, 68, 0,
                103, 108, 69, 110, 100, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 78, 84, 69, 76, 0,
                103, 108, 69, 110, 100, 81, 117, 101, 114, 121, 0,
                103, 108, 69, 110, 100, 81, 117, 101, 114, 121, 73, 110, 100, 101, 120, 101, 100, 0,
                103, 108, 69, 110, 100, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 69, 118, 97, 108, 117, 97, 116, 101, 68, 101, 112, 116, 104, 86, 97, 108, 117, 101, 115, 65, 82, 66, 0,
                103, 108, 70, 101, 110, 99, 101, 83, 121, 110, 99, 0,
                103, 108, 70, 105, 110, 105, 115, 104, 0,
                103, 108, 70, 108, 117, 115, 104, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 70, 108, 117, 115, 104, 77, 97, 112, 112, 101, 100, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 70, 111, 103, 67, 111, 111, 114, 100, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 70, 114, 97, 103, 109, 101, 110, 116, 67, 111, 118, 101, 114, 97, 103, 101, 67, 111, 108, 111, 114, 78, 86, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 97, 109, 112, 108, 101, 76, 111, 99, 97, 116, 105, 111, 110, 115, 102, 118, 65, 82, 66, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 97, 109, 112, 108, 101, 76, 111, 99, 97, 116, 105, 111, 110, 115, 102, 118, 78, 86, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 49, 68, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 51, 68, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 65, 82, 66, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 70, 97, 99, 101, 65, 82, 66, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 76, 97, 121, 101, 114, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 76, 97, 121, 101, 114, 65, 82, 66, 0,
                103, 108, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 77, 117, 108, 116, 105, 118, 105, 101, 119, 79, 86, 82, 0,
                103, 108, 70, 114, 111, 110, 116, 70, 97, 99, 101, 0,
                103, 108, 71, 101, 110, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 105, 112, 109, 97, 112, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 77, 117, 108, 116, 105, 84, 101, 120, 77, 105, 112, 109, 97, 112, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 84, 101, 120, 116, 117, 114, 101, 77, 105, 112, 109, 97, 112, 0,
                103, 108, 71, 101, 110, 101, 114, 97, 116, 101, 84, 101, 120, 116, 117, 114, 101, 77, 105, 112, 109, 97, 112, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 71, 101, 110, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 110, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 0,
                103, 108, 71, 101, 110, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 115, 69, 88, 84, 0,
                103, 108, 71, 101, 110, 81, 117, 101, 114, 105, 101, 115, 0,
                103, 108, 71, 101, 110, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 83, 97, 109, 112, 108, 101, 114, 115, 0,
                103, 108, 71, 101, 110, 84, 101, 120, 116, 117, 114, 101, 115, 0,
                103, 108, 71, 101, 110, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 115, 0,
                103, 108, 71, 101, 110, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 65, 116, 111, 109, 105, 99, 67, 111, 117, 110, 116, 101, 114, 66, 117, 102, 102, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 65, 116, 116, 114, 105, 98, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 78, 97, 109, 101, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 85, 110, 105, 102, 111, 114, 109, 78, 97, 109, 101, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 105, 118, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 78, 97, 109, 101, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 78, 97, 109, 101, 0,
                103, 108, 71, 101, 116, 65, 99, 116, 105, 118, 101, 85, 110, 105, 102, 111, 114, 109, 115, 105, 118, 0,
                103, 108, 71, 101, 116, 65, 116, 116, 97, 99, 104, 101, 100, 83, 104, 97, 100, 101, 114, 115, 0,
                103, 108, 71, 101, 116, 65, 116, 116, 114, 105, 98, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 73, 110, 100, 101, 120, 101, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 66, 111, 111, 108, 101, 97, 110, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 71, 101, 116, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 0,
                103, 108, 71, 101, 116, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 67, 111, 109, 109, 97, 110, 100, 72, 101, 97, 100, 101, 114, 78, 86, 0,
                103, 108, 71, 101, 116, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 0,
                103, 108, 71, 101, 116, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 67, 111, 118, 101, 114, 97, 103, 101, 77, 111, 100, 117, 108, 97, 116, 105, 111, 110, 84, 97, 98, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 68, 101, 98, 117, 103, 77, 101, 115, 115, 97, 103, 101, 76, 111, 103, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 68, 111, 117, 98, 108, 101, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 68, 111, 117, 98, 108, 101, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 68, 111, 117, 98, 108, 101, 73, 110, 100, 101, 120, 101, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 68, 111, 117, 98, 108, 101, 118, 0,
                103, 108, 71, 101, 116, 69, 114, 114, 111, 114, 0,
                103, 108, 71, 101, 116, 70, 105, 114, 115, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 73, 110, 100, 101, 120, 101, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 70, 108, 111, 97, 116, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 103, 68, 97, 116, 97, 73, 110, 100, 101, 120, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 103, 68, 97, 116, 97, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 71, 114, 97, 112, 104, 105, 99, 115, 82, 101, 115, 101, 116, 83, 116, 97, 116, 117, 115, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 72, 105, 115, 116, 111, 103, 114, 97, 109, 0,
                103, 108, 71, 101, 116, 72, 105, 115, 116, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 72, 105, 115, 116, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 73, 110, 100, 101, 120, 101, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 117, 105, 54, 52, 105, 95, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 103, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 114, 110, 97, 108, 102, 111, 114, 109, 97, 116, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 114, 110, 97, 108, 102, 111, 114, 109, 97, 116, 105, 118, 0,
                103, 108, 71, 101, 116, 73, 110, 116, 101, 114, 110, 97, 108, 102, 111, 114, 109, 97, 116, 83, 97, 109, 112, 108, 101, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 77, 105, 110, 109, 97, 120, 0,
                103, 108, 71, 101, 116, 77, 105, 110, 109, 97, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 77, 105, 110, 109, 97, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 102, 118, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 69, 110, 118, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 69, 110, 118, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 111, 105, 110, 116, 101, 114, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 65, 116, 116, 97, 99, 104, 109, 101, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 83, 116, 114, 105, 110, 103, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 83, 116, 114, 105, 110, 103, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 78, 97, 109, 101, 100, 83, 116, 114, 105, 110, 103, 105, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 0,
                103, 108, 71, 101, 116, 110, 67, 111, 108, 111, 114, 84, 97, 98, 108, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 110, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 84, 101, 120, 73, 109, 97, 103, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 0,
                103, 108, 71, 101, 116, 110, 67, 111, 110, 118, 111, 108, 117, 116, 105, 111, 110, 70, 105, 108, 116, 101, 114, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 78, 101, 120, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 110, 72, 105, 115, 116, 111, 103, 114, 97, 109, 0,
                103, 108, 71, 101, 116, 110, 72, 105, 115, 116, 111, 103, 114, 97, 109, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 77, 97, 112, 100, 118, 0,
                103, 108, 71, 101, 116, 110, 77, 97, 112, 100, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 77, 97, 112, 102, 118, 0,
                103, 108, 71, 101, 116, 110, 77, 97, 112, 102, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 77, 97, 112, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 77, 97, 112, 105, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 77, 105, 110, 109, 97, 120, 0,
                103, 108, 71, 101, 116, 110, 77, 105, 110, 109, 97, 120, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 80, 105, 120, 101, 108, 77, 97, 112, 102, 118, 0,
                103, 108, 71, 101, 116, 110, 80, 105, 120, 101, 108, 77, 97, 112, 102, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 80, 105, 120, 101, 108, 77, 97, 112, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 80, 105, 120, 101, 108, 77, 97, 112, 117, 105, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 80, 105, 120, 101, 108, 77, 97, 112, 117, 115, 118, 0,
                103, 108, 71, 101, 116, 110, 80, 105, 120, 101, 108, 77, 97, 112, 117, 115, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 80, 111, 108, 121, 103, 111, 110, 83, 116, 105, 112, 112, 108, 101, 0,
                103, 108, 71, 101, 116, 110, 80, 111, 108, 121, 103, 111, 110, 83, 116, 105, 112, 112, 108, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 83, 101, 112, 97, 114, 97, 98, 108, 101, 70, 105, 108, 116, 101, 114, 0,
                103, 108, 71, 101, 116, 110, 83, 101, 112, 97, 114, 97, 98, 108, 101, 70, 105, 108, 116, 101, 114, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 84, 101, 120, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 110, 84, 101, 120, 73, 109, 97, 103, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 100, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 100, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 102, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 105, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 110, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 71, 101, 116, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 108, 111, 114, 71, 101, 110, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 108, 111, 114, 71, 101, 110, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 67, 111, 111, 114, 100, 115, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 68, 97, 115, 104, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 76, 101, 110, 103, 116, 104, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 77, 101, 116, 114, 105, 99, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 77, 101, 116, 114, 105, 99, 115, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 83, 112, 97, 99, 105, 110, 103, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 84, 101, 120, 71, 101, 110, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 97, 116, 104, 84, 101, 120, 71, 101, 110, 105, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 67, 111, 117, 110, 116, 101, 114, 73, 110, 102, 111, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 68, 97, 116, 97, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 73, 110, 102, 111, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 83, 116, 114, 105, 110, 103, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 71, 114, 111, 117, 112, 115, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 71, 114, 111, 117, 112, 83, 116, 114, 105, 110, 103, 65, 77, 68, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 68, 97, 116, 97, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 100, 66, 121, 78, 97, 109, 101, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 101, 114, 102, 81, 117, 101, 114, 121, 73, 110, 102, 111, 73, 78, 84, 69, 76, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 73, 110, 100, 101, 120, 101, 100, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 80, 111, 105, 110, 116, 101, 114, 118, 75, 72, 82, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 73, 110, 116, 101, 114, 102, 97, 99, 101, 105, 118, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 73, 110, 102, 111, 76, 111, 103, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 105, 118, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 102, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 73, 110, 100, 101, 120, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 105, 118, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 76, 111, 99, 97, 116, 105, 111, 110, 73, 110, 100, 101, 120, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 82, 101, 115, 111, 117, 114, 99, 101, 78, 97, 109, 101, 0,
                103, 108, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 83, 116, 97, 103, 101, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 66, 117, 102, 102, 101, 114, 79, 98, 106, 101, 99, 116, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 66, 117, 102, 102, 101, 114, 79, 98, 106, 101, 99, 116, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 66, 117, 102, 102, 101, 114, 79, 98, 106, 101, 99, 116, 117, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 66, 117, 102, 102, 101, 114, 79, 98, 106, 101, 99, 116, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 73, 110, 100, 101, 120, 101, 100, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 105, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 54, 52, 118, 0,
                103, 108, 71, 101, 116, 81, 117, 101, 114, 121, 79, 98, 106, 101, 99, 116, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 101, 112, 97, 114, 97, 98, 108, 101, 70, 105, 108, 116, 101, 114, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 73, 110, 102, 111, 76, 111, 103, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 80, 114, 101, 99, 105, 115, 105, 111, 110, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 71, 101, 116, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0,
                103, 108, 71, 101, 116, 83, 116, 97, 103, 101, 73, 110, 100, 101, 120, 78, 86, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 83, 116, 114, 105, 110, 103, 105, 0,
                103, 108, 71, 101, 116, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 73, 110, 100, 101, 120, 0,
                103, 108, 71, 101, 116, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 85, 110, 105, 102, 111, 114, 109, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 83, 121, 110, 99, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 76, 101, 118, 101, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 72, 97, 110, 100, 108, 101, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 72, 97, 110, 100, 108, 101, 78, 86, 0,
                103, 108, 71, 101, 116, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 105, 95, 118, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 105, 54, 52, 95, 118, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 105, 118, 0,
                103, 108, 71, 101, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 86, 97, 114, 121, 105, 110, 103, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 73, 110, 100, 101, 120, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 100, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 102, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 73, 110, 100, 105, 99, 101, 115, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 105, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 76, 111, 99, 97, 116, 105, 111, 110, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 85, 110, 105, 102, 111, 114, 109, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 73, 110, 100, 101, 120, 101, 100, 54, 52, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 73, 110, 100, 101, 120, 101, 100, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 73, 110, 116, 101, 103, 101, 114, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 73, 110, 116, 101, 103, 101, 114, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 80, 111, 105, 110, 116, 101, 114, 105, 95, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 80, 111, 105, 110, 116, 101, 114, 118, 69, 88, 84, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 100, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 102, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 117, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 105, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 100, 118, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 71, 101, 116, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 118, 0,
                103, 108, 71, 101, 116, 86, 107, 80, 114, 111, 99, 65, 100, 100, 114, 78, 86, 0,
                103, 108, 72, 105, 110, 116, 0,
                103, 108, 72, 105, 115, 116, 111, 103, 114, 97, 109, 0,
                103, 108, 73, 110, 100, 101, 120, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 73, 110, 115, 101, 114, 116, 69, 118, 101, 110, 116, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 73, 110, 116, 101, 114, 112, 111, 108, 97, 116, 101, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 83, 117, 98, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 84, 101, 120, 73, 109, 97, 103, 101, 0,
                103, 108, 73, 110, 118, 97, 108, 105, 100, 97, 116, 101, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 0,
                103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 66, 117, 102, 102, 101, 114, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 73, 115, 67, 111, 109, 109, 97, 110, 100, 76, 105, 115, 116, 78, 86, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 105, 0,
                103, 108, 73, 115, 69, 110, 97, 98, 108, 101, 100, 73, 110, 100, 101, 120, 101, 100, 69, 88, 84, 0,
                103, 108, 73, 115, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 73, 115, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 73, 115, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 73, 115, 78, 97, 109, 101, 100, 83, 116, 114, 105, 110, 103, 65, 82, 66, 0,
                103, 108, 73, 115, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 73, 115, 80, 111, 105, 110, 116, 73, 110, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 73, 115, 80, 111, 105, 110, 116, 73, 110, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 0,
                103, 108, 73, 115, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 73, 115, 81, 117, 101, 114, 121, 0,
                103, 108, 73, 115, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 73, 115, 83, 97, 109, 112, 108, 101, 114, 0,
                103, 108, 73, 115, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 73, 115, 83, 116, 97, 116, 101, 78, 86, 0,
                103, 108, 73, 115, 83, 121, 110, 99, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 73, 115, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 73, 115, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 73, 115, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 0,
                103, 108, 76, 97, 98, 101, 108, 79, 98, 106, 101, 99, 116, 69, 88, 84, 0,
                103, 108, 76, 105, 110, 101, 87, 105, 100, 116, 104, 0,
                103, 108, 76, 105, 110, 107, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 76, 105, 115, 116, 68, 114, 97, 119, 67, 111, 109, 109, 97, 110, 100, 115, 83, 116, 97, 116, 101, 115, 67, 108, 105, 101, 110, 116, 78, 86, 0,
                103, 108, 76, 111, 103, 105, 99, 79, 112, 0,
                103, 108, 77, 97, 107, 101, 66, 117, 102, 102, 101, 114, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 66, 117, 102, 102, 101, 114, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 77, 97, 107, 101, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 77, 97, 107, 101, 73, 109, 97, 103, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 77, 97, 107, 101, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 78, 111, 110, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 107, 101, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 77, 97, 107, 101, 84, 101, 120, 116, 117, 114, 101, 72, 97, 110, 100, 108, 101, 82, 101, 115, 105, 100, 101, 110, 116, 78, 86, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 77, 97, 112, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 77, 97, 112, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 77, 97, 112, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 77, 97, 112, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 77, 97, 112, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 70, 114, 117, 115, 116, 117, 109, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 51, 120, 50, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 73, 100, 101, 110, 116, 105, 116, 121, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 76, 111, 97, 100, 84, 114, 97, 110, 115, 112, 111, 115, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 51, 120, 50, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 51, 120, 51, 102, 78, 86, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 77, 117, 108, 116, 84, 114, 97, 110, 115, 112, 111, 115, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 79, 114, 116, 104, 111, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 80, 111, 112, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 80, 117, 115, 104, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 82, 111, 116, 97, 116, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 82, 111, 116, 97, 116, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 83, 99, 97, 108, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 83, 99, 97, 108, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 84, 114, 97, 110, 115, 108, 97, 116, 101, 100, 69, 88, 84, 0,
                103, 108, 77, 97, 116, 114, 105, 120, 84, 114, 97, 110, 115, 108, 97, 116, 101, 102, 69, 88, 84, 0,
                103, 108, 77, 97, 120, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112, 105, 108, 101, 114, 84, 104, 114, 101, 97, 100, 115, 65, 82, 66, 0,
                103, 108, 77, 97, 120, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112, 105, 108, 101, 114, 84, 104, 114, 101, 97, 100, 115, 75, 72, 82, 0,
                103, 108, 77, 101, 109, 111, 114, 121, 66, 97, 114, 114, 105, 101, 114, 0,
                103, 108, 77, 101, 109, 111, 114, 121, 66, 97, 114, 114, 105, 101, 114, 66, 121, 82, 101, 103, 105, 111, 110, 0,
                103, 108, 77, 105, 110, 109, 97, 120, 0,
                103, 108, 77, 105, 110, 83, 97, 109, 112, 108, 101, 83, 104, 97, 100, 105, 110, 103, 0,
                103, 108, 77, 105, 110, 83, 97, 109, 112, 108, 101, 83, 104, 97, 100, 105, 110, 103, 65, 82, 66, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 66, 105, 110, 100, 108, 101, 115, 115, 67, 111, 117, 110, 116, 78, 86, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 66, 105, 110, 100, 108, 101, 115, 115, 78, 86, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 67, 111, 117, 110, 116, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 65, 114, 114, 97, 121, 115, 73, 110, 100, 105, 114, 101, 99, 116, 67, 111, 117, 110, 116, 65, 82, 66, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 66, 97, 115, 101, 86, 101, 114, 116, 101, 120, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 66, 105, 110, 100, 108, 101, 115, 115, 67, 111, 117, 110, 116, 78, 86, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 66, 105, 110, 100, 108, 101, 115, 115, 78, 86, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 67, 111, 117, 110, 116, 0,
                103, 108, 77, 117, 108, 116, 105, 68, 114, 97, 119, 69, 108, 101, 109, 101, 110, 116, 115, 73, 110, 100, 105, 114, 101, 99, 116, 67, 111, 117, 110, 116, 65, 82, 66, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 49, 117, 105, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 49, 117, 105, 118, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 50, 117, 105, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 50, 117, 105, 118, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 51, 117, 105, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 51, 117, 105, 118, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 52, 117, 105, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 52, 117, 105, 118, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 80, 111, 105, 110, 116, 101, 114, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 69, 110, 118, 102, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 69, 110, 118, 102, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 69, 110, 118, 105, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 69, 110, 118, 105, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 100, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 100, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 102, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 102, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 105, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 71, 101, 110, 105, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 77, 117, 108, 116, 105, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 97, 103, 101, 67, 111, 109, 109, 105, 116, 109, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 80, 97, 103, 101, 67, 111, 109, 109, 105, 116, 109, 101, 110, 116, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 0,
                103, 108, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 67, 111, 112, 121, 66, 117, 102, 102, 101, 114, 83, 117, 98, 68, 97, 116, 97, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 68, 114, 97, 119, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 97, 109, 112, 108, 101, 76, 111, 99, 97, 116, 105, 111, 110, 115, 102, 118, 65, 82, 66, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 83, 97, 109, 112, 108, 101, 76, 111, 99, 97, 116, 105, 111, 110, 115, 102, 118, 78, 86, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 70, 97, 99, 101, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 76, 97, 121, 101, 114, 0,
                103, 108, 78, 97, 109, 101, 100, 70, 114, 97, 109, 101, 98, 117, 102, 102, 101, 114, 84, 101, 120, 116, 117, 114, 101, 76, 97, 121, 101, 114, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 52, 100, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 52, 100, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 52, 102, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 52, 105, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 52, 105, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 52, 117, 105, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 52, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 73, 52, 105, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 76, 111, 99, 97, 108, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 73, 52, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 80, 114, 111, 103, 114, 97, 109, 83, 116, 114, 105, 110, 103, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0,
                103, 108, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 78, 97, 109, 101, 100, 83, 116, 114, 105, 110, 103, 65, 82, 66, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 80, 51, 117, 105, 0,
                103, 108, 78, 111, 114, 109, 97, 108, 80, 51, 117, 105, 118, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 0,
                103, 108, 79, 98, 106, 101, 99, 116, 80, 116, 114, 76, 97, 98, 101, 108, 75, 72, 82, 0,
                103, 108, 80, 97, 116, 99, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 80, 97, 116, 99, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 108, 111, 114, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 111, 114, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 67, 111, 118, 101, 114, 68, 101, 112, 116, 104, 70, 117, 110, 99, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 68, 97, 115, 104, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 70, 111, 103, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 73, 110, 100, 101, 120, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 73, 110, 100, 101, 120, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 82, 97, 110, 103, 101, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 71, 108, 121, 112, 104, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 77, 101, 109, 111, 114, 121, 71, 108, 121, 112, 104, 73, 110, 100, 101, 120, 65, 114, 114, 97, 121, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 116, 101, 110, 99, 105, 108, 68, 101, 112, 116, 104, 79, 102, 102, 115, 101, 116, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 116, 114, 105, 110, 103, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 117, 98, 67, 111, 109, 109, 97, 110, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 83, 117, 98, 67, 111, 111, 114, 100, 115, 78, 86, 0,
                103, 108, 80, 97, 116, 104, 84, 101, 120, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 97, 117, 115, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 102, 0,
                103, 108, 80, 105, 120, 101, 108, 83, 116, 111, 114, 101, 105, 0,
                103, 108, 80, 111, 105, 110, 116, 65, 108, 111, 110, 103, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 80, 111, 105, 110, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 80, 111, 105, 110, 116, 83, 105, 122, 101, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 77, 111, 100, 101, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 67, 108, 97, 109, 112, 0,
                103, 108, 80, 111, 108, 121, 103, 111, 110, 79, 102, 102, 115, 101, 116, 67, 108, 97, 109, 112, 69, 88, 84, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 111, 112, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 111, 112, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 80, 114, 105, 109, 105, 116, 105, 118, 101, 66, 111, 117, 110, 100, 105, 110, 103, 66, 111, 120, 65, 82, 66, 0,
                103, 108, 80, 114, 105, 109, 105, 116, 105, 118, 101, 82, 101, 115, 116, 97, 114, 116, 73, 110, 100, 101, 120, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 80, 97, 116, 104, 70, 114, 97, 103, 109, 101, 110, 116, 73, 110, 112, 117, 116, 71, 101, 110, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 100, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 100, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 100, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 100, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 100, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 100, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 100, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 100, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 100, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 100, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 69, 88, 84, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 80, 114, 111, 103, 114, 97, 109, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 80, 114, 111, 118, 111, 107, 105, 110, 103, 86, 101, 114, 116, 101, 120, 0,
                103, 108, 80, 117, 115, 104, 67, 108, 105, 101, 110, 116, 65, 116, 116, 114, 105, 98, 68, 101, 102, 97, 117, 108, 116, 69, 88, 84, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 0,
                103, 108, 80, 117, 115, 104, 68, 101, 98, 117, 103, 71, 114, 111, 117, 112, 75, 72, 82, 0,
                103, 108, 80, 117, 115, 104, 71, 114, 111, 117, 112, 77, 97, 114, 107, 101, 114, 69, 88, 84, 0,
                103, 108, 81, 117, 101, 114, 121, 67, 111, 117, 110, 116, 101, 114, 0,
                103, 108, 82, 97, 115, 116, 101, 114, 83, 97, 109, 112, 108, 101, 115, 69, 88, 84, 0,
                103, 108, 82, 101, 97, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 65, 82, 66, 0,
                103, 108, 82, 101, 97, 100, 110, 80, 105, 120, 101, 108, 115, 75, 72, 82, 0,
                103, 108, 82, 101, 97, 100, 80, 105, 120, 101, 108, 115, 0,
                103, 108, 82, 101, 108, 101, 97, 115, 101, 83, 104, 97, 100, 101, 114, 67, 111, 109, 112, 105, 108, 101, 114, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 83, 116, 111, 114, 97, 103, 101, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 78, 86, 0,
                103, 108, 82, 101, 115, 101, 116, 72, 105, 115, 116, 111, 103, 114, 97, 109, 0,
                103, 108, 82, 101, 115, 101, 116, 77, 105, 110, 109, 97, 120, 0,
                103, 108, 82, 101, 115, 111, 108, 118, 101, 68, 101, 112, 116, 104, 86, 97, 108, 117, 101, 115, 78, 86, 0,
                103, 108, 82, 101, 115, 117, 109, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 67, 111, 118, 101, 114, 97, 103, 101, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 77, 97, 115, 107, 105, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 0,
                103, 108, 83, 97, 109, 112, 108, 101, 114, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 65, 114, 114, 97, 121, 118, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 73, 110, 100, 101, 120, 101, 100, 0,
                103, 108, 83, 99, 105, 115, 115, 111, 114, 73, 110, 100, 101, 120, 101, 100, 118, 0,
                103, 108, 83, 101, 99, 111, 110, 100, 97, 114, 121, 67, 111, 108, 111, 114, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 83, 101, 99, 111, 110, 100, 97, 114, 121, 67, 111, 108, 111, 114, 80, 51, 117, 105, 0,
                103, 108, 83, 101, 99, 111, 110, 100, 97, 114, 121, 67, 111, 108, 111, 114, 80, 51, 117, 105, 118, 0,
                103, 108, 83, 101, 108, 101, 99, 116, 80, 101, 114, 102, 77, 111, 110, 105, 116, 111, 114, 67, 111, 117, 110, 116, 101, 114, 115, 65, 77, 68, 0,
                103, 108, 83, 101, 112, 97, 114, 97, 98, 108, 101, 70, 105, 108, 116, 101, 114, 50, 68, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 66, 105, 110, 97, 114, 121, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 83, 111, 117, 114, 99, 101, 0,
                103, 108, 83, 104, 97, 100, 101, 114, 83, 116, 111, 114, 97, 103, 101, 66, 108, 111, 99, 107, 66, 105, 110, 100, 105, 110, 103, 0,
                103, 108, 83, 105, 103, 110, 97, 108, 86, 107, 70, 101, 110, 99, 101, 78, 86, 0,
                103, 108, 83, 105, 103, 110, 97, 108, 86, 107, 83, 101, 109, 97, 112, 104, 111, 114, 101, 78, 86, 0,
                103, 108, 83, 112, 101, 99, 105, 97, 108, 105, 122, 101, 83, 104, 97, 100, 101, 114, 0,
                103, 108, 83, 112, 101, 99, 105, 97, 108, 105, 122, 101, 83, 104, 97, 100, 101, 114, 65, 82, 66, 0,
                103, 108, 83, 116, 97, 116, 101, 67, 97, 112, 116, 117, 114, 101, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 105, 108, 108, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 70, 117, 110, 99, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 77, 97, 115, 107, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 79, 112, 83, 101, 112, 97, 114, 97, 116, 101, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 70, 105, 108, 108, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 73, 110, 115, 116, 97, 110, 99, 101, 100, 78, 86, 0,
                103, 108, 83, 116, 101, 110, 99, 105, 108, 84, 104, 101, 110, 67, 111, 118, 101, 114, 83, 116, 114, 111, 107, 101, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 83, 117, 98, 112, 105, 120, 101, 108, 80, 114, 101, 99, 105, 115, 105, 111, 110, 66, 105, 97, 115, 78, 86, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 65, 82, 66, 0,
                103, 108, 84, 101, 120, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 49, 117, 105, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 49, 117, 105, 118, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 50, 117, 105, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 50, 117, 105, 118, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 51, 117, 105, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 51, 117, 105, 118, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 52, 117, 105, 0,
                103, 108, 84, 101, 120, 67, 111, 111, 114, 100, 80, 52, 117, 105, 118, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 73, 109, 97, 103, 101, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 84, 101, 120, 80, 97, 103, 101, 67, 111, 109, 109, 105, 116, 109, 101, 110, 116, 65, 82, 66, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 0,
                103, 108, 84, 101, 120, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 49, 68, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 83, 116, 111, 114, 97, 103, 101, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 66, 97, 114, 114, 105, 101, 114, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 66, 97, 114, 114, 105, 101, 114, 78, 86, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 103, 101, 67, 111, 109, 109, 105, 116, 109, 101, 110, 116, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 102, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 117, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 80, 97, 114, 97, 109, 101, 116, 101, 114, 105, 118, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 82, 101, 110, 100, 101, 114, 98, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 49, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 50, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 116, 111, 114, 97, 103, 101, 51, 68, 77, 117, 108, 116, 105, 115, 97, 109, 112, 108, 101, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 49, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 50, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 83, 117, 98, 73, 109, 97, 103, 101, 51, 68, 69, 88, 84, 0,
                103, 108, 84, 101, 120, 116, 117, 114, 101, 86, 105, 101, 119, 0,
                103, 108, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 66, 117, 102, 102, 101, 114, 66, 97, 115, 101, 0,
                103, 108, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 66, 117, 102, 102, 101, 114, 82, 97, 110, 103, 101, 0,
                103, 108, 84, 114, 97, 110, 115, 102, 111, 114, 109, 70, 101, 101, 100, 98, 97, 99, 107, 86, 97, 114, 121, 105, 110, 103, 115, 0,
                103, 108, 84, 114, 97, 110, 115, 102, 111, 114, 109, 80, 97, 116, 104, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 100, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 49, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 100, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 50, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 100, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 51, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 100, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 52, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 66, 108, 111, 99, 107, 66, 105, 110, 100, 105, 110, 103, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 72, 97, 110, 100, 108, 101, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 50, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 51, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 50, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 100, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 77, 97, 116, 114, 105, 120, 52, 120, 51, 102, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 83, 117, 98, 114, 111, 117, 116, 105, 110, 101, 115, 117, 105, 118, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 85, 110, 105, 102, 111, 114, 109, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 85, 110, 109, 97, 112, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 85, 110, 109, 97, 112, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 85, 110, 109, 97, 112, 78, 97, 109, 101, 100, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 83, 116, 97, 103, 101, 115, 0,
                103, 108, 85, 115, 101, 80, 114, 111, 103, 114, 97, 109, 83, 116, 97, 103, 101, 115, 69, 88, 84, 0,
                103, 108, 85, 115, 101, 83, 104, 97, 100, 101, 114, 80, 114, 111, 103, 114, 97, 109, 69, 88, 84, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 0,
                103, 108, 86, 97, 108, 105, 100, 97, 116, 101, 80, 114, 111, 103, 114, 97, 109, 80, 105, 112, 101, 108, 105, 110, 101, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 66, 105, 110, 100, 105, 110, 103, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 73, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 65, 116, 116, 114, 105, 98, 76, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 66, 105, 110, 100, 105, 110, 103, 68, 105, 118, 105, 115, 111, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 66, 105, 110, 100, 86, 101, 114, 116, 101, 120, 66, 117, 102, 102, 101, 114, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 67, 111, 108, 111, 114, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 69, 100, 103, 101, 70, 108, 97, 103, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 69, 108, 101, 109, 101, 110, 116, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 70, 111, 103, 67, 111, 111, 114, 100, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 73, 110, 100, 101, 120, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 77, 117, 108, 116, 105, 84, 101, 120, 67, 111, 111, 114, 100, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 78, 111, 114, 109, 97, 108, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 83, 101, 99, 111, 110, 100, 97, 114, 121, 67, 111, 108, 111, 114, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 84, 101, 120, 67, 111, 111, 114, 100, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 66, 105, 110, 100, 105, 110, 103, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 70, 111, 114, 109, 97, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 70, 111, 114, 109, 97, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 70, 111, 114, 109, 97, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 66, 105, 110, 100, 105, 110, 103, 68, 105, 118, 105, 115, 111, 114, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 66, 117, 102, 102, 101, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 66, 117, 102, 102, 101, 114, 115, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 86, 101, 114, 116, 101, 120, 79, 102, 102, 115, 101, 116, 69, 88, 84, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 115, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 49, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 115, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 50, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 115, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 51, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 98, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 102, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 98, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 117, 98, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 117, 98, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 78, 117, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 115, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 117, 98, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 52, 117, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 66, 105, 110, 100, 105, 110, 103, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 68, 105, 118, 105, 115, 111, 114, 65, 82, 66, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 49, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 49, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 49, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 49, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 50, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 50, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 50, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 50, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 51, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 51, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 51, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 51, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 98, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 117, 98, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 52, 117, 115, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 73, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 117, 105, 54, 52, 65, 82, 66, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 117, 105, 54, 52, 118, 65, 82, 66, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 49, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 50, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 50, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 50, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 50, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 50, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 50, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 51, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 51, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 51, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 51, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 51, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 51, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 52, 100, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 52, 100, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 52, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 52, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 52, 117, 105, 54, 52, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 52, 117, 105, 54, 52, 118, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 70, 111, 114, 109, 97, 116, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 76, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 49, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 49, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 50, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 50, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 51, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 51, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 52, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 52, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 65, 116, 116, 114, 105, 98, 80, 111, 105, 110, 116, 101, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 66, 105, 110, 100, 105, 110, 103, 68, 105, 118, 105, 115, 111, 114, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 70, 111, 114, 109, 97, 116, 78, 86, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 50, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 50, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 51, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 51, 117, 105, 118, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 52, 117, 105, 0,
                103, 108, 86, 101, 114, 116, 101, 120, 80, 52, 117, 105, 118, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 65, 114, 114, 97, 121, 118, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 73, 110, 100, 101, 120, 101, 100, 102, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 73, 110, 100, 101, 120, 101, 100, 102, 118, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 80, 111, 115, 105, 116, 105, 111, 110, 87, 83, 99, 97, 108, 101, 78, 86, 0,
                103, 108, 86, 105, 101, 119, 112, 111, 114, 116, 83, 119, 105, 122, 122, 108, 101, 78, 86, 0,
                103, 108, 87, 97, 105, 116, 83, 121, 110, 99, 0,
                103, 108, 87, 97, 105, 116, 86, 107, 83, 101, 109, 97, 112, 104, 111, 114, 101, 78, 86, 0,
                103, 108, 87, 101, 105, 103, 104, 116, 80, 97, 116, 104, 115, 78, 86, 0,
                103, 108, 87, 105, 110, 100, 111, 119, 82, 101, 99, 116, 97, 110, 103, 108, 101, 115, 69, 88, 84, 0,
            };
            EntryPointNameOffsets = new int[]
            {
                0,
                19,
                41,
                66,
                82,
                120,
                135,
                160,
                187,
                209,
                231,
                244,
                264,
                289,
                310,
                323,
                340,
                358,
                376,
                395,
                418,
                448,
                466,
                485,
                505,
                527,
                549,
                574,
                593,
                607,
                622,
                636,
                651,
                669,
                693,
                711,
                730,
                750,
                768,
                785,
                798,
                814,
                831,
                851,
                875,
                900,
                928,
                940,
                953,
                969,
                989,
                1010,
                1034,
                1054,
                1072,
                1095,
                1118,
                1131,
                1157,
                1173,
                1189,
                1209,
                1234,
                1264,
                1297,
                1310,
                1318,
                1336,
                1352,
                1368,
                1384,
                1405,
                1422,
                1435,
                1448,
                1462,
                1485,
                1511,
                1537,
                1566,
                1592,
                1618,
                1644,
                1671,
                1686,
                1702,
                1721,
                1746,
                1763,
                1777,
                1793,
                1805,
                1818,
                1830,
                1843,
                1855,
                1868,
                1884,
                1897,
                1921,
                1945,
                1969,
                1992,
                2008,
                2034,
                2065,
                2096,
                2127,
                2161,
                2195,
                2229,
                2252,
                2275,
                2298,
                2324,
                2350,
                2376,
                2406,
                2436,
                2466,
                2496,
                2529,
                2559,
                2592,
                2622,
                2655,
                2688,
                2721,
                2743,
                2765,
                2789,
                2814,
                2838,
                2863,
                2883,
                2903,
                2920,
                2946,
                2972,
                2991,
                3016,
                3041,
                3069,
                3097,
                3125,
                3150,
                3163,
                3180,
                3197,
                3217,
                3237,
                3257,
                3281,
                3305,
                3329,
                3356,
                3380,
                3407,
                3431,
                3458,
                3481,
                3509,
                3536,
                3554,
                3583,
                3603,
                3619,
                3642,
                3663,
                3686,
                3702,
                3727,
                3743,
                3765,
                3782,
                3797,
                3822,
                3845,
                3871,
                3888,
                3915,
                3932,
                3959,
                3980,
                3991,
                4014,
                4040,
                4066,
                4088,
                4113,
                4138,
                4159,
                4183,
                4207,
                4223,
                4246,
                4267,
                4290,
                4306,
                4330,
                4353,
                4369,
                4394,
                4422,
                4438,
                4460,
                4477,
                4492,
                4509,
                4522,
                4539,
                4566,
                4587,
                4599,
                4611,
                4624,
                4643,
                4657,
                4677,
                4692,
                4702,
                4727,
                4758,
                4769,
                4789,
                4816,
                4846,
                4870,
                4897,
                4915,
                4945,
                4971,
                4984,
                5005,
                5027,
                5052,
                5086,
                5111,
                5124,
                5138,
                5162,
                5179,
                5209,
                5232,
                5247,
                5272,
                5295,
                5319,
                5346,
                5382,
                5416,
                5462,
                5489,
                5509,
                5539,
                5563,
                5596,
                5626,
                5665,
                5681,
                5700,
                5709,
                5733,
                5763,
                5773,
                5792,
                5818,
                5847,
                5870,
                5896,
                5919,
                5944,
                5964,
                5984,
                5995,
                6013,
                6036,
                6061,
                6073,
                6082,
                6090,
                6115,
                6145,
                6178,
                6197,
                6223,
                6250,
                6278,
                6302,
                6329,
                6355,
                6389,
                6422,
                6443,
                6466,
                6489,
                6512,
                6536,
                6564,
                6590,
                6619,
                6652,
                6664,
                6677,
                6694,
                6722,
                6746,
                6773,
                6791,
                6804,
                6825,
                6847,
                6872,
                6885,
                6904,
                6918,
                6932,
                6956,
                6974,
                7007,
                7025,
                7051,
                7082,
                7115,
                7134,
                7160,
                7188,
                7211,
                7233,
                7254,
                7274,
                7290,
                7314,
                7328,
                7353,
                7376,
                7404,
                7424,
                7443,
                7459,
                7486,
                7513,
                7534,
                7566,
                7590,
                7618,
                7649,
                7680,
                7703,
                7731,
                7759,
                7790,
                7811,
                7835,
                7859,
                7874,
                7892,
                7915,
                7928,
                7939,
                7966,
                7980,
                7997,
                8019,
                8031,
                8050,
                8072,
                8110,
                8138,
                8169,
                8194,
                8222,
                8250,
                8265,
                8291,
                8317,
                8337,
                8356,
                8374,
                8390,
                8406,
                8430,
                8452,
                8472,
                8486,
                8510,
                8532,
                8562,
                8574,
                8597,
                8620,
                8639,
                8661,
                8683,
                8705,
                8727,
                8749,
                8771,
                8804,
                8837,
                8865,
                8894,
                8924,
                8952,
                8982,
                9010,
                9041,
                9074,
                9099,
                9127,
                9151,
                9178,
                9221,
                9267,
                9300,
                9336,
                9359,
                9396,
                9433,
                9471,
                9510,
                9537,
                9571,
                9608,
                9628,
                9650,
                9667,
                9687,
                9712,
                9740,
                9764,
                9791,
                9817,
                9833,
                9852,
                9864,
                9879,
                9891,
                9906,
                9918,
                9933,
                9946,
                9962,
                9979,
                9999,
                10017,
                10038,
                10056,
                10077,
                10098,
                10122,
                10144,
                10169,
                10184,
                10202,
                10218,
                10237,
                10253,
                10272,
                10291,
                10312,
                10328,
                10347,
                10366,
                10388,
                10405,
                10425,
                10445,
                10462,
                10482,
                10502,
                10522,
                10545,
                10567,
                10589,
                10609,
                10627,
                10648,
                10666,
                10689,
                10708,
                10731,
                10754,
                10773,
                10793,
                10813,
                10839,
                10870,
                10901,
                10929,
                10962,
                10988,
                11019,
                11043,
                11071,
                11095,
                11114,
                11138,
                11152,
                11169,
                11188,
                11208,
                11232,
                11247,
                11275,
                11306,
                11329,
                11355,
                11380,
                11406,
                11429,
                11458,
                11492,
                11517,
                11537,
                11564,
                11589,
                11617,
                11643,
                11663,
                11676,
                11697,
                11716,
                11738,
                11758,
                11787,
                11811,
                11836,
                11862,
                11886,
                11907,
                11926,
                11940,
                11967,
                11985,
                12003,
                12015,
                12028,
                12049,
                12080,
                12092,
                12106,
                12131,
                12156,
                12176,
                12197,
                12219,
                12239,
                12261,
                12282,
                12300,
                12321,
                12350,
                12382,
                12411,
                12443,
                12467,
                12494,
                12519,
                12547,
                12573,
                12602,
                12626,
                12653,
                12682,
                12710,
                12731,
                12757,
                12785,
                12810,
                12840,
                12863,
                12878,
                12893,
                12913,
                12932,
                12952,
                12967,
                12988,
                13014,
                13035,
                13055,
                13071,
                13099,
                13125,
                13155,
                13183,
                13202,
                13232,
                13260,
                13280,
                13300,
                13321,
                13343,
                13363,
                13384,
                13409,
                13436,
                13462,
                13488,
                13506,
                13513,
                13525,
                13541,
                13564,
                13585,
                13608,
                13634,
                13658,
                13691,
                13727,
                13754,
                13775,
                13799,
                13810,
                13831,
                13849,
                13861,
                13874,
                13896,
                13912,
                13939,
                13965,
                13991,
                14010,
                14021,
                14043,
                14067,
                14079,
                14099,
                14122,
                14132,
                14149,
                14161,
                14172,
                14184,
                14193,
                14205,
                14234,
                14262,
                14284,
                14300,
                14317,
                14329,
                14343,
                14376,
                14386,
                14412,
                14435,
                14467,
                14498,
                14527,
                14555,
                14586,
                14614,
                14648,
                14681,
                14712,
                14742,
                14754,
                14771,
                14788,
                14808,
                14830,
                14855,
                14874,
                14893,
                14912,
                14929,
                14946,
                14970,
                14998,
                15024,
                15050,
                15069,
                15088,
                15105,
                15122,
                15150,
                15176,
                15202,
                15219,
                15234,
                15250,
                15269,
                15288,
                15306,
                15324,
                15346,
                15368,
                15398,
                15428,
                15444,
                15468,
                15477,
                15496,
                15518,
                15536,
                15562,
                15603,
                15639,
                15670,
                15704,
                15724,
                15754,
                15782,
                15825,
                15863,
                15896,
                15932,
                15952,
                15972,
                15993,
                16013,
                16034,
                16054,
                16075,
                16095,
                16116,
                16142,
                16160,
                16179,
                16197,
                16216,
                16234,
                16253,
                16271,
                16290,
                16308,
                16327,
                16348,
                16369,
                16390,
                16414,
                16439,
                16463,
                16489,
                16516,
                16541,
                16567,
                16591,
                16615,
                16639,
                16657,
                16678,
                16709,
                16740,
                16761,
                16785,
                16806,
                16830,
                16858,
                16887,
                16917,
                16946,
                16978,
                17007,
                17038,
                17072,
                17111,
                17149,
                17175,
                17206,
                17237,
                17268,
                17297,
                17330,
                17361,
                17395,
                17429,
                17464,
                17498,
                17533,
                17568,
                17604,
                17640,
                17677,
                17713,
                17750,
                17788,
                17812,
                17839,
                17869,
                17907,
                17956,
                17997,
                18014,
                18031,
                18044,
                18058,
                18072,
                18089,
                18106,
                18126,
                18145,
                18163,
                18180,
                18197,
                18212,
                18235,
                18253,
                18268,
                18292,
                18316,
                18335,
                18350,
                18380,
                18399,
                18419,
                18438,
                18458,
                18485,
                18505,
                18520,
                18540,
                18558,
                18573,
                18598,
                18612,
                18626,
                18645,
                18663,
                18682,
                18700,
                18719,
                18731,
                18745,
                18761,
                18782,
                18806,
                18822,
                18841,
                18861,
                18887,
                18911,
                18927,
                18947,
                18970,
                18993,
                19025,
                19044,
                19066,
                19086,
                19109,
                19128,
                19150,
                19170,
                19193,
                19212,
                19236,
                19259,
                19284,
                19308,
                19330,
                19350,
                19373,
                19393,
                19418,
                19442,
                19468,
                19493,
                19516,
                19537,
                19561,
                19580,
                19602,
                19622,
                19645,
                19664,
                19686,
                19706,
                19729,
                19748,
                19772,
                19795,
                19820,
                19844,
                19866,
                19886,
                19909,
                19929,
                19954,
                19978,
                20004,
                20029,
                20052,
                20073,
                20097,
                20116,
                20138,
                20158,
                20181,
                20200,
                20222,
                20242,
                20265,
                20284,
                20308,
                20331,
                20356,
                20380,
                20402,
                20422,
                20445,
                20465,
                20490,
                20514,
                20540,
                20565,
                20588,
                20609,
                20633,
                20652,
                20674,
                20694,
                20717,
                20736,
                20758,
                20778,
                20801,
                20820,
                20844,
                20867,
                20892,
                20916,
                20938,
                20958,
                20981,
                21001,
                21026,
                21050,
                21076,
                21101,
                21124,
                21145,
                21169,
                21199,
                21228,
                21259,
                21289,
                21315,
                21344,
                21370,
                21399,
                21427,
                21458,
                21486,
                21517,
                21545,
                21576,
                21604,
                21635,
                21661,
                21690,
                21716,
                21745,
                21773,
                21804,
                21832,
                21863,
                21891,
                21922,
                21950,
                21981,
                22007,
                22036,
                22062,
                22091,
                22119,
                22150,
                22178,
                22209,
                22237,
                22268,
                22296,
                22327,
                22350,
                22374,
                22392,
                22421,
                22438,
                22458,
                22479,
                22494,
                22513,
                22526,
                22540,
                22557,
                22574,
                22587,
                22611,
                22633,
                22666,
                22709,
                22726,
                22740,
                22763,
                22789,
                22806,
                22820,
                22840,
                22861,
                22881,
                22903,
                22926,
                22947,
                22957,
                22973,
                22990,
                23008,
                23033,
                23054,
                23076,
                23107,
                23127,
                23142,
                23157,
                23185,
                23203,
                23225,
                23244,
                23266,
                23283,
                23312,
                23332,
                23346,
                23368,
                23382,
                23404,
                23416,
                23436,
                23467,
                23489,
                23527,
                23556,
                23596,
                23627,
                23653,
                23665,
                23680,
                23697,
                23716,
                23731,
                23747,
                23762,
                23778,
                23793,
                23809,
                23824,
                23840,
                23853,
                23866,
                23890,
                23903,
                23927,
                23950,
                23966,
                23983,
                23999,
                24017,
                24036,
                24053,
                24068,
                24083,
                24109,
                24124,
                24150,
                24166,
                24182,
                24198,
                24215,
                24234,
                24250,
                24269,
                24290,
                24314,
                24334,
                24354,
                24374,
                24401,
                24421,
                24444,
                24465,
                24489,
                24509,
                24532,
                24554,
                24579,
                24602,
                24628,
                24649,
                24673,
                24698,
                24717,
                24739,
                24758,
                24780,
                24810,
                24843,
                24862,
                24884,
                24914,
                24947,
                24967,
                24990,
                25010,
                25033,
                25053,
                25076,
                25090,
                25120,
                25151,
                25179,
                25197,
                25209,
                25222,
                25234,
                25247,
                25259,
                25276,
                25292,
                25310,
                25327,
                25340,
                25353,
                25371,
                25388,
                25407,
                25425,
                25439,
                25451,
                25464,
                25476,
                25489,
                25501,
                25518,
                25534,
                25552,
                25569,
                25582,
                25595,
                25613,
                25630,
                25649,
                25667,
                25681,
                25693,
                25706,
                25718,
                25731,
                25743,
                25760,
                25776,
                25794,
                25811,
                25824,
                25837,
                25855,
                25872,
                25891,
                25909,
                25923,
                25935,
                25948,
                25960,
                25973,
                25985,
                26002,
                26018,
                26036,
                26053,
                26066,
                26079,
                26097,
                26114,
                26133,
                26151,
                26165,
                26187,
                26210,
                26232,
                26256,
                26279,
                26298,
                26317,
                26338,
                26359,
                26380,
                26401,
                26420,
                26439,
                26460,
                26481,
                26502,
                26523,
                26542,
                26561,
                26582,
                26603,
                26624,
                26645,
                26669,
                26685,
                26702,
                26716,
                26735,
                26757,
                26770,
                26789,
                26811,
                26833,
                26851,
                26877,
                26906,
                26933,
                26959,
                26986,
                27013,
                27041,
                27074,
                27102,
                27133,
                27160,
                27191,
                27219,
                27255,
                27284,
                27321,
                27352,
                27388,
                27424,
                27459,
                27495,
                27531,
                27567,
                27603,
                27638,
                27675,
                27701,
                27728,
                27757,
                27774,
                27792,
                27809,
                27827,
                27844,
                27862,
                27879,
                27897,
                27914,
                27932,
                27949,
                27967,
                27984,
                28002,
                28019,
                28037,
                28054,
                28072,
                28090,
                28107,
                28125,
                28142,
                28160,
                28178,
                28197,
                28216,
                28235,
                28254,
                28274,
                28294,
                28314,
                28331,
                28349,
                28368,
                28387,
                28406,
                28428,
                28450,
                28475,
                28496,
                28519,
                28537,
                28556,
                28575,
                28595,
                28613,
                28632,
                28651,
                28671,
                28689,
                28708,
                28727,
                28747,
                28766,
                28784,
                28803,
                28822,
                28842,
                28861,
                28881,
                28901,
                28923,
                28947,
                28970,
                28988,
                29007,
                29029,
                29052,
                29076,
                29099,
                29124,
                29148,
                29166,
                29185,
                29207,
                29230,
                29253,
                29277,
                29295,
                29314,
                29336,
                29359,
                29382,
                29406,
                29424,
                29443,
                29465,
                29488,
                29511,
                29535,
                29557,
                29581,
                29604,
                29623,
                29643,
                29662,
                29682,
                29701,
                29721,
                29740,
                29760,
                29782,
                29805,
                29822,
                29835,
                29849,
                29862,
                29876,
                29889,
                29903,
                29914,
                29931,
                29950,
                29970,
                29997,
                30017,
                30028,
                30048,
                30064,
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        public static partial class Amd
        {
            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glBeginPerfMonitorAMD")]
            public static void BeginPerfMonitor(uint monitor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            public static void DeletePerfMonitor([CountAttribute(Parameter = "n")] uint monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            public static void DeletePerfMonitors(int n, [CountAttribute(Parameter = "n")] uint[] monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            public static void DeletePerfMonitors(int n, [CountAttribute(Parameter = "n")] ref uint monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            public static unsafe void DeletePerfMonitors(int n, [CountAttribute(Parameter = "n")] uint* monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glEndPerfMonitorAMD")]
            public static void EndPerfMonitor(uint monitor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            public static uint GenPerfMonitor()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            public static void GenPerfMonitors(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            public static void GenPerfMonitors(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="monitors">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            public static unsafe void GenPerfMonitors(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* monitors)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// [length: dataSize]
            /// </param>
            /// <param name="bytesWritten">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            public static void GetPerfMonitorCounterData(uint monitor, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, int dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] uint[] data, [OutAttribute, CountAttribute(Count = 1)] out int bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// [length: dataSize]
            /// </param>
            /// <param name="bytesWritten">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            public static void GetPerfMonitorCounterData(uint monitor, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, int dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] out uint data, [OutAttribute, CountAttribute(Count = 1)] out int bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// [length: dataSize]
            /// </param>
            /// <param name="bytesWritten">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            public static unsafe void GetPerfMonitorCounterData(uint monitor, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, int dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] uint* data, [OutAttribute, CountAttribute(Count = 1)] int* bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            public static void GetPerfMonitorCounterInfo(uint group, uint counter, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, [InAttribute, OutAttribute, CountAttribute(Computed = "pname")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, [InAttribute, OutAttribute, CountAttribute(Computed = "pname")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, [InAttribute, OutAttribute, CountAttribute(Computed = "pname")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, [InAttribute, OutAttribute, CountAttribute(Computed = "pname")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="counterString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            public static void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String counterString)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="counter">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="counterString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String counterString)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="numCounters">
            /// [length: 1]
            /// </param>
            /// <param name="maxActiveCounters">
            /// [length: 1]
            /// </param>
            /// <param name="counterSize">
            /// </param>
            /// <param name="counters">
            /// [length: counterSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            public static void GetPerfMonitorCounters(uint group, [OutAttribute, CountAttribute(Count = 1)] out int numCounters, [OutAttribute, CountAttribute(Count = 1)] out int maxActiveCounters, int counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] uint[] counters)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="numCounters">
            /// [length: 1]
            /// </param>
            /// <param name="maxActiveCounters">
            /// [length: 1]
            /// </param>
            /// <param name="counterSize">
            /// </param>
            /// <param name="counters">
            /// [length: counterSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            public static void GetPerfMonitorCounters(uint group, [OutAttribute, CountAttribute(Count = 1)] out int numCounters, [OutAttribute, CountAttribute(Count = 1)] out int maxActiveCounters, int counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] out uint counters)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="numCounters">
            /// [length: 1]
            /// </param>
            /// <param name="maxActiveCounters">
            /// [length: 1]
            /// </param>
            /// <param name="counterSize">
            /// </param>
            /// <param name="counters">
            /// [length: counterSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            public static unsafe void GetPerfMonitorCounters(uint group, [OutAttribute, CountAttribute(Count = 1)] int* numCounters, [OutAttribute, CountAttribute(Count = 1)] int* maxActiveCounters, int counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] uint* counters)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="groupString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            public static void GetPerfMonitorGroupString(uint group, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String groupString)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="group">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="groupString">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String groupString)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="numGroups">
            /// [length: 1]
            /// </param>
            /// <param name="groupsSize">
            /// </param>
            /// <param name="groups">
            /// [length: groupsSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            public static void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] out int numGroups, int groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] uint[] groups)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="numGroups">
            /// [length: 1]
            /// </param>
            /// <param name="groupsSize">
            /// </param>
            /// <param name="groups">
            /// [length: groupsSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            public static void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] out int numGroups, int groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] out uint groups)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="numGroups">
            /// [length: 1]
            /// </param>
            /// <param name="groupsSize">
            /// </param>
            /// <param name="groups">
            /// [length: groupsSize]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            public static unsafe void GetPerfMonitorGroups([OutAttribute, CountAttribute(Count = 1)] int* numGroups, int groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] uint* groups)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            /// <param name="enable">
            /// </param>
            /// <param name="group">
            /// </param>
            /// <param name="numCounters">
            /// </param>
            /// <param name="counterList">
            /// [length: numCounters]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            public static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] uint[] counterList)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            /// <param name="enable">
            /// </param>
            /// <param name="group">
            /// </param>
            /// <param name="numCounters">
            /// </param>
            /// <param name="counterList">
            /// [length: numCounters]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            public static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] out uint counterList)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_performance_monitor]
            /// </summary>
            /// <param name="monitor">
            /// </param>
            /// <param name="enable">
            /// </param>
            /// <param name="group">
            /// </param>
            /// <param name="numCounters">
            /// </param>
            /// <param name="counterList">
            /// [length: numCounters]
            /// </param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] uint* counterList)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_draw_buffers_blend]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
            /// </param>
            /// <param name="modeRGB">
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            /// <param name="modeAlpha">
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationSeparateiARB")]
            public static void BlendEquationSeparate(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationModeExt modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationModeExt modeAlpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_buffers_blend]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
            /// </param>
            /// <param name="mode">
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationiARB")]
            public static void BlendEquation(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_buffers_blend]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
            /// </param>
            /// <param name="srcRGB">
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dstRGB">
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha">
            /// Specified how the alpha source blending factor is computed. The initial value is One.
            /// </param>
            /// <param name="dstAlpha">
            /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendFuncSeparateiARB")]
            public static void BlendFuncSeparate(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactor srcRGB, OpenTK.Graphics.OpenGL4.BlendingFactor dstRGB, OpenTK.Graphics.OpenGL4.BlendingFactor srcAlpha, OpenTK.Graphics.OpenGL4.BlendingFactor dstAlpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_buffers_blend]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
            /// </param>
            /// <param name="src">
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
            /// </param>
            /// <param name="dst">
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendFunciARB")]
            public static void BlendFunc(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactor src, OpenTK.Graphics.OpenGL4.BlendingFactor dst)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_buffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_buffer", Version = "", EntryPoint = "glBufferPageCommitmentARB")]
            public static void BufferPageCommitment(OpenTK.Graphics.OpenGL4.BufferTargetArb target, IntPtr offset, int size, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_buffer]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_buffer", Version = "", EntryPoint = "glBufferPageCommitmentARB")]
            public static void BufferPageCommitment(OpenTK.Graphics.OpenGL4.BufferTargetArb target, IntPtr offset, IntPtr size, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="shader">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="path">
            /// [length: count]
            /// </param>
            /// <param name="length">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static void CompileShaderInclude(uint shader, int count, [CountAttribute(Parameter = "count")] String[] path, [CountAttribute(Parameter = "count")] int[] length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="shader">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="path">
            /// [length: count]
            /// </param>
            /// <param name="length">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static void CompileShaderInclude(uint shader, int count, [CountAttribute(Parameter = "count")] String[] path, [CountAttribute(Parameter = "count")] ref int length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="shader">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="path">
            /// [length: count]
            /// </param>
            /// <param name="length">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static unsafe void CompileShaderInclude(uint shader, int count, [CountAttribute(Parameter = "count")] String[] path, [CountAttribute(Parameter = "count")] int* length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_cl_event]
            /// </summary>
            /// <param name="context">
            /// </param>
            /// <param name="@event">
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static IntPtr CreateSyncFromCLevent([OutAttribute] IntPtr[] context, [OutAttribute] IntPtr[] @event, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_cl_event]
            /// </summary>
            /// <param name="context">
            /// </param>
            /// <param name="@event">
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static IntPtr CreateSyncFromCLevent([OutAttribute] out IntPtr context, [OutAttribute] out IntPtr @event, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_cl_event]
            /// </summary>
            /// <param name="context">
            /// </param>
            /// <param name="@event">
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static unsafe IntPtr CreateSyncFromCLevent([OutAttribute] IntPtr* context, [OutAttribute] IntPtr* @event, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback(DebugProcArb callback, [CountAttribute(Computed = "callback")] IntPtr userParam)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] T1[] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] T1[,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] T1[,,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// [length: COMPSIZE(callback)]
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute, CountAttribute(Computed = "callback")] ref T1 userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint[] ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] ref uint ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// [length: length]
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageInsertARB")]
            public static void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Parameter = "length")] String buf)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glDeleteNamedStringARB")]
            public static void DeleteNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_compute_variable_group_size]
            /// </summary>
            /// <param name="num_groups_x">
            /// </param>
            /// <param name="num_groups_y">
            /// </param>
            /// <param name="num_groups_z">
            /// </param>
            /// <param name="group_size_x">
            /// </param>
            /// <param name="group_size_y">
            /// </param>
            /// <param name="group_size_z">
            /// </param>
            [AutoGenerated(Category = "ARB_compute_variable_group_size", Version = "", EntryPoint = "glDispatchComputeGroupSizeARB")]
            public static void DispatchComputeGroupSize(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedARB")]
            public static void DrawArraysInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count, int primcount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedARB")]
            public static void DrawElementsInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int primcount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedARB")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedARB")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedARB")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ARB_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedARB")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glEvaluateDepthValuesARB")]
            public static void EvaluateDepthValues()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvARB")]
            public static void FramebufferSampleLocations(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvARB")]
            public static void FramebufferSampleLocations(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvARB")]
            public static unsafe void FramebufferSampleLocations(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_geometry_shader4]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "", EntryPoint = "glFramebufferTextureARB")]
            public static void FramebufferTexture(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_geometry_shader4]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="face">
            /// </param>
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "", EntryPoint = "glFramebufferTextureFaceARB")]
            public static void FramebufferTextureFace(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, OpenTK.Graphics.OpenGL4.TextureTarget face)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_geometry_shader4]
            /// Attach a single layer of a texture to a framebuffer
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            /// <param name="layer">
            /// Specifies the layer of texture to attach.
            /// </param>
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "", EntryPoint = "glFramebufferTextureLayerARB")]
            public static void FramebufferTextureLayer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusARB")]
            public static OpenTK.Graphics.OpenGL4.GraphicsResetStatus GetGraphicsResetStatus()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="layered">
            /// </param>
            /// <param name="layer">
            /// </param>
            /// <param name="format">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetImageHandleARB")]
            public static ulong GetImageHandle(uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL4.PixelFormat format)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="stringlen">
            /// [length: 1]
            /// </param>
            /// <param name="@string">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringARB")]
            public static void GetNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int stringlen, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="stringlen">
            /// [length: 1]
            /// </param>
            /// <param name="@string">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringARB")]
            public static unsafe void GetNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* stringlen, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringivARB")]
            public static void GetNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name, OpenTK.Graphics.OpenGL4.ArbShadingLanguageInclude pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringivARB")]
            public static void GetNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name, OpenTK.Graphics.OpenGL4.ArbShadingLanguageInclude pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringivARB")]
            public static unsafe void GetNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name, OpenTK.Graphics.OpenGL4.ArbShadingLanguageInclude pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="texture">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleARB")]
            public static ulong GetTextureHandle(uint texture)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="sampler">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleARB")]
            public static ulong GetTextureSamplerHandle(uint texture, uint sampler)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetUniformi64vARB")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetUniformi64vARB")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetUniformi64vARB")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetUniformui64vARB")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetUniformui64vARB")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetUniformui64vARB")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static unsafe void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr table)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="table">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 table)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T3[] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T3[,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T3[,,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T3 img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr image)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="image">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 image)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T5 values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="v">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,,] values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="reset">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T5 values)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out uint values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] ushort[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out ushort values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="map">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] ushort* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static Byte GetnPolygonStipple()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="bufSize">
            /// </param>
            /// <param name="pattern">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static void GetnPolygonStipple(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Byte[] pattern)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="bufSize">
            /// </param>
            /// <param name="pattern">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static void GetnPolygonStipple(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Byte pattern)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="bufSize">
            /// </param>
            /// <param name="pattern">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static unsafe void GetnPolygonStipple(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Byte* pattern)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [OutAttribute, CountAttribute(Parameter = "rowBufSize")] IntPtr row, int columnBufSize, [OutAttribute, CountAttribute(Parameter = "columnBufSize")] IntPtr column, [OutAttribute, CountAttribute(Count = 0)] IntPtr span)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] T4[] row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] T6[] column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] T7[] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] T4[,] row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] T6[,] column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] T7[,] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] T4[,,] row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] T6[,,] column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] T7[,,] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="rowBufSize">
            /// </param>
            /// <param name="row">
            /// [length: rowBufSize]
            /// </param>
            /// <param name="columnBufSize">
            /// </param>
            /// <param name="column">
            /// [length: columnBufSize]
            /// </param>
            /// <param name="span">
            /// [length: 0]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "rowBufSize")] ref T4 row, int columnBufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "columnBufSize")] ref T6 column, [InAttribute, OutAttribute, CountAttribute(Count = 0)] ref T7 span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[] img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,] img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T5[,,] img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="img">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T5 img)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetnUniformi64vARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetnUniformi64vARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetnUniformi64vARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetnUniformui64vARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetnUniformui64vARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glGetnUniformui64vARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glIsImageHandleResidentARB")]
            public static bool IsImageHandleResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glIsNamedStringARB")]
            public static bool IsNamedString(int namelen, [CountAttribute(Parameter = "namelen")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glIsTextureHandleResidentARB")]
            public static bool IsTextureHandleResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleNonResidentARB")]
            public static void MakeImageHandleNonResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleResidentARB")]
            public static void MakeImageHandleResident(ulong handle, OpenTK.Graphics.OpenGL4.ArbBindlessTexture access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleNonResidentARB")]
            public static void MakeTextureHandleNonResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleResidentARB")]
            public static void MakeTextureHandleResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_parallel_shader_compile]
            /// </summary>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "ARB_parallel_shader_compile", Version = "", EntryPoint = "glMaxShaderCompilerThreadsARB")]
            public static void MaxShaderCompilerThreads(uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_shading]
            /// Specifies minimum rate at which sample shaing takes place
            /// </summary>
            /// <param name="value">
            /// Specifies the rate at which samples are shaded within each covered pixel.
            /// </param>
            [AutoGenerated(Category = "ARB_sample_shading", Version = "", EntryPoint = "glMinSampleShadingARB")]
            public static void MinSampleShading(float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
            public static void MultiDrawArraysIndirectCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
            public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
            public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
            public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
            public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
            public static void MultiDrawElementsIndirectCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
            public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
            public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
            public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_indirect_parameters]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawcount">
            /// </param>
            /// <param name="maxdrawcount">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
            public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T2 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_buffer]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_buffer", Version = "", EntryPoint = "glNamedBufferPageCommitmentARB")]
            public static void NamedBufferPageCommitment(uint buffer, IntPtr offset, int size, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_buffer]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_buffer", Version = "", EntryPoint = "glNamedBufferPageCommitmentARB")]
            public static void NamedBufferPageCommitment(uint buffer, IntPtr offset, IntPtr size, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvARB")]
            public static void NamedFramebufferSampleLocations(uint framebuffer, uint start, int count, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvARB")]
            public static void NamedFramebufferSampleLocations(uint framebuffer, uint start, int count, ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sample_locations]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvARB")]
            public static unsafe void NamedFramebufferSampleLocations(uint framebuffer, uint start, int count, float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shading_language_include]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="namelen">
            /// </param>
            /// <param name="name">
            /// [length: namelen]
            /// </param>
            /// <param name="stringlen">
            /// </param>
            /// <param name="@string">
            /// [length: stringlen]
            /// </param>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glNamedStringARB")]
            public static void NamedString(OpenTK.Graphics.OpenGL4.ArbShadingLanguageInclude type, int namelen, [CountAttribute(Parameter = "namelen")] String name, int stringlen, [CountAttribute(Parameter = "stringlen")] String @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_ES3_2_compatibility]
            /// </summary>
            /// <param name="minX">
            /// </param>
            /// <param name="minY">
            /// </param>
            /// <param name="minZ">
            /// </param>
            /// <param name="minW">
            /// </param>
            /// <param name="maxX">
            /// </param>
            /// <param name="maxY">
            /// </param>
            /// <param name="maxZ">
            /// </param>
            /// <param name="maxW">
            /// </param>
            [AutoGenerated(Category = "ARB_ES3_2_compatibility", Version = "", EntryPoint = "glPrimitiveBoundingBoxARB")]
            public static void PrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_geometry_shader4]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "ARB_geometry_shader4", Version = "", EntryPoint = "glProgramParameteriARB")]
            public static void ProgramParameter(uint program, OpenTK.Graphics.OpenGL4.AssemblyProgramParameterArb pname, int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1i64ARB")]
            public static void ProgramUniform1(uint program, int location, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1i64vARB")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1i64vARB")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1i64vARB")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1ui64ARB")]
            public static void ProgramUniform1(uint program, int location, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1ui64vARB")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1ui64vARB")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform1ui64vARB")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2i64ARB")]
            public static void ProgramUniform2(uint program, int location, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2i64vARB")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2i64vARB")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2i64vARB")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2ui64ARB")]
            public static void ProgramUniform2(uint program, int location, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2ui64vARB")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2ui64vARB")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform2ui64vARB")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3i64ARB")]
            public static void ProgramUniform3(uint program, int location, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3i64vARB")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3i64vARB")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3i64vARB")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3ui64ARB")]
            public static void ProgramUniform3(uint program, int location, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3ui64vARB")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3ui64vARB")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform3ui64vARB")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4i64ARB")]
            public static void ProgramUniform4(uint program, int location, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4i64vARB")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4i64vARB")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4i64vARB")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4ui64ARB")]
            public static void ProgramUniform4(uint program, int location, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4ui64vARB")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4ui64vARB")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glProgramUniform4ui64vARB")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64ARB")]
            public static void ProgramUniformHandle(uint program, int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="values">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static void ProgramUniformHandle(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="values">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static void ProgramUniformHandle(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="values">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static unsafe void ProgramUniformHandle(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels(int x, int y, int width, int height, All format, All type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T7 data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T7 data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gl_spirv]
            /// </summary>
            /// <param name="shader">
            /// </param>
            /// <param name="pEntryPoint">
            /// </param>
            /// <param name="numSpecializationConstants">
            /// </param>
            /// <param name="pConstantIndex">
            /// </param>
            /// <param name="pConstantValue">
            /// </param>
            [AutoGenerated(Category = "ARB_gl_spirv", Version = "", EntryPoint = "glSpecializeShaderARB")]
            public static void SpecializeShader(uint shader, String pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gl_spirv]
            /// </summary>
            /// <param name="shader">
            /// </param>
            /// <param name="pEntryPoint">
            /// </param>
            /// <param name="numSpecializationConstants">
            /// </param>
            /// <param name="pConstantIndex">
            /// </param>
            /// <param name="pConstantValue">
            /// </param>
            [AutoGenerated(Category = "ARB_gl_spirv", Version = "", EntryPoint = "glSpecializeShaderARB")]
            public static void SpecializeShader(uint shader, String pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gl_spirv]
            /// </summary>
            /// <param name="shader">
            /// </param>
            /// <param name="pEntryPoint">
            /// </param>
            /// <param name="numSpecializationConstants">
            /// </param>
            /// <param name="pConstantIndex">
            /// </param>
            /// <param name="pConstantValue">
            /// </param>
            [AutoGenerated(Category = "ARB_gl_spirv", Version = "", EntryPoint = "glSpecializeShaderARB")]
            public static unsafe void SpecializeShader(uint shader, String pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_buffer_object]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_buffer_object", Version = "", EntryPoint = "glTexBufferARB")]
            public static void TexBuffer(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_texture]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_texture", Version = "", EntryPoint = "glTexPageCommitmentARB")]
            public static void TexPageCommitment(OpenTK.Graphics.OpenGL4.ArbSparseTexture target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1i64ARB")]
            public static void Uniform1(int location, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1i64vARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1i64vARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1i64vARB")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1ui64ARB")]
            public static void Uniform1(int location, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1ui64vARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1ui64vARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform1ui64vARB")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2i64ARB")]
            public static void Uniform2(int location, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2i64vARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2i64vARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2i64vARB")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2ui64ARB")]
            public static void Uniform2(int location, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2ui64vARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2ui64vARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform2ui64vARB")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3i64ARB")]
            public static void Uniform3(int location, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3i64vARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3i64vARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3i64vARB")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3ui64ARB")]
            public static void Uniform3(int location, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3ui64vARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3ui64vARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform3ui64vARB")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4i64ARB")]
            public static void Uniform4(int location, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4i64vARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4i64vARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4i64vARB")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4ui64ARB")]
            public static void Uniform4(int location, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4ui64vARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4ui64vARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_gpu_shader_int64]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_gpu_shader_int64", Version = "", EntryPoint = "glUniform4ui64vARB")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64ARB")]
            public static void UniformHandle(int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static void UniformHandle(int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static void UniformHandle(int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static unsafe void UniformHandle(int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "ARB_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorARB")]
            public static void VertexAttribDivisor(uint index, uint divisor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64ARB")]
            public static void VertexAttribL1(uint index, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static void VertexAttribL1(uint index, ulong[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static void VertexAttribL1(uint index, ref ulong v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_bindless_texture]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static unsafe void VertexAttribL1(uint index, ulong* v)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        public static partial class Cmaaintel
        {
            /// <summary>
            /// [requires: INTEL_framebuffer_CMAA]
            /// </summary>
            [AutoGenerated(Category = "INTEL_framebuffer_CMAA", Version = "", EntryPoint = "glApplyFramebufferAttachmentCMAAINTEL")]
            public static void ApplyFramebufferAttachment()
            {
                throw new BindingsNotRewrittenException();
            }
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Set the active program object for a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to set the active program object for.
        /// </param>
        /// <param name="program">
        /// Specifies the program object to set as the active program pipeline object pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
        public static void ActiveShaderProgram(uint pipeline, uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.OpenGL4.TextureUnit texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        public static void AttachShader(uint program, uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Start conditional rendering
        /// </summary>
        /// <param name="id">
        /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
        /// </param>
        /// <param name="mode">
        /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static void BeginConditionalRender(uint id, OpenTK.Graphics.OpenGL4.ConditionalRenderType mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static void BeginQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Delimit the boundaries of a query object on an indexed target
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query target upon which to begin the query.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glBeginQueryIndexed")]
        public static void BeginQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackPrimitiveType primitiveMode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name">
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static void BindAttribLocation(uint program, uint index, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static void BindBufferBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint index, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static void BindBufferRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint index, uint buffer, IntPtr offset, int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static void BindBufferRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] ref uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static unsafe void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] IntPtr[] sizes)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] ref uint buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref IntPtr sizes)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static unsafe void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Bind a user-defined varying out variable to a fragment shader color number
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="color">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static void BindFragDataLocation(uint program, uint color, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]
        /// Bind a user-defined varying out variable to a fragment shader color number and index
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="colorNumber">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="index">
        /// The index of the color input to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glBindFragDataLocationIndexed")]
        public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static void BindFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint framebuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]
        /// Bind a level of a texture to an image unit
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the image unit to which to bind the texture
        /// </param>
        /// <param name="texture">
        /// Specifies the name of the texture to bind to the image unit.
        /// </param>
        /// <param name="level">
        /// Specifies the level of the texture that is to be bound.
        /// </param>
        /// <param name="layered">
        /// Specifies whether a layered texture binding is to be established.
        /// </param>
        /// <param name="layer">
        /// If layered is False, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
        /// </param>
        /// <param name="access">
        /// Specifies a token indicating the type of access that will be performed on the image.
        /// </param>
        /// <param name="format">
        /// Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glBindImageTexture")]
        public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL4.TextureAccess access, OpenTK.Graphics.OpenGL4.SizedInternalFormat format)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static void BindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static void BindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static unsafe void BindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Bind a program pipeline to the current context
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of the pipeline object to bind to the context.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
        public static void BindProgramPipeline(uint pipeline)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static void BindRenderbuffer(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </param>
        /// <param name="sampler">
        /// Specifies the name of a sampler.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glBindSampler")]
        public static void BindSampler(uint unit, uint sampler)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static void BindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static void BindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] ref uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static unsafe void BindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMap, TextureCubeMapArray, TextureBuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.OpenGL4.TextureTarget target, uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="unit">
        /// </param>
        /// <param name="texture">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glBindTextureUnit")]
        public static void BindTextureUnit(uint unit, uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static void BindTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static void BindTextures(uint first, int count, [CountAttribute(Parameter = "count")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">
        /// [length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static unsafe void BindTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glBindTransformFeedback")]
        public static void BindTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackTarget target, uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies the name of the vertex array to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static void BindVertexArray(uint array)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </param>
        /// <param name="buffer">
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </param>
        /// <param name="offset">
        /// The offset of the first element of the buffer.
        /// </param>
        /// <param name="stride">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glBindVertexBuffer")]
        public static void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">
        /// [length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">
        /// [length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static void BindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] uint[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] int[] strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">
        /// [length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">
        /// [length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static void BindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] ref uint buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref int strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">
        /// [length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">
        /// [length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">
        /// [length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static unsafe void BindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] int* strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4 or ARB_imaging|VERSION_1_4]
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="green">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="blue">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="alpha">
        /// specify the components of BlendColor
        /// </param>
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendColor")]
        public static void BlendColor(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4 or ARB_imaging|VERSION_1_4]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.OpenGL4.BlendEquationMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </param>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationSeparatei")]
        public static void BlendEquationSeparate(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        public static void BlendEquation(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.OpenGL4.BlendingFactor sfactor, OpenTK.Graphics.OpenGL4.BlendingFactor dfactor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        public static void BlendFuncSeparate(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        public static void BlendFunc(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc src, OpenTK.Graphics.OpenGL4.BlendingFactorDest dst)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcX1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="dstX0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstX1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="mask">
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
        /// </param>
        /// <param name="filter">
        /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, OpenTK.Graphics.OpenGL4.ClearBufferMask mask, OpenTK.Graphics.OpenGL4.BlitFramebufferFilter filter)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="readFramebuffer">
        /// </param>
        /// <param name="drawFramebuffer">
        /// </param>
        /// <param name="srcX0">
        /// </param>
        /// <param name="srcY0">
        /// </param>
        /// <param name="srcX1">
        /// </param>
        /// <param name="srcY1">
        /// </param>
        /// <param name="dstX0">
        /// </param>
        /// <param name="dstY0">
        /// </param>
        /// <param name="dstX1">
        /// </param>
        /// <param name="dstY1">
        /// </param>
        /// <param name="mask">
        /// </param>
        /// <param name="filter">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glBlitNamedFramebuffer")]
        public static void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, OpenTK.Graphics.OpenGL4.ClearBufferMask mask, OpenTK.Graphics.OpenGL4.BlitFramebufferFilter filter)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specify the target of the framebuffer completeness check.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.OpenGL4.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL4.FramebufferTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="target">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCheckNamedFramebufferStatus")]
        public static OpenTK.Graphics.OpenGL4.FramebufferStatus CheckNamedFramebufferStatus(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify whether data read via glReadPixels should be clamped
        /// </summary>
        /// <param name="target">
        /// Target for color clamping. target must be ClampReadColor.
        /// </param>
        /// <param name="clamp">
        /// Specifies whether to apply color clamping. clamp must be True or False.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
        public static void ClampColor(OpenTK.Graphics.OpenGL4.ClampColorTarget target, OpenTK.Graphics.OpenGL4.ClampColorMode clamp)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.OpenGL4.ClearBufferMask mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="depth">
        /// The value to clear a depth render buffer to.
        /// </param>
        /// <param name="stencil">
        /// The value to clear a stencil render buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">
        /// [length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static void ClearColor(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearDepth")]
        public static void ClearDepth(double depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(float d)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        public static void ClearNamedBufferData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,,] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T4 data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="stencil">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfi")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        public static unsafe void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        public static unsafe void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferuiv")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferuiv")]
        public static void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="drawbuffer">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferuiv")]
        public static unsafe void ClearNamedFramebuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(int s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static void ClearTexImage(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static void ClearTexImage<T4>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static void ClearTexImage<T4>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static void ClearTexImage<T4>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static void ClearTexImage<T4>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[,,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T10 data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        public static OpenTK.Graphics.OpenGL4.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.ClientWaitSyncFlags flags, ulong timeout)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_clip_control|VERSION_4_5]
        /// </summary>
        /// <param name="origin">
        /// </param>
        /// <param name="depth">
        /// </param>
        [AutoGenerated(Category = "ARB_clip_control|VERSION_4_5", Version = "4.5", EntryPoint = "glClipControl")]
        public static void ClipControl(OpenTK.Graphics.OpenGL4.ClipOrigin origin, OpenTK.Graphics.OpenGL4.ClipDepthMode depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="index">
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </param>
        /// <param name="r">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="g">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="b">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="a">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3ui")]
        public static void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3uiv")]
        public static void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3uiv")]
        public static unsafe void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4ui")]
        public static void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4uiv")]
        public static void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4uiv")]
        public static unsafe void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,count")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[] data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[,] data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[,,] data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] ref T5 data)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr table)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 table)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        public static void CompileShader(uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T10 data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        public static void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        public static void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        public static void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        public static void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        public static void CompressedTextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        public static void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        public static void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        public static void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        public static void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        public static void CompressedTextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        public static void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        public static void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        public static void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        public static void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="imageSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        public static void CompressedTextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 image)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 image)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterf")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteri")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_copy_buffer|VERSION_3_1]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readTarget">
        /// Specifies the target from whose data store data should be read.
        /// </param>
        /// <param name="writeTarget">
        /// Specifies the target to whose data store data should be written.
        /// </param>
        /// <param name="readOffset">
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </param>
        /// <param name="writeOffset">
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </param>
        /// <param name="size">
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_buffer|VERSION_3_1", Version = "3.1", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget readTarget, OpenTK.Graphics.OpenGL4.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_copy_buffer|VERSION_3_1]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readTarget">
        /// Specifies the target from whose data store data should be read.
        /// </param>
        /// <param name="writeTarget">
        /// Specifies the target to whose data store data should be written.
        /// </param>
        /// <param name="readOffset">
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </param>
        /// <param name="writeOffset">
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </param>
        /// <param name="size">
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_buffer|VERSION_3_1", Version = "3.1", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget readTarget, OpenTK.Graphics.OpenGL4.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="x">
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// The number of table entries to replace.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorSubTable")]
        public static void CopyColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Copy pixels into a color table
        /// </summary>
        /// <param name="target">
        /// The color table target. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal storage format of the texture image. Must be one of the following symbolic constants: Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </param>
        /// <param name="y">
        /// The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </param>
        /// <param name="width">
        /// The width of the pixel rectangle.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorTable")]
        public static void CopyColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Copy pixels into a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="y">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array to copy.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter1D")]
        public static void CopyConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Copy pixels into a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="y">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array to copy.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array to copy.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter2D")]
        public static void CopyConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_copy_image|VERSION_4_3]
        /// Perform a raw data copy between two images
        /// </summary>
        /// <param name="srcName">
        /// The name of a texture or renderbuffer object from which to copy.
        /// </param>
        /// <param name="srcTarget">
        /// The target representing the namespace of the source name srcName.
        /// </param>
        /// <param name="srcLevel">
        /// The mipmap level to read from the source.
        /// </param>
        /// <param name="srcX">
        /// The X coordinate of the left edge of the souce region to copy.
        /// </param>
        /// <param name="srcY">
        /// The Y coordinate of the top edge of the souce region to copy.
        /// </param>
        /// <param name="srcZ">
        /// The Z coordinate of the near edge of the souce region to copy.
        /// </param>
        /// <param name="dstName">
        /// The name of a texture or renderbuffer object to which to copy.
        /// </param>
        /// <param name="dstTarget">
        /// The target representing the namespace of the destination name dstName.
        /// </param>
        /// <param name="dstLevel">
        /// The X coordinate of the left edge of the destination region.
        /// </param>
        /// <param name="dstX">
        /// The X coordinate of the left edge of the destination region.
        /// </param>
        /// <param name="dstY">
        /// The Y coordinate of the top edge of the destination region.
        /// </param>
        /// <param name="dstZ">
        /// The Z coordinate of the near edge of the destination region.
        /// </param>
        /// <param name="srcWidth">
        /// The width of the region to be copied.
        /// </param>
        /// <param name="srcHeight">
        /// The height of the region to be copied.
        /// </param>
        /// <param name="srcDepth">
        /// The depth of the region to be copied.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_image|VERSION_4_3", Version = "4.3", EntryPoint = "glCopyImageSubData")]
        public static void CopyImageSubData(uint srcName, OpenTK.Graphics.OpenGL4.ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, OpenTK.Graphics.OpenGL4.ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="readBuffer">
        /// </param>
        /// <param name="writeBuffer">
        /// </param>
        /// <param name="readOffset">
        /// </param>
        /// <param name="writeOffset">
        /// </param>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyNamedBufferSubData")]
        public static void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="readBuffer">
        /// </param>
        /// <param name="writeBuffer">
        /// </param>
        /// <param name="readOffset">
        /// </param>
        /// <param name="writeOffset">
        /// </param>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyNamedBufferSubData")]
        public static void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Copy pixels into a 1D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. The height of the texture image is 1.
        /// </param>
        /// <param name="border">
        /// Must be 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
        public static void CopyTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int border)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="border">
        /// Must be 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Copy a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies the texel offset within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
        public static void CopyTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
        public static void CopyTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage1D")]
        public static void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage2D")]
        public static void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage3D")]
        public static void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        public static void CreateBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        public static void CreateBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        public static unsafe void CreateBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        public static void CreateFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        public static void CreateFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        public static unsafe void CreateFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static uint CreateProgram()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        public static void CreateProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        public static void CreateProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        public static unsafe void CreateProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        public static void CreateQueries(OpenTK.Graphics.OpenGL4.QueryTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        public static void CreateQueries(OpenTK.Graphics.OpenGL4.QueryTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        public static unsafe void CreateQueries(OpenTK.Graphics.OpenGL4.QueryTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        public static void CreateRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        public static void CreateRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        public static unsafe void CreateRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="samplers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        public static void CreateSamplers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="samplers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        public static void CreateSamplers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="samplers">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        public static unsafe void CreateSamplers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Creates a shader object
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to be created. Must be one of ComputeShader, VertexShader, TessControlShader, TessEvaluationShader, GeometryShader, or FragmentShader.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static uint CreateShader(OpenTK.Graphics.OpenGL4.ShaderType type)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Create a stand-alone program from an array of null-terminated source code strings
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to create.
        /// </param>
        /// <param name="count">
        /// Specifies the number of source code strings in the array strings.
        /// </param>
        /// <param name="strings">
        /// [length: count]
        /// Specifies the address of an array of pointers to source code strings from which to create the program object.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glCreateShaderProgramv")]
        public static uint CreateShaderProgram(OpenTK.Graphics.OpenGL4.ShaderType type, int count, [CountAttribute(Parameter = "count")] String[] strings)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        public static void CreateTextures(OpenTK.Graphics.OpenGL4.TextureTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        public static void CreateTextures(OpenTK.Graphics.OpenGL4.TextureTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        public static unsafe void CreateTextures(OpenTK.Graphics.OpenGL4.TextureTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        public static void CreateTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        public static void CreateTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        public static unsafe void CreateTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        public static void CreateVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        public static void CreateVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        public static unsafe void CreateVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.OpenGL4.CullFaceMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] uint[] ids, bool enabled)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] ref uint ids, bool enabled)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">
        /// [length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageInsert")]
        public static void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Computed = "buf,length")] String buf)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="framebuffers">
        /// [length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint[] framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] ref uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static unsafe void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static void DeleteProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static void DeleteProgramPipeline([CountAttribute(Parameter = "n")] uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint[] pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] ref uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static unsafe void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint* pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static void DeleteQuery([CountAttribute(Parameter = "n")] uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static void DeleteQueries(int n, [CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static void DeleteQueries(int n, [CountAttribute(Parameter = "n")] ref uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static unsafe void DeleteQueries(int n, [CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">
        /// [length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint[] renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] ref uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static unsafe void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static void DeleteSampler([CountAttribute(Parameter = "count")] uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static void DeleteSamplers(int count, [CountAttribute(Parameter = "count")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static void DeleteSamplers(int count, [CountAttribute(Parameter = "count")] ref uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static unsafe void DeleteSamplers(int count, [CountAttribute(Parameter = "count")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static void DeleteShader(uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Delete a sync object
        /// </summary>
        /// <param name="sync">
        /// The sync object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glDeleteSync")]
        public static void DeleteSync(IntPtr sync)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static unsafe void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static void DeleteTransformFeedback([CountAttribute(Parameter = "n")] uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static void DeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static void DeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] ref uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static unsafe void DeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static void DeleteVertexArray([CountAttribute(Parameter = "n")] uint arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint[] arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] ref uint arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static unsafe void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint* arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.OpenGL4.DepthFunction func)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="near">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="far">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthRange")]
        public static void DepthRange(double near, double far)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static void DepthRangeArray(uint first, int count, [CountAttribute(Computed = "count")] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static void DepthRangeArray(uint first, int count, [CountAttribute(Computed = "count")] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static unsafe void DepthRangeArray(uint first, int count, [CountAttribute(Computed = "count")] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose depth range to update.
        /// </param>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
        public static void DepthRangeIndexed(uint index, double n, double f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangef")]
        public static void DepthRange(float n, float f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        public static void DetachShader(uint program, uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="cap">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.OpenGL4.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glDisableVertexArrayAttrib")]
        public static void DisableVertexArrayAttrib(uint vaobj, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static void DisableVertexAttribArray(uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static void Disable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups
        /// </summary>
        /// <param name="num_groups_x">
        /// The number of work groups to be launched in the X dimension.
        /// </param>
        /// <param name="num_groups_y">
        /// The number of work groups to be launched in the Y dimension.
        /// </param>
        /// <param name="num_groups_z">
        /// The number of work groups to be launched in the Z dimension.
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchCompute")]
        public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups using parameters stored in a buffer
        /// </summary>
        /// <param name="indirect">
        /// The offset into the buffer object currently bound to the DispatchIndirectBuffer buffer target at which the dispatch parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchComputeIndirect")]
        public static void DispatchComputeIndirect(IntPtr indirect)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count, int instancecount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a range of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawArraysInstancedBaseInstance")]
        public static void DrawArraysInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify which color buffers are to be drawn into
        /// </summary>
        /// <param name="buf">
        /// Specifies up to four color buffers to be drawn into. Symbolic constants None, FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and FrontAndBack are accepted. The initial value is Front for single-buffered contexts, and Back for double-buffered contexts.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static void DrawBuffer(OpenTK.Graphics.OpenGL4.DrawBufferMode buf)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">
        /// [length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static void DrawBuffers(int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL4.DrawBuffersEnum[] bufs)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">
        /// [length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static void DrawBuffers(int n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.OpenGL4.DrawBuffersEnum bufs)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">
        /// [length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static unsafe void DrawBuffers(int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL4.DrawBuffersEnum* bufs)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] int indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int basevertex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[] indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,] indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,,] indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T2 indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int instancecount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, int instancecount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, int instancecount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, int instancecount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, int instancecount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static void DrawElementsInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, int instancecount, uint baseinstance)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[] indices, int instancecount, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,] indices, int instancecount, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,,] indices, int instancecount, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] ref T3 indices, int instancecount, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int instancecount, int basevertex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, int instancecount, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, int instancecount, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, int instancecount, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, int instancecount, int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[] indices, int instancecount, int basevertex, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,] indices, int instancecount, int basevertex, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,,] indices, int instancecount, int basevertex, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] ref T3 indices, int instancecount, int basevertex, uint baseinstance)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static void DrawRangeElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static void DrawRangeElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int basevertex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices, int basevertex)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices, int basevertex)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices, int basevertex)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices, int basevertex)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        public static void DrawTransformFeedback(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the geometry to render.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackInstanced")]
        public static void DrawTransformFeedbackInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, int instancecount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        public static void DrawTransformFeedbackStream(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, uint stream)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the geometry to render.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackStreamInstanced")]
        public static void DrawTransformFeedbackStreamInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, uint stream, int instancecount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.OpenGL4.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glEnableVertexArrayAttrib")]
        public static void EnableVertexArrayAttrib(uint vaobj, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static void EnableVertexAttribArray(uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static void Enable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static void EndConditionalRender()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenTK.Graphics.OpenGL4.QueryTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glEndQueryIndexed")]
        public static void EndQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static void EndTransformFeedback()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.OpenGL4.SyncCondition condition, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static void Finish()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static void Flush()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="length">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glFlushMappedNamedBufferRange")]
        public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="length">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glFlushMappedNamedBufferRange")]
        public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, IntPtr length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Set a named parameter of a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be modified.
        /// </param>
        /// <param name="param">
        /// The new value for the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glFramebufferParameteri")]
        public static void FramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glFramebufferTexture")]
        public static void FramebufferTexture(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="textarget">
        /// </param>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static void FramebufferTexture1D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="textarget">
        /// </param>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static void FramebufferTexture2D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="textarget">
        /// </param>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static void FramebufferTexture3D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level, int zoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static void FramebufferTextureLayer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.OpenGL4.FrontFaceDirection mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static uint GenBuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static uint GenFramebuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static unsafe void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static uint GenProgramPipeline()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static unsafe void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static uint GenQuery()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static void GenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static void GenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static unsafe void GenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static uint GenRenderbuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static unsafe void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static uint GenSampler()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static void GenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] uint[] samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static void GenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] out uint samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">
        /// [length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static unsafe void GenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] uint* samplers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Generate texture names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static uint GenTexture()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static unsafe void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static uint GenTransformFeedback()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static void GenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static void GenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static unsafe void GenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static uint GenVertexArray()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">
        /// [length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static unsafe void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray or TextureCubeMap.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.OpenGL4.GenerateMipmapTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGenerateTextureMipmap")]
        public static void GenerateTextureMipmap(uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static unsafe void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static void GetActiveAttrib(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static unsafe void GetActiveAttrib(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query the subroutine name.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </param>
        /// <param name="name">
        /// [length: bufsize]
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        public static void GetActiveSubroutineName(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, int bufsize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query the subroutine name.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </param>
        /// <param name="name">
        /// [length: bufsize]
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        public static unsafe void GetActiveSubroutineName(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, int bufsize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </param>
        /// <param name="name">
        /// [length: bufsize]
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        public static void GetActiveSubroutineUniformName(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, int bufsize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </param>
        /// <param name="name">
        /// [length: bufsize]
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        public static unsafe void GetActiveSubroutineUniformName(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, int bufsize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static void GetActiveSubroutineUniform(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static void GetActiveSubroutineUniform(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static unsafe void GetActiveSubroutineUniform(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static void GetActiveUniform(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.ActiveUniformType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static unsafe void GetActiveUniform(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">
        /// [length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        public static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">
        /// [length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        public static unsafe void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static unsafe void GetActiveUniformBlock(uint program, uint uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </param>
        /// <param name="uniformIndex">
        /// Specifies the index of the active uniform whose name to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </param>
        /// <param name="uniformName">
        /// [length: bufSize]
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        public static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformName)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </param>
        /// <param name="uniformIndex">
        /// Specifies the index of the active uniform whose name to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </param>
        /// <param name="uniformName">
        /// [length: bufSize]
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        public static unsafe void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformName)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">
        /// [length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static void GetActiveUniforms(uint program, int uniformCount, [CountAttribute(Parameter = "uniformCount")] uint[] uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">
        /// [length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static void GetActiveUniforms(uint program, int uniformCount, [CountAttribute(Parameter = "uniformCount")] ref uint uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">
        /// [length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static unsafe void GetActiveUniforms(uint program, int uniformCount, [CountAttribute(Parameter = "uniformCount")] uint* uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">
        /// [length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static void GetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] out int count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint[] shaders)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">
        /// [length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static void GetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] out int count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out uint shaders)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">
        /// [length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static unsafe void GetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] int* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint* shaders)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static int GetAttribLocation(uint program, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static unsafe void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static bool GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static unsafe void GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] long[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out long @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] long* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr table)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 table)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[] img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,] img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,,] img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] ref T2 img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        public static void GetCompressedTextureImage(uint texture, int level, int bufSize, [OutAttribute] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        public static void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, [InAttribute, OutAttribute] T3[] pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        public static void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, [InAttribute, OutAttribute] T3[,] pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        public static void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, [InAttribute, OutAttribute] T3[,,] pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        public static void GetCompressedTextureImage<T3>(uint texture, int level, int bufSize, [InAttribute, OutAttribute] ref T3 pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        public static void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, [OutAttribute] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        public static void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        public static void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        public static void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        public static void GetCompressedTextureSubImage<T9>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 image)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">
        /// [length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">
        /// [length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">
        /// [length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">
        /// [length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">
        /// [length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">
        /// [length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out double data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static unsafe void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static double GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static void GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] double[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static void GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out double data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static unsafe void GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] double* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.OpenGL4.ErrorCode GetError()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out float data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static unsafe void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static float GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static unsafe void GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]
        /// Query the bindings of color indices to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">
        /// The name of the user-defined varying out variable whose index to query
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glGetFragDataIndex")]
        public static int GetFragDataIndex(uint program, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static int GetFragDataLocation(uint program, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        public static void GetFramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        public static void GetFramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        public static unsafe void GetFramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetGraphicsResetStatus")]
        public static OpenTK.Graphics.OpenGL4.ResetStatus GetGraphicsResetStatus()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] long[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out long data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static unsafe void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] long* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static long GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] long[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out long data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static unsafe void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] long* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] int[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out int data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static unsafe void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] int* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static int GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static unsafe void GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">
        /// [length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        public static void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] long[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">
        /// [length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        public static void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out long @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">
        /// [length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        public static unsafe void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] long* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">
        /// [length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        public static void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">
        /// [length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        public static void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">
        /// [length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        public static unsafe void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float[] val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out float val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static unsafe void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] long[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] out long @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] long* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        public static void GetNamedBufferPointer(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute] IntPtr @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData(uint buffer, IntPtr offset, int size, [OutAttribute] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        public static void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        public static void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        public static unsafe void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        public static void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        public static void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] out int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        public static unsafe void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="renderbuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        public static void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="renderbuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        public static void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="renderbuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        public static unsafe void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">
        /// [length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[] @params)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,] @params)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,,] @params)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T1 @params)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static void GetProgramBinary(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static unsafe void GetProgramBinary(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">
        /// [length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">
        /// [length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 binary)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static void GetProgramInfoLog(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static unsafe void GetProgramInfoLog(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static void GetProgramInterface(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static void GetProgramInterface(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static unsafe void GetProgramInterface(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static unsafe void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static void GetProgramPipeline(uint pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static void GetProgramPipeline(uint pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static unsafe void GetProgramPipeline(uint pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the index of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the resource to query the index of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceIndex")]
        public static uint GetProgramResourceIndex(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the location of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocation")]
        public static int GetProgramResourceLocation(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the fragment color index of a named variable within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocationIndex")]
        public static int GetProgramResourceLocationIndex(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static void GetProgramResourceName(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static unsafe void GetProgramResourceName(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static void GetProgramResource(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] OpenTK.Graphics.OpenGL4.ProgramProperty[] props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static void GetProgramResource(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] ref OpenTK.Graphics.OpenGL4.ProgramProperty props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static unsafe void GetProgramResource(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] OpenTK.Graphics.OpenGL4.ProgramProperty* props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.
        /// </param>
        /// <param name="values">
        /// [length: 1]
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        public static void GetProgramStage(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] out int values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.
        /// </param>
        /// <param name="values">
        /// [length: 1]
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        public static unsafe void GetProgramStage(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] int* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static void GetProgram(uint program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static void GetProgram(uint program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static unsafe void GetProgram(uint program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="id">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="offset">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetQueryBufferObjecti64v")]
        public static void GetQueryBufferObject(uint id, uint buffer, OpenTK.Graphics.OpenGL4.QueryObjectParameterName pname, IntPtr offset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static unsafe void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] long[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out long @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static unsafe void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] long* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static unsafe void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        public static unsafe void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static unsafe void GetQueryObject(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static unsafe void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static void GetRenderbufferParameter(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static void GetRenderbufferParameter(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static unsafe void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static unsafe void GetSamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static unsafe void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static unsafe void GetSamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">
        /// [length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T5 span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static void GetShaderInfoLog(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static unsafe void GetShaderInfoLog(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">
        /// [length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">
        /// [length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] int[] range, [OutAttribute, CountAttribute(Count = 1)] out int precision)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">
        /// [length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">
        /// [length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] out int range, [OutAttribute, CountAttribute(Count = 1)] out int precision)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">
        /// [length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">
        /// [length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] int* range, [OutAttribute, CountAttribute(Count = 1)] int* precision)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static void GetShaderSource(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static unsafe void GetShaderSource(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static void GetShader(uint shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static void GetShader(uint shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static unsafe void GetShader(uint shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.OpenGL4.StringName name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static String GetString(OpenTK.Graphics.OpenGL4.StringNameIndexed name, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the index of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="name">
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineIndex")]
        public static uint GetSubroutineIndex(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the location of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="name">
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineUniformLocation")]
        public static int GetSubroutineUniformLocation(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">
        /// [length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">
        /// [length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">
        /// [length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[,] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[,,] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T4 pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        public static void GetTextureImage(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        public static void GetTextureImage<T5>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[] pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        public static void GetTextureImage<T5>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,] pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        public static void GetTextureImage<T5>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,,] pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        public static void GetTextureImage<T5>(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T5 pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        public static void GetTextureLevelParameter(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        public static void GetTextureLevelParameter(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        public static unsafe void GetTextureLevelParameter(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        public static void GetTextureLevelParameter(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        public static void GetTextureLevelParameter(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        public static unsafe void GetTextureLevelParameter(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        public static unsafe void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIuiv")]
        public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIuiv")]
        public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIuiv")]
        public static unsafe void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        public static unsafe void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        public static unsafe void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        public static void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        public static void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T11[] pixels)
            where T11 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        public static void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T11[,] pixels)
            where T11 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        public static void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T11[,,] pixels)
            where T11 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        public static void GetTextureSubImage<T11>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T11 pixels)
            where T11 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL4.TransformFeedbackType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        public static void GetTransformFeedbacki64_(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] long[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        public static void GetTransformFeedbacki64_(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] out long param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        public static unsafe void GetTransformFeedbacki64_(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] long* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        public static void GetTransformFeedback(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        public static void GetTransformFeedback(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] out int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        public static unsafe void GetTransformFeedback(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        public static void GetTransformFeedback(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackParameter pname, [OutAttribute] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        public static void GetTransformFeedback(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackParameter pname, [OutAttribute] out int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        public static unsafe void GetTransformFeedback(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackParameter pname, [OutAttribute] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName">
        /// [length: COMPSIZE()]
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformBlockIndex")]
        public static uint GetUniformBlockIndex(uint program, [CountAttribute(Computed = "")] String uniformBlockName)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">
        /// [length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">
        /// [length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static void GetUniformIndices(uint program, int uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] uint[] uniformIndices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">
        /// [length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">
        /// [length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static void GetUniformIndices(uint program, int uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] out uint uniformIndices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">
        /// [length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">
        /// [length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static unsafe void GetUniformIndices(uint program, int uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] uint* uniformIndices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static int GetUniformLocation(uint program, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the subroutine uniform.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        public static void GetUniformSubroutine(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int location, [OutAttribute, CountAttribute(Count = 1)] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the subroutine uniform.
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        public static unsafe void GetUniformSubroutine(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int location, [OutAttribute, CountAttribute(Count = 1)] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] double[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out double @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] double* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        public static void GetVertexArrayIndexed64(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexed64Parameter pname, [OutAttribute] long[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        public static void GetVertexArrayIndexed64(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexed64Parameter pname, [OutAttribute] out long param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        public static unsafe void GetVertexArrayIndexed64(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexed64Parameter pname, [OutAttribute] long* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        public static void GetVertexArrayIndexed(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexedParameter pname, [OutAttribute] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        public static void GetVertexArrayIndexed(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexedParameter pname, [OutAttribute] out int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        public static unsafe void GetVertexArrayIndexed(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexedParameter pname, [OutAttribute] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        public static void GetVertexArray(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayParameter pname, [OutAttribute] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        public static void GetVertexArray(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayParameter pname, [OutAttribute] out int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        public static unsafe void GetVertexArray(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayParameter pname, [OutAttribute] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static unsafe void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static unsafe void GetVertexAttribI(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out double @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static unsafe void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer(uint index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] double[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out double @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] double* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="table">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr table)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="table">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T4[] table)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="table">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T4[,] table)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="table">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T4[,,] table)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="table">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T4 table)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="lod">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [OutAttribute] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="lod">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute] T3[] pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="lod">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute] T3[,] pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="lod">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute] T3[,,] pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="lod">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [InAttribute, OutAttribute] ref T3 pixels)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="image">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr image)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="image">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T4[] image)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="image">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T4[,] image)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="image">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T4[,,] image)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="image">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T4 image)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[] values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,] values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,,] values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T5 values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapdv")]
        public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapdv")]
        public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] out double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapdv")]
        public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapfv")]
        public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapfv")]
        public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] out float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapfv")]
        public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapiv")]
        public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapiv")]
        public static void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] out int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="query">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="v">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapiv")]
        public static unsafe void GetnMap(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[] values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,] values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,,] values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="reset">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T5 values)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapfv")]
        public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] float[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapfv")]
        public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] out float values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapfv")]
        public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] float* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] uint[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] out uint values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] uint* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] ushort[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        public static void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] out ushort values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="values">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        public static unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] ushort* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        public static Byte GetnPolygonStipple()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pattern">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        public static void GetnPolygonStipple(int bufSize, [OutAttribute] Byte[] pattern)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pattern">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        public static void GetnPolygonStipple(int bufSize, [OutAttribute] out Byte pattern)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pattern">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        public static unsafe void GetnPolygonStipple(int bufSize, [OutAttribute] Byte* pattern)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="rowBufSize">
        /// </param>
        /// <param name="row">
        /// </param>
        /// <param name="columnBufSize">
        /// </param>
        /// <param name="column">
        /// </param>
        /// <param name="span">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [OutAttribute] IntPtr row, int columnBufSize, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="rowBufSize">
        /// </param>
        /// <param name="row">
        /// </param>
        /// <param name="columnBufSize">
        /// </param>
        /// <param name="column">
        /// </param>
        /// <param name="span">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute] T4[] row, int columnBufSize, [InAttribute, OutAttribute] T6[] column, [InAttribute, OutAttribute] T7[] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="rowBufSize">
        /// </param>
        /// <param name="row">
        /// </param>
        /// <param name="columnBufSize">
        /// </param>
        /// <param name="column">
        /// </param>
        /// <param name="span">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute] T4[,] row, int columnBufSize, [InAttribute, OutAttribute] T6[,] column, [InAttribute, OutAttribute] T7[,] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="rowBufSize">
        /// </param>
        /// <param name="row">
        /// </param>
        /// <param name="columnBufSize">
        /// </param>
        /// <param name="column">
        /// </param>
        /// <param name="span">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute] T4[,,] row, int columnBufSize, [InAttribute, OutAttribute] T6[,,] column, [InAttribute, OutAttribute] T7[,,] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="rowBufSize">
        /// </param>
        /// <param name="row">
        /// </param>
        /// <param name="columnBufSize">
        /// </param>
        /// <param name="column">
        /// </param>
        /// <param name="span">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [InAttribute, OutAttribute] ref T4 row, int columnBufSize, [InAttribute, OutAttribute] ref T6 column, [InAttribute, OutAttribute] ref T7 span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[] pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,] pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T5[,,] pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T5 pixels)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] double[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out double @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] double* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformuiv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformuiv")]
        public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformuiv")]
        public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. LineSmoothHint, PolygonSmoothHint, TextureCompressionHint, and FragmentShaderDerivativeHint are accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.OpenGL4.HintTarget target, OpenTK.Graphics.OpenGL4.HintMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define histogram table
        /// </summary>
        /// <param name="target">
        /// The histogram whose parameters are to be set. Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="width">
        /// The number of entries in the histogram table.  Must be a power of 2.
        /// </param>
        /// <param name="internalformat">
        /// The format of entries in the histogram table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="sink">
        /// If True, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If False, pixels will proceed to the minmax process after histogramming.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glHistogram")]
        public static void Histogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, int width, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object whose data store to invalidate.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferData")]
        public static void InvalidateBufferData(uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </param>
        /// <param name="offset">
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </param>
        /// <param name="length">
        /// The length of the range within the buffer's data store to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        public static void InvalidateBufferSubData(uint buffer, IntPtr offset, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </param>
        /// <param name="offset">
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </param>
        /// <param name="length">
        /// The length of the range within the buffer's data store to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        public static void InvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">
        /// [length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        public static void InvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.OpenGL4.FramebufferAttachment[] attachments)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">
        /// [length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        public static void InvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.OpenGL4.FramebufferAttachment attachments)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">
        /// [length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        public static unsafe void InvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="numAttachments">
        /// </param>
        /// <param name="attachments">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        public static void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment[] attachments)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="numAttachments">
        /// </param>
        /// <param name="attachments">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        public static void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, ref OpenTK.Graphics.OpenGL4.FramebufferAttachment attachments)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="numAttachments">
        /// </param>
        /// <param name="attachments">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        public static unsafe void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="numAttachments">
        /// </param>
        /// <param name="attachments">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        public static void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="numAttachments">
        /// </param>
        /// <param name="attachments">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        public static void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, ref OpenTK.Graphics.OpenGL4.FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="numAttachments">
        /// </param>
        /// <param name="attachments">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        public static unsafe void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">
        /// [length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        /// <param name="x">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="y">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.OpenGL4.FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">
        /// [length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        /// <param name="x">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="y">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenTK.Graphics.OpenGL4.FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">
        /// [length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        /// <param name="x">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="y">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        public static unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the entirety a texture image
        /// </summary>
        /// <param name="texture">
        /// The name of a texture object to invalidate.
        /// </param>
        /// <param name="level">
        /// The level of detail of the texture object to invalidate.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexImage")]
        public static void InvalidateTexImage(uint texture, int level)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a texture image
        /// </summary>
        /// <param name="texture">
        /// The name of a texture object a subregion of which to invalidate.
        /// </param>
        /// <param name="level">
        /// The level of detail of the texture object within which the region resides.
        /// </param>
        /// <param name="xoffset">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="yoffset">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="zoffset">
        /// The Z offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexSubImage")]
        public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static bool IsBuffer(uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.OpenGL4.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static bool IsEnabled(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static bool IsFramebuffer(uint framebuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        public static bool IsProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Determine if a name corresponds to a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies a value that may be the name of a program pipeline object.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
        public static bool IsProgramPipeline(uint pipeline)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        public static bool IsQuery(uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static bool IsRenderbuffer(uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="sampler">
        /// Specifies a value that may be the name of a sampler object.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glIsSampler")]
        public static bool IsSampler(uint sampler)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        public static bool IsShader(uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Determine if a name corresponds to a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies a value that may be the name of a sync object.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glIsSync")]
        public static bool IsSync(IntPtr sync)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        public static bool IsTexture(uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a transform feedback object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glIsTransformFeedback")]
        public static bool IsTransformFeedback(uint id)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies a value that may be the name of a vertex array object.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static bool IsVertexArray(uint array)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(float width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static void LinkProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode">
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static void LogicOp(OpenTK.Graphics.OpenGL4.LogicOp opcode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// Map a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="access">
        /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static IntPtr MapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferAccess access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset">
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length">
        /// Specifies a length of the range to be mapped.
        /// </param>
        /// <param name="access">
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, int length, OpenTK.Graphics.OpenGL4.BufferAccessMask access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset">
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length">
        /// Specifies a length of the range to be mapped.
        /// </param>
        /// <param name="access">
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="access">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBuffer")]
        public static IntPtr MapNamedBuffer(uint buffer, OpenTK.Graphics.OpenGL4.BufferAccess access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="length">
        /// </param>
        /// <param name="access">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBufferRange")]
        public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, int length, OpenTK.Graphics.OpenGL4.BufferAccessMask access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="length">
        /// </param>
        /// <param name="access">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBufferRange")]
        public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]
        /// Defines a barrier ordering memory transactions
        /// </summary>
        /// <param name="barriers">
        /// Specifies the barriers to insert. Must be a bitwise combination of VertexAttribArrayBarrierBit, ElementArrayBarrierBit, UniformBarrierBit, TextureFetchBarrierBit, ShaderImageAccessBarrierBit, CommandBarrierBit, PixelBufferBarrierBit, TextureUpdateBarrierBit, BufferUpdateBarrierBit, FramebufferBarrierBit, TransformFeedbackBarrierBit, AtomicCounterBarrierBit, or ShaderStorageBarrierBit. If the special value AllBarrierBits is specified, all supported barriers will be inserted.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glMemoryBarrier")]
        public static void MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags barriers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_ES3_1_compatibility|VERSION_4_5]
        /// </summary>
        /// <param name="barriers">
        /// </param>
        [AutoGenerated(Category = "ARB_ES3_1_compatibility|VERSION_4_5", Version = "4.5", EntryPoint = "glMemoryBarrierByRegion")]
        public static void MemoryBarrierByRegion(OpenTK.Graphics.OpenGL4.MemoryBarrierRegionFlags barriers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0]
        /// Specifies minimum rate at which sample shaing takes place
        /// </summary>
        /// <param name="value">
        /// Specifies the rate at which samples are shaded within each covered pixel.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glMinSampleShading")]
        public static void MinSampleShading(float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define minmax table
        /// </summary>
        /// <param name="target">
        /// The minmax table whose parameters are to be set. Must be Minmax.
        /// </param>
        /// <param name="internalformat">
        /// The format of entries in the minmax table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="sink">
        /// If True, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If False, pixels will proceed to the final conversion process after minmax.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glMinmax")]
        public static void Minmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] int[] first, [CountAttribute(Computed = "drawcount")] int[] count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] ref int first, [CountAttribute(Computed = "drawcount")] ref int count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] int* first, [CountAttribute(Computed = "drawcount")] int* count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, int drawcount, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T1[] indirect, int drawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T1[,] indirect, int drawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T1[,,] indirect, int drawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] ref T1 indirect, int drawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount, [CountAttribute(Computed = "drawcount")] int[] basevertex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount, [CountAttribute(Computed = "drawcount")] int[] basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount, [CountAttribute(Computed = "drawcount")] int[] basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount, [CountAttribute(Computed = "drawcount")] int[] basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount, [CountAttribute(Computed = "drawcount")] int[] basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount, [CountAttribute(Computed = "drawcount")] ref int basevertex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount, [CountAttribute(Computed = "drawcount")] ref int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount, [CountAttribute(Computed = "drawcount")] ref int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount, [CountAttribute(Computed = "drawcount")] ref int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount, [CountAttribute(Computed = "drawcount")] ref int basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static unsafe void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount, [CountAttribute(Computed = "drawcount")] int* basevertex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount, [CountAttribute(Computed = "drawcount")] int* basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount, [CountAttribute(Computed = "drawcount")] int* basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount, [CountAttribute(Computed = "drawcount")] int* basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount, [CountAttribute(Computed = "drawcount")] int* basevertex)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, int drawcount, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T2[] indirect, int drawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T2[,] indirect, int drawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T2[,,] indirect, int drawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// [length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] ref T2 indirect, int drawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.Version46 type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.Version46 type, [InAttribute, OutAttribute] T2[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.Version46 type, [InAttribute, OutAttribute] T2[,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.Version46 type, [InAttribute, OutAttribute] T2[,,] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="mode">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="indirect">
        /// </param>
        /// <param name="drawcount">
        /// </param>
        /// <param name="maxdrawcount">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.Version46 type, [InAttribute, OutAttribute] ref T2 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1ui")]
        public static void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1uiv")]
        public static void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1uiv")]
        public static unsafe void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2ui")]
        public static void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2uiv")]
        public static void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2uiv")]
        public static unsafe void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3ui")]
        public static void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3uiv")]
        public static void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3uiv")]
        public static unsafe void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4ui")]
        public static void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4uiv")]
        public static void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4uiv")]
        public static unsafe void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData(uint buffer, int size, IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData(uint buffer, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// </param>
        /// <param name="usage">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// </param>
        /// <param name="flags">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData(uint buffer, IntPtr offset, int size, [CountAttribute(Computed = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(size)]
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="buf">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffer")]
        public static void NamedFramebufferDrawBuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.DrawBufferMode buf)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="bufs">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        public static void NamedFramebufferDrawBuffers(uint framebuffer, int n, OpenTK.Graphics.OpenGL4.DrawBuffersEnum[] bufs)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="bufs">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        public static void NamedFramebufferDrawBuffers(uint framebuffer, int n, ref OpenTK.Graphics.OpenGL4.DrawBuffersEnum bufs)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="bufs">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        public static unsafe void NamedFramebufferDrawBuffers(uint framebuffer, int n, OpenTK.Graphics.OpenGL4.DrawBuffersEnum* bufs)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferParameteri")]
        public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="src">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferReadBuffer")]
        public static void NamedFramebufferReadBuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ReadBufferMode src)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="renderbuffertarget">
        /// </param>
        /// <param name="renderbuffer">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferRenderbuffer")]
        public static void NamedFramebufferRenderbuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferTexture")]
        public static void NamedFramebufferTexture(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="framebuffer">
        /// </param>
        /// <param name="attachment">
        /// </param>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="layer">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferTextureLayer")]
        public static void NamedFramebufferTextureLayer(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="renderbuffer">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedRenderbufferStorage")]
        public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="renderbuffer">
        /// </param>
        /// <param name="samples">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedRenderbufferStorageMultisample")]
        public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3ui")]
        public static void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3uiv")]
        public static void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3uiv")]
        public static unsafe void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectLabel")]
        public static void ObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int length, [CountAttribute(Computed = "label,length")] String label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, int length, [CountAttribute(Computed = "label,length")] String label)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">
        /// [length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        public static void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] float[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        public static void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] ref float values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        public static unsafe void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] float* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="value">
        /// Specifies the new value for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameteri")]
        public static void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterInt pname, int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Pause transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glPauseTransformFeedback")]
        public static void PauseTransformFeedback()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static void PixelStore(OpenTK.Graphics.OpenGL4.PixelStoreParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.OpenGL4.PixelStoreParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static unsafe void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static unsafe void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size">
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static void PointSize(float size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Select a polygon rasterization mode
        /// </summary>
        /// <param name="face">
        /// Specifies the polygons that mode applies to. Must be FrontAndBack for front- and back-facing polygons.
        /// </param>
        /// <param name="mode">
        /// Specifies how polygons will be rasterized. Accepted values are Point, Line, and Fill. The initial value is Fill for both front- and back-facing polygons.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static void PolygonMode(OpenTK.Graphics.OpenGL4.MaterialFace face, OpenTK.Graphics.OpenGL4.PolygonMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units">
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(float factor, float units)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6 or ARB_polygon_offset_clamp|VERSION_4_6]
        /// </summary>
        /// <param name="factor">
        /// </param>
        /// <param name="units">
        /// </param>
        /// <param name="clamp">
        /// </param>
        [AutoGenerated(Category = "ARB_polygon_offset_clamp|VERSION_4_6", Version = "4.6", EntryPoint = "glPolygonOffsetClamp")]
        public static void PolygonOffsetClamp(float factor, float units, float clamp)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Specify the primitive restart index
        /// </summary>
        /// <param name="index">
        /// Specifies the value to be interpreted as the primitive restart index.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        public static void PrimitiveRestartIndex(uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static void ProgramBinary(uint program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static void ProgramBinary<T2>(uint program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[] binary, int length)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static void ProgramBinary<T2>(uint program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[,] binary, int length)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static void ProgramBinary<T2>(uint program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[,,] binary, int length)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static void ProgramBinary<T2>(uint program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T2 binary, int length)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        public static void ProgramParameter(uint program, OpenTK.Graphics.OpenGL4.ProgramParameterName pname, int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1d")]
        public static void ProgramUniform1(uint program, int location, double v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1f")]
        public static void ProgramUniform1(uint program, int location, float v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1i")]
        public static void ProgramUniform1(uint program, int location, int v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1ui")]
        public static void ProgramUniform1(uint program, int location, uint v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2d")]
        public static void ProgramUniform2(uint program, int location, double v0, double v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2f")]
        public static void ProgramUniform2(uint program, int location, float v0, float v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2i")]
        public static void ProgramUniform2(uint program, int location, int v0, int v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2ui")]
        public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3d")]
        public static void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3f")]
        public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3i")]
        public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3ui")]
        public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4d")]
        public static void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4f")]
        public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4i")]
        public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4ui")]
        public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_provoking_vertex|VERSION_3_2]
        /// Specifiy the vertex to be used as the source of data for flat shaded varyings
        /// </summary>
        /// <param name="mode">
        /// Specifies the vertex to be used as the source of data for flat shaded varyings.
        /// </param>
        [AutoGenerated(Category = "ARB_provoking_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glProvokingVertex")]
        public static void ProvokingVertex(OpenTK.Graphics.OpenGL4.ProvokingVertexMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">
        /// [length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPushDebugGroup")]
        public static void PushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, uint id, int length, [CountAttribute(Computed = "message,length")] String message)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
        /// </summary>
        /// <param name="id">
        /// Specify the name of a query object into which to record the GL time.
        /// </param>
        /// <param name="target">
        /// Specify the counter to query. target must be Timestamp.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glQueryCounter")]
        public static void QueryCounter(uint id, OpenTK.Graphics.OpenGL4.QueryCounterTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="src">
        /// Specifies a color buffer. Accepted values are FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and the constants ColorAttachmenti.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenTK.Graphics.OpenGL4.ReadBufferMode src)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or KHR_robustness|VERSION_4_5]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="bufSize">
        /// </param>
        /// <param name="data">
        /// </param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Release resources consumed by the implementation's shader compiler
        /// </summary>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glReleaseShaderCompiler")]
        public static void ReleaseShaderCompiler()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="samples">
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static void RenderbufferStorageMultisample(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, int samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Reset histogram table entries to zero
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetHistogram")]
        public static void ResetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Reset minmax table entries to initial values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetMinmax")]
        public static void ResetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Resume transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glResumeTransformFeedback")]
        public static void ResumeTransformFeedback()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(float value, bool invert)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Set the value of a sub-word of the sample mask
        /// </summary>
        /// <param name="maskNumber">
        /// Specifies which 32-bit sub-word of the sample mask to update.
        /// </param>
        /// <param name="mask">
        /// Specifies the new value of the mask sub-word.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glSampleMaski")]
        public static void SampleMask(uint maskNumber, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static unsafe void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] uint[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref uint param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// </summary>
        /// <param name="sampler">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static unsafe void SamplerParameterI(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] uint* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] float[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static unsafe void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] float* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static unsafe void SamplerParameter(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static void Scissor(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static unsafe void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="left">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="width">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        /// <param name="height">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexed")]
        public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static void ScissorIndexed(uint index, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static void ScissorIndexed(uint index, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static unsafe void ScissorIndexed(uint index, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3ui")]
        public static void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3uiv")]
        public static void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="color">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3uiv")]
        public static unsafe void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* color)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">
        /// [length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">
        /// [length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] ref T6 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] ref T7 column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">
        /// [length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">
        /// [length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static void ShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] int[] length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">
        /// [length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">
        /// [length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static void ShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] ref int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">
        /// [length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">
        /// [length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static unsafe void ShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] int* length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_shader_storage_buffer_object|VERSION_4_3]
        /// Change an active shader storage block binding
        /// </summary>
        /// <param name="program">
        /// The name of the program containing the block whose binding to change.
        /// </param>
        /// <param name="storageBlockIndex">
        /// The index storage block within the program.
        /// </param>
        /// <param name="storageBlockBinding">
        /// The index storage block binding to associate with the specified storage block.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_storage_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glShaderStorageBlockBinding")]
        public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="shader">
        /// </param>
        /// <param name="pEntryPoint">
        /// </param>
        /// <param name="numSpecializationConstants">
        /// </param>
        /// <param name="pConstantIndex">
        /// </param>
        /// <param name="pConstantValue">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        public static void SpecializeShader(uint shader, String pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="shader">
        /// </param>
        /// <param name="pEntryPoint">
        /// </param>
        /// <param name="numSpecializationConstants">
        /// </param>
        /// <param name="pConstantIndex">
        /// </param>
        /// <param name="pConstantValue">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        public static void SpecializeShader(uint shader, String pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.6]
        /// </summary>
        /// <param name="shader">
        /// </param>
        /// <param name="pEntryPoint">
        /// </param>
        /// <param name="numSpecializationConstants">
        /// </param>
        /// <param name="pConstantIndex">
        /// </param>
        /// <param name="pConstantValue">
        /// </param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        public static unsafe void SpecializeShader(uint shader, String pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.OpenGL4.StencilFunction func, int @ref, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static void StencilFuncSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilFunction func, int @ref, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static void StencilMask(uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static void StencilMaskSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.OpenGL4.StencilOp fail, OpenTK.Graphics.OpenGL4.StencilOp zfail, OpenTK.Graphics.OpenGL4.StencilOp zpass)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilOp sfail, OpenTK.Graphics.OpenGL4.StencilOp dpfail, OpenTK.Graphics.OpenGL4.StencilOp dppass)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1]
        /// Attach the storage for a buffer object to the active buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static void TexBuffer(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </param>
        /// <param name="size">
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        public static void TexBufferRange(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </param>
        /// <param name="size">
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        public static void TexBufferRange(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1ui")]
        public static void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1uiv")]
        public static void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1uiv")]
        public static unsafe void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2ui")]
        public static void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2uiv")]
        public static void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2uiv")]
        public static unsafe void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3ui")]
        public static void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3uiv")]
        public static void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3uiv")]
        public static unsafe void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4ui")]
        public static void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4uiv")]
        public static void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="coords">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4uiv")]
        public static unsafe void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.
        /// </param>
        /// <param name="samples">
        /// The number of samples in the multisample texture's image.
        /// </param>
        /// <param name="internalformat">
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </param>
        /// <param name="width">
        /// The width of the multisample texture's image, in texels.
        /// </param>
        /// <param name="height">
        /// The height of the multisample texture's image, in texels.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage2DMultisample")]
        public static void TexImage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T9[] pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T9[,] pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T9[,,] pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T9 pixels)
            where T9 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleArray.
        /// </param>
        /// <param name="samples">
        /// The number of samples in the multisample texture's image.
        /// </param>
        /// <param name="internalformat">
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </param>
        /// <param name="width">
        /// The width of the multisample texture's image, in texels.
        /// </param>
        /// <param name="height">
        /// The height of the multisample texture's image, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage3DMultisample")]
        public static void TexImage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static unsafe void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static unsafe void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static unsafe void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static unsafe void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a one-dimensional texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage1D")]
        public static void TexStorage1D(OpenTK.Graphics.OpenGL4.TextureTarget1d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenTK.Graphics.OpenGL4.TextureTarget2d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_texture_storage_multisample|VERSION_4_3]
        /// Specify storage for a two-dimensional multisample texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.
        /// </param>
        /// <param name="samples">
        /// Specify the number of samples in the texture.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage_multisample|VERSION_4_3", Version = "4.3", EntryPoint = "glTexStorage2DMultisample")]
        public static void TexStorage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample2d target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenTK.Graphics.OpenGL4.TextureTarget3d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_texture_storage_multisample|VERSION_4_3]
        /// Specify storage for a two-dimensional multisample array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.
        /// </param>
        /// <param name="samples">
        /// Specify the number of samples in the texture.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in layers.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage_multisample|VERSION_4_3", Version = "4.3", EntryPoint = "glTexStorage3DMultisample")]
        public static void TexStorage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample3d target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T6[] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T6[,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T6[,,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T6 pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[] pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,] pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,,] pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T10 pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_texture_barrier|VERSION_4_5]
        /// </summary>
        [AutoGenerated(Category = "ARB_texture_barrier|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBarrier")]
        public static void TextureBarrier()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="buffer">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBuffer")]
        public static void TextureBuffer(uint texture, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBufferRange")]
        public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBufferRange")]
        public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        public static unsafe void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIuiv")]
        public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, uint[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIuiv")]
        public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, ref uint @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIuiv")]
        public static unsafe void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, uint* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterf")]
        public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, ref float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        public static unsafe void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteri")]
        public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        public static unsafe void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="levels">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage1D")]
        public static void TextureStorage1D(uint texture, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="levels">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage2D")]
        public static void TextureStorage2D(uint texture, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="samples">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="fixedsamplelocations">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage2DMultisample")]
        public static void TextureStorage2DMultisample(uint texture, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="levels">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage3D")]
        public static void TextureStorage3D(uint texture, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="samples">
        /// </param>
        /// <param name="internalformat">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="fixedsamplelocations">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage3DMultisample")]
        public static void TextureStorage3DMultisample(uint texture, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        public static void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        public static void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        public static void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        public static void TextureSubImage1D<T6>(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        public static void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        public static void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        public static void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        public static void TextureSubImage2D<T8>(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        public static void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        public static void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        public static void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="xoffset">
        /// </param>
        /// <param name="yoffset">
        /// </param>
        /// <param name="zoffset">
        /// </param>
        /// <param name="width">
        /// </param>
        /// <param name="height">
        /// </param>
        /// <param name="depth">
        /// </param>
        /// <param name="format">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="pixels">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        public static void TextureSubImage3D<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_texture_view|VERSION_4_3]
        /// Initialize a texture as a data alias of another texture's data store
        /// </summary>
        /// <param name="texture">
        /// Specifies the texture object to be initialized as a view.
        /// </param>
        /// <param name="target">
        /// Specifies the target to be used for the newly initialized texture.
        /// </param>
        /// <param name="origtexture">
        /// Specifies the name of a texture object of which to make a view.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format for the newly created view.
        /// </param>
        /// <param name="minlevel">
        /// Specifies lowest level of detail of the view.
        /// </param>
        /// <param name="numlevels">
        /// Specifies the number of levels of detail to include in the view.
        /// </param>
        /// <param name="minlayer">
        /// Specifies the index of the first layer to include in the view.
        /// </param>
        /// <param name="numlayers">
        /// Specifies the number of layers to include in the view.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_view|VERSION_4_3", Version = "4.3", EntryPoint = "glTextureView")]
        public static void TextureView(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, uint origtexture, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="buffer">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferBase")]
        public static void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferRange")]
        public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, IntPtr offset, int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="xfb">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferRange")]
        public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, IntPtr offset, IntPtr size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">
        /// [length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static void TransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] String[] varyings, OpenTK.Graphics.OpenGL4.TransformFeedbackMode bufferMode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1d")]
        public static void Uniform1(int location, double x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static void Uniform1(int location, float v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static void Uniform1(int location, int v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        public static void Uniform1(int location, uint v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="y">
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2d")]
        public static void Uniform2(int location, double x, double y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static void Uniform2(int location, float v0, float v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static void Uniform2(int location, int v0, int v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        public static void Uniform2(int location, uint v0, uint v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="y">
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3d")]
        public static void Uniform3(int location, double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static void Uniform3(int location, float v0, float v1, float v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static void Uniform3(int location, int v0, int v1, int v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        public static void Uniform3(int location, uint v0, uint v1, uint v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="y">
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4d")]
        public static void Uniform4(int location, double x, double y, double z, double w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static void Uniform4(int location, float v0, float v1, float v2, float v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static void Uniform4(int location, int v0, int v1, int v2, int v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// The index of the active uniform block within program whose binding to assign.
        /// </param>
        /// <param name="uniformBlockBinding">
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glUniformBlockBinding")]
        public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        public static unsafe void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static unsafe void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        public static void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        public static void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        public static void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        public static void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        public static unsafe void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static unsafe void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        public static void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        public static void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        public static void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        public static void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        public static unsafe void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static unsafe void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        public static void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        public static void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        public static void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        public static void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.1]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int count, [CountAttribute(Parameter = "count")] uint[] indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int count, [CountAttribute(Parameter = "count")] ref uint indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">
        /// [length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static unsafe void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int count, [CountAttribute(Parameter = "count")] uint* indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.5]
        /// </summary>
        /// <param name="target">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="buffer">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glUnmapNamedBuffer")]
        public static bool UnmapNamedBuffer(uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        public static void UseProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Bind stages of a program object to a program pipeline
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to which to bind stages from program.
        /// </param>
        /// <param name="stages">
        /// Specifies a set of program stages to bind to the program pipeline object.
        /// </param>
        /// <param name="program">
        /// Specifies the program object containing the shader executables to use in pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glUseProgramStages")]
        public static void UseProgramStages(uint pipeline, OpenTK.Graphics.OpenGL4.ProgramStageMask stages, uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static void ValidateProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Validate a program pipeline object against current GL state
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object to validate.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
        public static void ValidateProgramPipeline(uint pipeline)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="attribindex">
        /// </param>
        /// <param name="bindingindex">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribBinding")]
        public static void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribFormat")]
        public static void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribIFormat")]
        public static void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribLFormat")]
        public static void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="bindingindex">
        /// </param>
        /// <param name="divisor">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayBindingDivisor")]
        public static void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="buffer">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayElementBuffer")]
        public static void VertexArrayElementBuffer(uint vaobj, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="bindingindex">
        /// </param>
        /// <param name="buffer">
        /// </param>
        /// <param name="offset">
        /// </param>
        /// <param name="stride">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffer")]
        public static void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="first">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="buffers">
        /// </param>
        /// <param name="offsets">
        /// </param>
        /// <param name="strides">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, IntPtr[] offsets, int[] strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="first">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="buffers">
        /// </param>
        /// <param name="offsets">
        /// </param>
        /// <param name="strides">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, ref IntPtr offsets, ref int strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.5 or ARB_direct_state_access|VERSION_4_5]
        /// </summary>
        /// <param name="vaobj">
        /// </param>
        /// <param name="first">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="buffers">
        /// </param>
        /// <param name="offsets">
        /// </param>
        /// <param name="strides">
        /// </param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        public static unsafe void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, IntPtr* offsets, int* strides)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static void VertexAttrib1(uint index, double x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static void VertexAttrib1(uint index, float x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static void VertexAttrib1(uint index, short x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static void VertexAttrib2(uint index, double x, double y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static void VertexAttrib2(uint index, float x, float y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static void VertexAttrib2(uint index, short x, short y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static void VertexAttrib3(uint index, double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static void VertexAttrib3(uint index, float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static void VertexAttrib3(uint index, short x, short y, short z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] SByte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        /// <param name="w">
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static void VertexAttrib4N(uint index, Byte x, Byte y, Byte z, Byte w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] Byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref Byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] Byte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ushort* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] SByte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static void VertexAttrib4(uint index, double x, double y, double z, double w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static void VertexAttrib4(uint index, float x, float y, float z, float w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static void VertexAttrib4(uint index, short x, short y, short z, short w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] Byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref Byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] Byte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ushort* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </param>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribBinding")]
        public static void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// Specify the index of the generic vertex attribute.
        /// </param>
        /// <param name="divisor">
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribDivisor")]
        public static void VertexAttribDivisor(uint index, uint divisor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// The generic vertex attribute array being described.
        /// </param>
        /// <param name="size">
        /// The number of values per vertex that are stored in the array.
        /// </param>
        /// <param name="type">
        /// The type of the data stored in the array.
        /// </param>
        /// <param name="normalized">
        /// The distance between elements within the buffer.
        /// </param>
        /// <param name="relativeoffset">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribFormat")]
        public static void VertexAttribFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static void VertexAttribI1(uint index, int x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static void VertexAttribI1(uint index, [CountAttribute(Count = 1)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static unsafe void VertexAttribI1(uint index, [CountAttribute(Count = 1)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        public static void VertexAttribI1(uint index, uint x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static void VertexAttribI1(uint index, [CountAttribute(Count = 1)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static unsafe void VertexAttribI1(uint index, [CountAttribute(Count = 1)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static void VertexAttribI2(uint index, int x, int y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static unsafe void VertexAttribI2(uint index, [CountAttribute(Count = 2)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        public static void VertexAttribI2(uint index, uint x, uint y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static void VertexAttribI2(uint index, [CountAttribute(Count = 2)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static unsafe void VertexAttribI2(uint index, [CountAttribute(Count = 2)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static void VertexAttribI3(uint index, int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static unsafe void VertexAttribI3(uint index, [CountAttribute(Count = 3)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        public static void VertexAttribI3(uint index, uint x, uint y, uint z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static void VertexAttribI3(uint index, [CountAttribute(Count = 3)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static unsafe void VertexAttribI3(uint index, [CountAttribute(Count = 3)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] SByte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        /// <param name="w">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static void VertexAttribI4(uint index, int x, int y, int z, int w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] Byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref Byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] Byte* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        /// <param name="w">
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] uint* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static unsafe void VertexAttribI4(uint index, [CountAttribute(Count = 4)] ushort* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// </summary>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribIFormat")]
        public static void VertexAttribIFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.0]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static void VertexAttribIPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
        public static void VertexAttribL1(uint index, double x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
        public static void VertexAttribL1(uint index, [CountAttribute(Count = 1)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
        public static unsafe void VertexAttribL1(uint index, [CountAttribute(Count = 1)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
        public static void VertexAttribL2(uint index, double x, double y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static void VertexAttribL2(uint index, [CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static void VertexAttribL2(uint index, [CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static unsafe void VertexAttribL2(uint index, [CountAttribute(Count = 2)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
        public static void VertexAttribL3(uint index, double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static void VertexAttribL3(uint index, [CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static void VertexAttribL3(uint index, [CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static unsafe void VertexAttribL3(uint index, [CountAttribute(Count = 3)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        /// <param name="w">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
        public static void VertexAttribL4(uint index, double x, double y, double z, double w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static void VertexAttribL4(uint index, [CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static void VertexAttribL4(uint index, [CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static unsafe void VertexAttribL4(uint index, [CountAttribute(Count = 4)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// </summary>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribLFormat")]
        public static void VertexAttribLFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static void VertexAttribLPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, int stride, [CountAttribute(Parameter = "size")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static void VertexAttribLPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, int stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static void VertexAttribLPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, int stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static void VertexAttribLPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, int stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,,] pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static void VertexAttribLPointer<T4>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, int stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T4 pointer)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1ui")]
        public static void VertexAttribP1(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1uiv")]
        public static void VertexAttribP1(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1uiv")]
        public static unsafe void VertexAttribP1(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2ui")]
        public static void VertexAttribP2(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2uiv")]
        public static void VertexAttribP2(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2uiv")]
        public static unsafe void VertexAttribP2(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3ui")]
        public static void VertexAttribP3(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3uiv")]
        public static void VertexAttribP3(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3uiv")]
        public static unsafe void VertexAttribP3(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4ui")]
        public static void VertexAttribP4(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4uiv")]
        public static void VertexAttribP4(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="index">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="normalized">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4uiv")]
        public static unsafe void VertexAttribP4(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[] pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,] pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,,] pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T5 pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the binding whose divisor to modify.
        /// </param>
        /// <param name="divisor">
        /// The new value for the instance step rate to apply.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexBindingDivisor")]
        public static void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2ui")]
        public static void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2uiv")]
        public static void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2uiv")]
        public static unsafe void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3ui")]
        public static void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3uiv")]
        public static void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3uiv")]
        public static unsafe void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4ui")]
        public static void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4uiv")]
        public static void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="value">
        /// [length: 1]
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4uiv")]
        public static unsafe void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static void Viewport(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static unsafe void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="x">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="w">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="h">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedf")]
        public static void ViewportIndexed(uint index, float x, float y, float w, float h)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static void ViewportIndexed(uint index, [CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static void ViewportIndexed(uint index, [CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static unsafe void ViewportIndexed(uint index, [CountAttribute(Count = 4)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags, ulong timeout)
        {
            throw new BindingsNotRewrittenException();
        }

        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            public static void ActiveProgram(uint program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program">
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            public static void ActiveShaderProgram(uint pipeline, uint program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="texture">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static void BindMultiTexture(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, uint texture)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            public static void BindProgramPipeline(uint pipeline)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static OpenTK.Graphics.OpenGL4.FramebufferStatus CheckNamedFramebufferStatus(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClientAttribDefaultEXT")]
            public static void ClientAttribDefault(OpenTK.Graphics.OpenGL4.ClientAttribMask mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T11 bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T11 bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage1DEXT")]
            public static void CopyMultiTexImage1D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage2DEXT")]
            public static void CopyMultiTexImage2D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage1DEXT")]
            public static void CopyMultiTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int x, int y, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage2DEXT")]
            public static void CopyMultiTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage3DEXT")]
            public static void CopyMultiTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static void CopyTextureImage1D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static void CopyTextureImage2D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static void CopyTextureSubImage1D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int x, int y, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static void CopyTextureSubImage2D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static void CopyTextureSubImage3D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="@string">
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramEXT")]
            public static uint CreateShaderProgram(OpenTK.Graphics.OpenGL4.ShaderType type, String @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="count">
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            /// <param name="strings">
            /// [length: count]
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramvEXT")]
            public static uint CreateShaderProgram(OpenTK.Graphics.OpenGL4.ShaderType type, int count, [CountAttribute(Parameter = "count")] String[] strings)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            public static void DeleteProgramPipeline([CountAttribute(Parameter = "n")] uint pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            public static void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint[] pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            public static void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] ref uint pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            public static unsafe void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint* pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="array">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static void DisableClientStateIndexed(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="array">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateiEXT")]
            public static void DisableClientState(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableIndexedEXT")]
            public static void DisableIndexed(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableVertexArrayAttribEXT")]
            public static void DisableVertexArrayAttrib(uint vaobj, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="array">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableVertexArrayEXT")]
            public static void DisableVertexArray(uint vaobj, OpenTK.Graphics.OpenGL4.EnableCap array)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedEXT")]
            public static void DrawArraysInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int start, int count, int primcount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int primcount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="array">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static void EnableClientStateIndexed(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Enable or disable client-side capability
            /// </summary>
            /// <param name="array">
            /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateiEXT")]
            public static void EnableClientState(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableIndexedEXT")]
            public static void EnableIndexed(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableVertexArrayAttribEXT")]
            public static void EnableVertexArrayAttrib(uint vaobj, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="array">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableVertexArrayEXT")]
            public static void EnableVertexArray(uint vaobj, OpenTK.Graphics.OpenGL4.EnableCap array)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFlushMappedNamedBufferRangeEXT")]
            public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, int length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFlushMappedNamedBufferRangeEXT")]
            public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, IntPtr length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static void FramebufferDrawBuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.DrawBufferMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="bufs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static void FramebufferDrawBuffers(uint framebuffer, int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL4.DrawBufferMode[] bufs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="bufs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static void FramebufferDrawBuffers(uint framebuffer, int n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.OpenGL4.DrawBufferMode bufs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="bufs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static unsafe void FramebufferDrawBuffers(uint framebuffer, int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL4.DrawBufferMode* bufs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static void FramebufferReadBuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ReadBufferMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            public static uint GenProgramPipeline()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            public static void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            public static void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">
            /// [length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            public static unsafe void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateMultiTexMipmapEXT")]
            public static void GenerateMultiTexMipmap(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static void GenerateTextureMipmap(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static void GetBooleanIndexed(OpenTK.Graphics.OpenGL4.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static void GetBooleanIndexed(OpenTK.Graphics.OpenGL4.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out bool data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static unsafe void GetBooleanIndexed(OpenTK.Graphics.OpenGL4.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] ref T3 img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] ref T3 img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static void GetDoubleIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static void GetDoubleIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out double data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static unsafe void GetDoubleIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoublei_vEXT")]
            public static void GetDouble(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoublei_vEXT")]
            public static void GetDouble(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoublei_vEXT")]
            public static unsafe void GetDouble(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static void GetFloatIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static void GetFloatIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out float data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static unsafe void GetFloatIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloati_vEXT")]
            public static void GetFloat(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloati_vEXT")]
            public static void GetFloat(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloati_vEXT")]
            public static unsafe void GetFloat(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Retrieve a named parameter from a framebuffer
            /// </summary>
            /// <param name="framebuffer">
            /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
            /// </param>
            /// <param name="pname">
            /// A token indicating the parameter to be retrieved.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The address of a variable to receive the value of the parameter named pname.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static void GetFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Retrieve a named parameter from a framebuffer
            /// </summary>
            /// <param name="framebuffer">
            /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
            /// </param>
            /// <param name="pname">
            /// A token indicating the parameter to be retrieved.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The address of a variable to receive the value of the parameter named pname.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static void GetFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Retrieve a named parameter from a framebuffer
            /// </summary>
            /// <param name="framebuffer">
            /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
            /// </param>
            /// <param name="pname">
            /// A token indicating the parameter to be retrieved.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The address of a variable to receive the value of the parameter named pname.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static unsafe void GetFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static void GetIntegerIndexed(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] int[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static void GetIntegerIndexed(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out int data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static unsafe void GetIntegerIndexed(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] int* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static unsafe void GetMultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static unsafe void GetMultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T5 pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static unsafe void GetMultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static unsafe void GetMultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static unsafe void GetMultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static unsafe void GetMultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData(uint buffer, IntPtr offset, int size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static unsafe void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferParameterivEXT")]
            public static void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferParameterivEXT")]
            public static void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferParameterivEXT")]
            public static unsafe void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static unsafe void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static unsafe void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static unsafe void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static unsafe void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "program,pname")] IntPtr @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] T3[] @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] T3[,] @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] T3[,,] @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] ref T3 @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static void GetNamedProgram(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ProgramPropertyArb pname, [OutAttribute, CountAttribute(Count = 1)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static unsafe void GetNamedProgram(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ProgramPropertyArb pname, [OutAttribute, CountAttribute(Count = 1)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static unsafe void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.ExtDebugLabel type, uint @object, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="type">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="@object">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.ExtDebugLabel type, uint @object, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">
            /// [length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            public static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </param>
            /// <param name="bufSize">
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </param>
            /// <param name="infoLog">
            /// [length: bufSize]
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            public static unsafe void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            public static void GetProgramPipeline(uint pipeline, OpenTK.Graphics.OpenGL4.PipelineParameterName pname, [OutAttribute] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            public static void GetProgramPipeline(uint pipeline, OpenTK.Graphics.OpenGL4.PipelineParameterName pname, [OutAttribute] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params">
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            public static unsafe void GetProgramPipeline(uint pipeline, OpenTK.Graphics.OpenGL4.PipelineParameterName pname, [OutAttribute] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T5 pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static unsafe void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static unsafe void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static unsafe void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static unsafe void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static unsafe void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static unsafe void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
            public static void GetVertexArrayInteger(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
            public static void GetVertexArrayInteger(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] out int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
            public static unsafe void GetVertexArrayInteger(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegervEXT")]
            public static void GetVertexArrayInteger(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegervEXT")]
            public static void GetVertexArrayInteger(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] out int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegervEXT")]
            public static unsafe void GetVertexArrayInteger(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] IntPtr param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute] T3[] param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute] T3[,] param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute] T3[,,] param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute] ref T3 param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_debug_marker]
            /// </summary>
            /// <param name="length">
            /// </param>
            /// <param name="marker">
            /// </param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glInsertEventMarkerEXT")]
            public static void InsertEventMarker(int length, String marker)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glIsEnabledIndexedEXT")]
            public static bool IsEnabledIndexed(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            public static bool IsProgramPipeline(uint pipeline)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_debug_label]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="@object">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="label">
            /// </param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            public static void LabelObject(OpenTK.Graphics.OpenGL4.ExtDebugLabel type, uint @object, int length, String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static IntPtr MapNamedBuffer(uint buffer, OpenTK.Graphics.OpenGL4.BufferAccess access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="access">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static IntPtr MapNamedBuffer(uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferRangeEXT")]
            public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, int length, OpenTK.Graphics.OpenGL4.BufferAccessMask access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferRangeEXT")]
            public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="left">
            /// </param>
            /// <param name="right">
            /// </param>
            /// <param name="bottom">
            /// </param>
            /// <param name="top">
            /// </param>
            /// <param name="zNear">
            /// </param>
            /// <param name="zFar">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixFrustumEXT")]
            public static void MatrixFrustum(OpenTK.Graphics.OpenGL4.MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadIdentityEXT")]
            public static void MatrixLoadIdentity(OpenTK.Graphics.OpenGL4.MatrixMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static void MatrixLoadTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static void MatrixLoadTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref double m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static unsafe void MatrixLoadTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static void MatrixLoadTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static void MatrixLoadTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static unsafe void MatrixLoadTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static void MatrixLoad(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static void MatrixLoad(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref double m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static unsafe void MatrixLoad(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static void MatrixLoad(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static void MatrixLoad(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static unsafe void MatrixLoad(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static void MatrixMultTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static void MatrixMultTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref double m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static unsafe void MatrixMultTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static void MatrixMultTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static void MatrixMultTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static unsafe void MatrixMultTranspose(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static void MatrixMult(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static void MatrixMult(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref double m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static unsafe void MatrixMult(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static void MatrixMult(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static void MatrixMult(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static unsafe void MatrixMult(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="left">
            /// </param>
            /// <param name="right">
            /// </param>
            /// <param name="bottom">
            /// </param>
            /// <param name="top">
            /// </param>
            /// <param name="zNear">
            /// </param>
            /// <param name="zFar">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixOrthoEXT")]
            public static void MatrixOrtho(OpenTK.Graphics.OpenGL4.MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixPopEXT")]
            public static void MatrixPop(OpenTK.Graphics.OpenGL4.MatrixMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixPushEXT")]
            public static void MatrixPush(OpenTK.Graphics.OpenGL4.MatrixMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="angle">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixRotatedEXT")]
            public static void MatrixRotate(OpenTK.Graphics.OpenGL4.MatrixMode mode, double angle, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="angle">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixRotatefEXT")]
            public static void MatrixRotate(OpenTK.Graphics.OpenGL4.MatrixMode mode, float angle, float x, float y, float z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixScaledEXT")]
            public static void MatrixScale(OpenTK.Graphics.OpenGL4.MatrixMode mode, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixScalefEXT")]
            public static void MatrixScale(OpenTK.Graphics.OpenGL4.MatrixMode mode, float x, float y, float z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixTranslatedEXT")]
            public static void MatrixTranslate(OpenTK.Graphics.OpenGL4.MatrixMode mode, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|NV_path_rendering]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|NV_path_rendering", Version = "", EntryPoint = "glMatrixTranslatefEXT")]
            public static void MatrixTranslate(OpenTK.Graphics.OpenGL4.MatrixMode mode, float x, float y, float z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static void MultiTexBuffer(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TypeEnum internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer(OpenTK.Graphics.OpenGL4.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static unsafe void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnviEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static unsafe void MultiTexEnv(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendEXT")]
            public static void MultiTexGend(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, double param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static unsafe void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static unsafe void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGeniEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static unsafe void MultiTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T8 pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T10 pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static unsafe void MultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static unsafe void MultiTexParameterI(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static unsafe void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameteriEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static unsafe void MultiTexParameter(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="renderbuffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static void MultiTexRenderbuffer(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T11 pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, int size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, int size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_buffer]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_buffer", Version = "", EntryPoint = "glNamedBufferPageCommitmentEXT")]
            public static void NamedBufferPageCommitment(uint buffer, IntPtr offset, int size, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_sparse_buffer]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "ARB_sparse_buffer", Version = "", EntryPoint = "glNamedBufferPageCommitmentEXT")]
            public static void NamedBufferPageCommitment(uint buffer, IntPtr offset, IntPtr size, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData(uint buffer, IntPtr offset, int size, [CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="readBuffer">
            /// </param>
            /// <param name="writeBuffer">
            /// </param>
            /// <param name="readOffset">
            /// </param>
            /// <param name="writeOffset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedCopyBufferSubDataEXT")]
            public static void NamedCopyBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="readBuffer">
            /// </param>
            /// <param name="writeBuffer">
            /// </param>
            /// <param name="readOffset">
            /// </param>
            /// <param name="writeOffset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedCopyBufferSubDataEXT")]
            public static void NamedCopyBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferParameteriEXT")]
            public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferParameteriEXT")]
            public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferParameteriEXT")]
            public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="renderbuffertarget">
            /// </param>
            /// <param name="renderbuffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static void NamedFramebufferRenderbuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static void NamedFramebufferTexture1D(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static void NamedFramebufferTexture2D(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static void NamedFramebufferTexture3D(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level, int zoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static void NamedFramebufferTexture(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="face">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static void NamedFramebufferTextureFace(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, OpenTK.Graphics.OpenGL4.TextureTarget face)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="layer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static void NamedFramebufferTextureLayer(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static unsafe void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, float x, float y, float z, float w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static unsafe void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int x, int y, int z, int w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static unsafe void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static unsafe void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static void NamedProgramLocalParameters4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static void NamedProgramLocalParameters4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static unsafe void NamedProgramLocalParameters4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static unsafe void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static unsafe void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess format, int len, [CountAttribute(Parameter = "len")] IntPtr @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] T4[] @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] T4[,] @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] T4[,,] @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] ref T4 @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="coverageSamples">
            /// </param>
            /// <param name="colorSamples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static void NamedRenderbufferStorageMultisampleCoverage(uint renderbuffer, int coverageSamples, int colorSamples, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_polygon_offset_clamp]
            /// </summary>
            /// <param name="factor">
            /// </param>
            /// <param name="units">
            /// </param>
            /// <param name="clamp">
            /// </param>
            [AutoGenerated(Category = "EXT_polygon_offset_clamp", Version = "", EntryPoint = "glPolygonOffsetClampEXT")]
            public static void PolygonOffsetClamp(float factor, float units, float clamp)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_debug_marker]
            /// </summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPopGroupMarkerEXT")]
            public static void PopGroupMarker()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            public static void ProgramParameter(uint program, OpenTK.Graphics.OpenGL4.AssemblyProgramParameterArb pname, int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dEXT")]
            public static void ProgramUniform1(uint program, int location, double x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dvEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dvEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dvEXT")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            public static void ProgramUniform1(uint program, int location, float v0)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            public static void ProgramUniform1(uint program, int location, int v0)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uiEXT")]
            public static void ProgramUniform1(uint program, int location, uint v0)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dEXT")]
            public static void ProgramUniform2(uint program, int location, double x, double y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dvEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dvEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dvEXT")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            public static void ProgramUniform2(uint program, int location, float v0, float v1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            public static void ProgramUniform2(uint program, int location, int v0, int v1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uiEXT")]
            public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dEXT")]
            public static void ProgramUniform3(uint program, int location, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dvEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dvEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dvEXT")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uiEXT")]
            public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dEXT")]
            public static void ProgramUniform4(uint program, int location, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dvEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dvEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dvEXT")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uiEXT")]
            public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2dvEXT")]
            public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2dvEXT")]
            public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2dvEXT")]
            public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
            public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
            public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
            public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
            public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
            public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
            public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3dvEXT")]
            public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3dvEXT")]
            public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3dvEXT")]
            public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
            public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
            public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
            public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
            public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
            public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
            public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4dvEXT")]
            public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4dvEXT")]
            public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4dvEXT")]
            public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
            public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
            public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
            public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
            public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
            public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
            public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access|EXT_separate_shader_objects]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glPushClientAttribDefaultEXT")]
            public static void PushClientAttribDefault(OpenTK.Graphics.OpenGL4.ClientAttribMask mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_debug_marker]
            /// </summary>
            /// <param name="length">
            /// </param>
            /// <param name="marker">
            /// </param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPushGroupMarkerEXT")]
            public static void PushGroupMarker(int length, String marker)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_raster_multisample|EXT_texture_filter_minmax|NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="samples">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [AutoGenerated(Category = "EXT_raster_multisample|EXT_texture_filter_minmax|NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glRasterSamplesEXT")]
            public static void RasterSamples(uint samples, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static void TextureBuffer(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static void TextureBuffer(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, uint buffer, IntPtr offset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, uint buffer, IntPtr offset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T8 pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T10 pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTexturePageCommitmentEXT")]
            public static void TexturePageCommitment(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static unsafe void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static unsafe void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static unsafe void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static unsafe void TextureParameter(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="renderbuffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static void TextureRenderbuffer(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DMultisampleEXT")]
            public static void TextureStorage2DMultisample(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int samples, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width, int height, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DMultisampleEXT")]
            public static void TextureStorage2DMultisample(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width, int height, int depth)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DMultisampleEXT")]
            public static void TextureStorage3DMultisample(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int samples, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess internalformat, int width, int height, int depth, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DMultisampleEXT")]
            public static void TextureStorage3DMultisample(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T11 pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glUnmapNamedBufferEXT")]
            public static bool UnmapNamedBuffer(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages">
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program">
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            public static void UseProgramStages(uint pipeline, OpenTK.Graphics.OpenGL4.UseProgramStageMask stages, uint program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="program">
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            public static void UseShaderProgram(OpenTK.Graphics.OpenGL4.ExtSeparateShaderObjects type, uint program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline">
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            public static void ValidateProgramPipeline(uint pipeline)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="bindingindex">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayBindVertexBufferEXT")]
            public static void VertexArrayBindVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayColorOffsetEXT")]
            public static void VertexArrayColorOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.ColorPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayEdgeFlagOffsetEXT")]
            public static void VertexArrayEdgeFlagOffset(uint vaobj, uint buffer, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayFogCoordOffsetEXT")]
            public static void VertexArrayFogCoordOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.FogPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayIndexOffsetEXT")]
            public static void VertexArrayIndexOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.IndexPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayMultiTexCoordOffsetEXT")]
            public static void VertexArrayMultiTexCoordOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayNormalOffsetEXT")]
            public static void VertexArrayNormalOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.NormalPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArraySecondaryColorOffsetEXT")]
            public static void VertexArraySecondaryColorOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.ColorPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayTexCoordOffsetEXT")]
            public static void VertexArrayTexCoordOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="bindingindex">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribBindingEXT")]
            public static void VertexArrayVertexAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="divisor">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribDivisorEXT")]
            public static void VertexArrayVertexAttribDivisor(uint vaobj, uint index, uint divisor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="normalized">
            /// </param>
            /// <param name="relativeoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribFormatEXT")]
            public static void VertexArrayVertexAttribFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, bool normalized, uint relativeoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="relativeoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribIFormatEXT")]
            public static void VertexArrayVertexAttribIFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, uint relativeoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribIOffsetEXT")]
            public static void VertexArrayVertexAttribIOffset(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribEnum type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="relativeoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribLFormatEXT")]
            public static void VertexArrayVertexAttribLFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, uint relativeoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribLOffsetEXT")]
            public static void VertexArrayVertexAttribLOffset(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="normalized">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribOffsetEXT")]
            public static void VertexArrayVertexAttribOffset(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="bindingindex">
            /// </param>
            /// <param name="divisor">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexBindingDivisorEXT")]
            public static void VertexArrayVertexBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexOffsetEXT")]
            public static void VertexArrayVertexOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.VertexPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_window_rectangles]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="box">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "EXT_window_rectangles", Version = "", EntryPoint = "glWindowRectanglesEXT")]
            public static void WindowRectangles(OpenTK.Graphics.OpenGL4.ExtWindowRectangles mode, int count, [CountAttribute(Computed = "count")] int[] box)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_window_rectangles]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="box">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "EXT_window_rectangles", Version = "", EntryPoint = "glWindowRectanglesEXT")]
            public static void WindowRectangles(OpenTK.Graphics.OpenGL4.ExtWindowRectangles mode, int count, [CountAttribute(Computed = "count")] ref int box)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_window_rectangles]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="box">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "EXT_window_rectangles", Version = "", EntryPoint = "glWindowRectanglesEXT")]
            public static unsafe void WindowRectangles(OpenTK.Graphics.OpenGL4.ExtWindowRectangles mode, int count, [CountAttribute(Computed = "count")] int* box)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        public static partial class Intel
        {
            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glBeginPerfQueryINTEL")]
            public static void BeginPerfQuery(uint queryHandle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="queryHandle">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            public static void CreatePerfQuery(uint queryId, [OutAttribute] uint[] queryHandle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="queryHandle">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            public static void CreatePerfQuery(uint queryId, [OutAttribute] out uint queryHandle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="queryHandle">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            public static unsafe void CreatePerfQuery(uint queryId, [OutAttribute] uint* queryHandle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glDeletePerfQueryINTEL")]
            public static void DeletePerfQuery(uint queryHandle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glEndPerfQueryINTEL")]
            public static void EndPerfQuery(uint queryHandle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            public static void GetFirstPerfQueryI([OutAttribute] uint[] queryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            public static void GetFirstPerfQueryI([OutAttribute] out uint queryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            public static uint GetNextPerfQueryI(uint queryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="nextQueryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            public static void GetNextPerfQueryI(uint queryId, [OutAttribute] uint[] nextQueryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="nextQueryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            public static void GetNextPerfQueryI(uint queryId, [OutAttribute] out uint nextQueryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="nextQueryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            public static unsafe void GetNextPerfQueryI(uint queryId, [OutAttribute] uint* nextQueryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="counterId">
            /// </param>
            /// <param name="counterNameLength">
            /// </param>
            /// <param name="counterName">
            /// [length: counterNameLength]
            /// </param>
            /// <param name="counterDescLength">
            /// </param>
            /// <param name="counterDesc">
            /// [length: counterDescLength]
            /// </param>
            /// <param name="counterOffset">
            /// </param>
            /// <param name="counterDataSize">
            /// </param>
            /// <param name="counterTypeEnum">
            /// </param>
            /// <param name="counterDataTypeEnum">
            /// </param>
            /// <param name="rawCounterMaxValue">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            public static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, uint counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] uint[] counterOffset, [OutAttribute] uint[] counterDataSize, [OutAttribute] uint[] counterTypeEnum, [OutAttribute] uint[] counterDataTypeEnum, [OutAttribute] ulong[] rawCounterMaxValue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="counterId">
            /// </param>
            /// <param name="counterNameLength">
            /// </param>
            /// <param name="counterName">
            /// [length: counterNameLength]
            /// </param>
            /// <param name="counterDescLength">
            /// </param>
            /// <param name="counterDesc">
            /// [length: counterDescLength]
            /// </param>
            /// <param name="counterOffset">
            /// </param>
            /// <param name="counterDataSize">
            /// </param>
            /// <param name="counterTypeEnum">
            /// </param>
            /// <param name="counterDataTypeEnum">
            /// </param>
            /// <param name="rawCounterMaxValue">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            public static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, uint counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] out uint counterOffset, [OutAttribute] out uint counterDataSize, [OutAttribute] out uint counterTypeEnum, [OutAttribute] out uint counterDataTypeEnum, [OutAttribute] out ulong rawCounterMaxValue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="counterId">
            /// </param>
            /// <param name="counterNameLength">
            /// </param>
            /// <param name="counterName">
            /// [length: counterNameLength]
            /// </param>
            /// <param name="counterDescLength">
            /// </param>
            /// <param name="counterDesc">
            /// [length: counterDescLength]
            /// </param>
            /// <param name="counterOffset">
            /// </param>
            /// <param name="counterDataSize">
            /// </param>
            /// <param name="counterTypeEnum">
            /// </param>
            /// <param name="counterDataTypeEnum">
            /// </param>
            /// <param name="rawCounterMaxValue">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            public static unsafe void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] out String counterName, uint counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] out String counterDesc, [OutAttribute] uint* counterOffset, [OutAttribute] uint* counterDataSize, [OutAttribute] uint* counterTypeEnum, [OutAttribute] uint* counterDataTypeEnum, [OutAttribute] ulong* rawCounterMaxValue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [OutAttribute] IntPtr data, [OutAttribute] uint[] bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [OutAttribute] IntPtr data, [OutAttribute] out uint bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static unsafe void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [OutAttribute] IntPtr data, [OutAttribute] uint* bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] uint[] bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] out uint bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static unsafe void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] uint* bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] uint[] bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] out uint bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static unsafe void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] uint* bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] uint[] bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] out uint bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static unsafe void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] uint* bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] uint[] bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] out uint bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryHandle">
            /// </param>
            /// <param name="flags">
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="data">
            /// </param>
            /// <param name="bytesWritten">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            public static unsafe void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] uint* bytesWritten)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryName">
            /// </param>
            /// <param name="queryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            public static void GetPerfQueryIdByName(String queryName, [OutAttribute] uint[] queryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryName">
            /// </param>
            /// <param name="queryId">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            public static void GetPerfQueryIdByName(String queryName, [OutAttribute] out uint queryId)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="queryNameLength">
            /// </param>
            /// <param name="queryName">
            /// [length: queryNameLength]
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="noCounters">
            /// </param>
            /// <param name="noInstances">
            /// </param>
            /// <param name="capsMask">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            public static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] uint[] dataSize, [OutAttribute] uint[] noCounters, [OutAttribute] uint[] noInstances, [OutAttribute] uint[] capsMask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="queryNameLength">
            /// </param>
            /// <param name="queryName">
            /// [length: queryNameLength]
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="noCounters">
            /// </param>
            /// <param name="noInstances">
            /// </param>
            /// <param name="capsMask">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            public static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] out uint dataSize, [OutAttribute] out uint noCounters, [OutAttribute] out uint noInstances, [OutAttribute] out uint capsMask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_performance_query]
            /// </summary>
            /// <param name="queryId">
            /// </param>
            /// <param name="queryNameLength">
            /// </param>
            /// <param name="queryName">
            /// [length: queryNameLength]
            /// </param>
            /// <param name="dataSize">
            /// </param>
            /// <param name="noCounters">
            /// </param>
            /// <param name="noInstances">
            /// </param>
            /// <param name="capsMask">
            /// </param>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            public static unsafe void GetPerfQueryInfo(uint queryId, uint queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] out String queryName, [OutAttribute] uint* dataSize, [OutAttribute] uint* noCounters, [OutAttribute] uint* noInstances, [OutAttribute] uint* capsMask)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        public static partial class Khr
        {
            /// <summary>
            /// [requires: KHR_blend_equation_advanced]
            /// </summary>
            [AutoGenerated(Category = "KHR_blend_equation_advanced", Version = "", EntryPoint = "glBlendBarrierKHR")]
            public static void BlendBarrier()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// The address of a callback function that will be called when a debug message is generated.
            /// </param>
            /// <param name="userParam">
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, uint[] ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, ref uint ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// The source of debug messages to enable or disable.
            /// </param>
            /// <param name="type">
            /// The type of debug messages to enable or disable.
            /// </param>
            /// <param name="severity">
            /// The severity of debug messages to enable or disable.
            /// </param>
            /// <param name="count">
            /// The length of the array ids.
            /// </param>
            /// <param name="ids">
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </param>
            /// <param name="enabled">
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, uint* ids, bool enabled)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// The source of the debug message to insert.
            /// </param>
            /// <param name="type">
            /// The type of the debug message insert.
            /// </param>
            /// <param name="id">
            /// The user-supplied identifier of the message to insert.
            /// </param>
            /// <param name="severity">
            /// The severity of the debug messages to insert.
            /// </param>
            /// <param name="length">
            /// The length string contained in the character array whose address is given by message.
            /// </param>
            /// <param name="buf">
            /// The address of a character array containing the message to insert.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, String buf)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] uint[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] int[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out uint ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out int lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// The number of debug messages to retrieve from the log.
            /// </param>
            /// <param name="bufSize">
            /// The size of the buffer whose address is given by messageLog.
            /// </param>
            /// <param name="sources">
            /// [length: count]
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </param>
            /// <param name="types">
            /// [length: count]
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </param>
            /// <param name="ids">
            /// [length: count]
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </param>
            /// <param name="severities">
            /// [length: count]
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </param>
            /// <param name="lengths">
            /// [length: count]
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </param>
            /// <param name="messageLog">
            /// [length: bufSize]
            /// The address of an array of characters that will receive the messages.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusKHR")]
            public static OpenTK.Graphics.OpenGL4.GraphicsResetStatus GetGraphicsResetStatus()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static void GetObjectLabel(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// The name of the sync object whose label to retrieve.
            /// </param>
            /// <param name="bufSize">
            /// The length of the buffer whose address is in label.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// The address of a variable to receive the length of the object label.
            /// </param>
            /// <param name="label">
            /// [length: bufSize]
            /// The address of a string that will receive the object label.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer(OpenTK.Graphics.OpenGL4.KhrDebug pname, [OutAttribute] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL4.KhrDebug pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformfvKHR")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformivKHR")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuivKHR")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuivKHR")]
            public static void GetnUniform(uint program, int location, int bufSize, [OutAttribute] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glGetnUniformuivKHR")]
            public static unsafe void GetnUniform(uint program, int location, int bufSize, [OutAttribute] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_parallel_shader_compile]
            /// </summary>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "KHR_parallel_shader_compile", Version = "", EntryPoint = "glMaxShaderCompilerThreadsKHR")]
            public static void MaxShaderCompilerThreads(uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// The namespace from which the name of the object is allocated.
            /// </param>
            /// <param name="name">
            /// The name of the object to label.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static void ObjectLabel(OpenTK.Graphics.OpenGL4.ObjectIdentifier identifier, uint name, int length, String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel(IntPtr ptr, int length, String label)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, int length, String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, int length, String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, int length, String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// A pointer identifying a sync object.
            /// </param>
            /// <param name="length">
            /// The length of the label to be used for the object.
            /// </param>
            /// <param name="label">
            /// The address of a string containing the label to assign to the object.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, int length, String label)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroupKHR")]
            public static void PopDebugGroup()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// The source of the debug message.
            /// </param>
            /// <param name="id">
            /// The identifier of the message.
            /// </param>
            /// <param name="length">
            /// The length of the message to be sent to the debug output stream.
            /// </param>
            /// <param name="message">
            /// The a string containing the message to be sent to the debug output stream.
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static void PushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSource source, uint id, int length, String message)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T7[,,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: KHR_robustness]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="data">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "KHR_robustness", Version = "", EntryPoint = "glReadnPixelsKHR")]
            public static void ReadnPixels<T7>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T7 data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }
        }

        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_conditional_render]
            /// Start conditional rendering
            /// </summary>
            /// <param name="id">
            /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
            /// </param>
            /// <param name="mode">
            /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
            /// </param>
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            public static void BeginConditionalRender(uint id, OpenTK.Graphics.OpenGL4.TypeEnum mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_blend_equation_advanced]
            /// </summary>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendBarrierNV")]
            public static void BlendBarrier()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_blend_equation_advanced]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendParameteriNV")]
            public static void BlendParameter(OpenTK.Graphics.OpenGL4.NvBlendEquationAdvanced pname, int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="address">
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glBufferAddressRangeNV")]
            public static void BufferAddressRange(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory pname, uint index, ulong address, int length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="address">
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glBufferAddressRangeNV")]
            public static void BufferAddressRange(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory pname, uint index, ulong address, IntPtr length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCallCommandListNV")]
            public static void CallCommandList(uint list)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glColorFormatNV")]
            public static void ColorFormat(int size, OpenTK.Graphics.OpenGL4.PixelType type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segments">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCommandListSegmentsNV")]
            public static void CommandListSegments(uint list, uint segments)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCompileCommandListNV")]
            public static void CompileCommandList(uint list)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_conservative_raster_dilate]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_conservative_raster_dilate", Version = "", EntryPoint = "glConservativeRasterParameterfNV")]
            public static void ConservativeRasterParameter(OpenTK.Graphics.OpenGL4.NvConservativeRasterDilate pname, float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_conservative_raster_pre_snap_triangles]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "NV_conservative_raster_pre_snap_triangles", Version = "", EntryPoint = "glConservativeRasterParameteriNV")]
            public static void ConservativeRasterParameter(OpenTK.Graphics.OpenGL4.NvConservativeRasterDilate pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="srcPath">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCopyPathNV")]
            public static void CopyPath(uint resultPath, uint srcPath)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static unsafe void CoverFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static unsafe void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static unsafe void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static unsafe void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathInstancedNV")]
            public static unsafe void CoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverFillPathNV")]
            public static void CoverFillPath(uint path, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static unsafe void CoverStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static unsafe void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static unsafe void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static unsafe void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathInstancedNV")]
            public static unsafe void CoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glCoverStrokePathNV")]
            public static void CoverStrokePath(uint path, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="components">
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationNV")]
            public static void CoverageModulation(OpenTK.Graphics.OpenGL4.ColorComponent components)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="v">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationTableNV")]
            public static void CoverageModulationTable(int n, [CountAttribute(Parameter = "n")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="v">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationTableNV")]
            public static void CoverageModulationTable(int n, [CountAttribute(Parameter = "n")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="v">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glCoverageModulationTableNV")]
            public static unsafe void CoverageModulationTable(int n, [CountAttribute(Parameter = "n")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCreateCommandListsNV")]
            public static void CreateCommandLists(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCreateCommandListsNV")]
            public static void CreateCommandLists(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCreateCommandListsNV")]
            public static unsafe void CreateCommandLists(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCreateStatesNV")]
            public static void CreateStates(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCreateStatesNV")]
            public static void CreateStates(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glCreateStatesNV")]
            public static unsafe void CreateStates(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteCommandListsNV")]
            public static void DeleteCommandList([CountAttribute(Parameter = "n")] uint lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteCommandListsNV")]
            public static void DeleteCommandLists(int n, [CountAttribute(Parameter = "n")] uint[] lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteCommandListsNV")]
            public static void DeleteCommandLists(int n, [CountAttribute(Parameter = "n")] ref uint lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="lists">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteCommandListsNV")]
            public static unsafe void DeleteCommandLists(int n, [CountAttribute(Parameter = "n")] uint* lists)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="range">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glDeletePathsNV")]
            public static void DeletePath(uint path, int range)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteStatesNV")]
            public static void DeleteState([CountAttribute(Parameter = "n")] uint states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteStatesNV")]
            public static void DeleteStates(int n, [CountAttribute(Parameter = "n")] uint[] states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteStatesNV")]
            public static void DeleteStates(int n, [CountAttribute(Parameter = "n")] ref uint states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="states">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDeleteStatesNV")]
            public static unsafe void DeleteStates(int n, [CountAttribute(Parameter = "n")] uint* states)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="primitiveMode">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsAddressNV")]
            public static void DrawCommandsAddres(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, ulong[] indirects, int[] sizes, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="primitiveMode">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsAddressNV")]
            public static void DrawCommandsAddres(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, ref ulong indirects, ref int sizes, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="primitiveMode">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsAddressNV")]
            public static unsafe void DrawCommandsAddres(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, ulong* indirects, int* sizes, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="primitiveMode">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsNV")]
            public static void DrawCommands(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, uint buffer, IntPtr[] indirects, int[] sizes, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="primitiveMode">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsNV")]
            public static void DrawCommands(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, uint buffer, ref IntPtr indirects, ref int sizes, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="primitiveMode">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsNV")]
            public static unsafe void DrawCommands(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, uint buffer, IntPtr* indirects, int* sizes, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsStatesAddressNV")]
            public static void DrawCommandsStatesAddres(ulong[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsStatesAddressNV")]
            public static void DrawCommandsStatesAddres(ref ulong indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsStatesAddressNV")]
            public static unsafe void DrawCommandsStatesAddres(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsStatesNV")]
            public static void DrawCommandsStates(uint buffer, IntPtr[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsStatesNV")]
            public static void DrawCommandsStates(uint buffer, ref IntPtr indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glDrawCommandsStatesNV")]
            public static unsafe void DrawCommandsStates(uint buffer, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_draw_vulkan_image]
            /// </summary>
            /// <param name="vkImage">
            /// </param>
            /// <param name="sampler">
            /// </param>
            /// <param name="x0">
            /// </param>
            /// <param name="y0">
            /// </param>
            /// <param name="x1">
            /// </param>
            /// <param name="y1">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="s0">
            /// </param>
            /// <param name="t0">
            /// </param>
            /// <param name="s1">
            /// </param>
            /// <param name="t1">
            /// </param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glDrawVkImageNV")]
            public static void DrawVkImage(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glEdgeFlagFormatNV")]
            public static void EdgeFlagFormat(int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_conditional_render]
            /// </summary>
            [AutoGenerated(Category = "NV_conditional_render", Version = "", EntryPoint = "glEndConditionalRenderNV")]
            public static void EndConditionalRender()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glFogCoordFormatNV")]
            public static void FogCoordFormat(OpenTK.Graphics.OpenGL4.PixelType type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fragment_coverage_to_color]
            /// </summary>
            /// <param name="color">
            /// </param>
            [AutoGenerated(Category = "NV_fragment_coverage_to_color", Version = "", EntryPoint = "glFragmentCoverageColorNV")]
            public static void FragmentCoverageColor(uint color)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            public static void FramebufferSampleLocations(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            public static void FramebufferSampleLocations(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glFramebufferSampleLocationsfvNV")]
            public static unsafe void FramebufferSampleLocations(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="range">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGenPathsNV")]
            public static uint GenPath(int range)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetBufferParameterui64vNV")]
            public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetBufferParameterui64vNV")]
            public static void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetBufferParameterui64vNV")]
            public static unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="tokenID">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glGetCommandHeaderNV")]
            public static uint GetCommandHeader(OpenTK.Graphics.OpenGL4.NvCommandList tokenID, uint size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            public static float GetCoverageModulationTable()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="bufsize">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            public static void GetCoverageModulationTable(int bufsize, [OutAttribute] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="bufsize">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            public static void GetCoverageModulationTable(int bufsize, [OutAttribute] out float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_mixed_samples]
            /// </summary>
            /// <param name="bufsize">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_mixed_samples", Version = "", EntryPoint = "glGetCoverageModulationTableNV")]
            public static unsafe void GetCoverageModulationTable(int bufsize, [OutAttribute] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="layered">
            /// </param>
            /// <param name="layer">
            /// </param>
            /// <param name="format">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetImageHandleNV")]
            public static ulong GetImageHandle(uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL4.PixelFormat format)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glGetIntegerui64i_vNV")]
            public static void GetIntegerui64(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory value, uint index, [OutAttribute, CountAttribute(Computed = "value")] ulong[] result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glGetIntegerui64i_vNV")]
            public static void GetIntegerui64(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory value, uint index, [OutAttribute, CountAttribute(Computed = "value")] out ulong result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glGetIntegerui64i_vNV")]
            public static unsafe void GetIntegerui64(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory value, uint index, [OutAttribute, CountAttribute(Computed = "value")] ulong* result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static ulong GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static void GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] ulong[] result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static void GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] out ulong result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="result">
            /// [length: COMPSIZE(value)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetIntegerui64vNV")]
            public static unsafe void GetInteger(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] ulong* result)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_internalformat_sample_query]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            public static void GetInternalformatSample(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int samples, OpenTK.Graphics.OpenGL4.InternalFormatPName pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_internalformat_sample_query]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            public static void GetInternalformatSample(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int samples, OpenTK.Graphics.OpenGL4.InternalFormatPName pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_internalformat_sample_query]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="@params">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "NV_internalformat_sample_query", Version = "", EntryPoint = "glGetInternalformatSampleivNV")]
            public static unsafe void GetInternalformatSample(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int samples, OpenTK.Graphics.OpenGL4.InternalFormatPName pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetNamedBufferParameterui64vNV")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            public static void GetPathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            public static void GetPathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenfvNV")]
            public static unsafe void GetPathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            public static void GetPathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            public static void GetPathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathColorGenivNV")]
            public static unsafe void GetPathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            public static Byte GetPathCommand(uint path)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commands">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            public static void GetPathCommands(uint path, [OutAttribute, CountAttribute(Computed = "path")] Byte[] commands)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commands">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            public static void GetPathCommands(uint path, [OutAttribute, CountAttribute(Computed = "path")] out Byte commands)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commands">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCommandsNV")]
            public static unsafe void GetPathCommands(uint path, [OutAttribute, CountAttribute(Computed = "path")] Byte* commands)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            public static float GetPathCoord(uint path)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            public static void GetPathCoords(uint path, [OutAttribute, CountAttribute(Computed = "path")] float[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            public static void GetPathCoords(uint path, [OutAttribute, CountAttribute(Computed = "path")] out float coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathCoordsNV")]
            public static unsafe void GetPathCoords(uint path, [OutAttribute, CountAttribute(Computed = "path")] float* coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            public static float GetPathDashArray(uint path)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="dashArray">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            public static void GetPathDashArray(uint path, [OutAttribute, CountAttribute(Computed = "path")] float[] dashArray)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="dashArray">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            public static void GetPathDashArray(uint path, [OutAttribute, CountAttribute(Computed = "path")] out float dashArray)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="dashArray">
            /// [length: COMPSIZE(path)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathDashArrayNV")]
            public static unsafe void GetPathDashArray(uint path, [OutAttribute, CountAttribute(Computed = "path")] float* dashArray)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="startSegment">
            /// </param>
            /// <param name="numSegments">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathLengthNV")]
            public static float GetPathLength(uint path, int startSegment, int numSegments)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            public static void GetPathMetricRange(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float[] metrics)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            public static void GetPathMetricRange(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out float metrics)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricRangeNV")]
            public static unsafe void GetPathMetricRange(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float[] metrics)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out float metrics)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static unsafe void GetPathMetric(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float[] metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out float metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static unsafe void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float[] metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out float metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static unsafe void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,,] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float[] metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,,] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out float metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static unsafe void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,,] paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T3 paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float[] metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T3 paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] out float metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="metricQueryMask">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="metrics">
            /// [length: COMPSIZE(metricQueryMask,numPaths,stride)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathMetricsNV")]
            public static unsafe void GetPathMetric<T3>(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T3 paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            public static void GetPathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            public static void GetPathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] out float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterfvNV")]
            public static unsafe void GetPathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            public static void GetPathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            public static void GetPathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] out int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathParameterivNV")]
            public static unsafe void GetPathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float[] returnedSpacing)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] out float returnedSpacing)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static unsafe void GetPathSpacing(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float* returnedSpacing)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float[] returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] out float returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static unsafe void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float* returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float[] returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] out float returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static unsafe void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float* returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,,] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float[] returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,,] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] out float returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static unsafe void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T3[,,] paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float* returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T3 paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float[] returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T3 paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] out float returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="pathListMode">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="advanceScale">
            /// </param>
            /// <param name="kerningScale">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="returnedSpacing">
            /// [length: COMPSIZE(pathListMode,numPaths)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathSpacingNV")]
            public static unsafe void GetPathSpacing<T3>(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T3 paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float* returnedSpacing)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            public static void GetPathTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            public static void GetPathTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenfvNV")]
            public static unsafe void GetPathTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            public static void GetPathTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            public static void GetPathTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] out int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetPathTexGenivNV")]
            public static unsafe void GetPathTexGen(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            public static void GetProgramResource(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, OpenTK.Graphics.OpenGL4.NvPathRendering[] props, int bufSize, [OutAttribute] int[] length, [OutAttribute] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            public static void GetProgramResource(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, ref OpenTK.Graphics.OpenGL4.NvPathRendering props, int bufSize, [OutAttribute] out int length, [OutAttribute] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// Retrieve values for multiple properties of a single active resource within a program object
            /// </summary>
            /// <param name="program">
            /// The name of a program object whose resources to query.
            /// </param>
            /// <param name="programInterface">
            /// A token identifying the interface within program containing the resource named name.
            /// </param>
            /// <param name="index"></param>
            /// <param name="propCount"></param>
            /// <param name="props"></param>
            /// <param name="bufSize"></param>
            /// <param name="length"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glGetProgramResourcefvNV")]
            public static unsafe void GetProgramResource(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, OpenTK.Graphics.OpenGL4.NvPathRendering* props, int bufSize, [OutAttribute] int* length, [OutAttribute] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="shadertype">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glGetStageIndexNV")]
            public static ushort GetStageIndex(OpenTK.Graphics.OpenGL4.ShaderType shadertype)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="texture">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleNV")]
            public static ulong GetTextureHandle(uint texture)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="sampler">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleNV")]
            public static ulong GetTextureSamplerHandle(uint texture, uint sampler)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glGetUniformi64vNV")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetUniformui64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetUniformui64vNV")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glGetUniformui64vNV")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glGetVertexAttribLi64vNV")]
            public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glGetVertexAttribLi64vNV")]
            public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glGetVertexAttribLi64vNV")]
            public static unsafe void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glGetVertexAttribLui64vNV")]
            public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glGetVertexAttribLui64vNV")]
            public static void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glGetVertexAttribLui64vNV")]
            public static unsafe void GetVertexAttribL(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_draw_vulkan_image]
            /// </summary>
            /// <param name="name">
            /// [length: COMPSIZE(name)]
            /// </param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glGetVkProcAddrNV")]
            public static IntPtr GetVkProcAddr([CountAttribute(Computed = "name")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glIndexFormatNV")]
            public static void IndexFormat(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="pathA">
            /// </param>
            /// <param name="pathB">
            /// </param>
            /// <param name="weight">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glInterpolatePathsNV")]
            public static void InterpolatePath(uint resultPath, uint pathA, uint pathB, float weight)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glIsBufferResidentNV")]
            public static bool IsBufferResident(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glIsCommandListNV")]
            public static bool IsCommandList(uint list)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glIsImageHandleResidentNV")]
            public static bool IsImageHandleResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glIsNamedBufferResidentNV")]
            public static bool IsNamedBufferResident(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPathNV")]
            public static bool IsPath(uint path)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPointInFillPathNV")]
            public static bool IsPointInFillPath(uint path, uint mask, float x, float y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glIsPointInStrokePathNV")]
            public static bool IsPointInStrokePath(uint path, float x, float y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="state">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glIsStateNV")]
            public static bool IsState(uint state)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glIsTextureHandleResidentNV")]
            public static bool IsTextureHandleResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient(uint list, uint segment, IntPtr indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient(uint list, uint segment, IntPtr indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static unsafe void ListDrawCommandsStatesClient(uint list, uint segment, IntPtr indirects, int* sizes, uint* states, uint* fbos, uint count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[] indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static unsafe void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[] indirects, int* sizes, uint* states, uint* fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[,] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[,] indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static unsafe void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[,] indirects, int* sizes, uint* states, uint* fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[,,] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[,,] indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static unsafe void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] T2[,,] indirects, int* sizes, uint* states, uint* fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] ref T2 indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] ref T2 indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="list">
            /// </param>
            /// <param name="segment">
            /// </param>
            /// <param name="indirects">
            /// </param>
            /// <param name="sizes">
            /// </param>
            /// <param name="states">
            /// </param>
            /// <param name="fbos">
            /// </param>
            /// <param name="count">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glListDrawCommandsStatesClientNV")]
            public static unsafe void ListDrawCommandsStatesClient<T2>(uint list, uint segment, [InAttribute, OutAttribute] ref T2 indirects, int* sizes, uint* states, uint* fbos, uint count)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeBufferNonResidentNV")]
            public static void MakeBufferNonResident(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeBufferResidentNV")]
            public static void MakeBufferResident(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleNonResidentNV")]
            public static void MakeImageHandleNonResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleResidentNV")]
            public static void MakeImageHandleResident(ulong handle, OpenTK.Graphics.OpenGL4.NvBindlessTexture access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeNamedBufferNonResidentNV")]
            public static void MakeNamedBufferNonResident(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glMakeNamedBufferResidentNV")]
            public static void MakeNamedBufferResident(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleNonResidentNV")]
            public static void MakeTextureHandleNonResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="handle">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleResidentNV")]
            public static void MakeTextureHandleResident(ulong handle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x2fNV")]
            public static void MatrixLoad3x2(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x2fNV")]
            public static void MatrixLoad3x2(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x2fNV")]
            public static unsafe void MatrixLoad3x2(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x3fNV")]
            public static void MatrixLoad3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x3fNV")]
            public static void MatrixLoad3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoad3x3fNV")]
            public static unsafe void MatrixLoad3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTranspose3x3fNV")]
            public static void MatrixLoadTranspose3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTranspose3x3fNV")]
            public static void MatrixLoadTranspose3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixLoadTranspose3x3fNV")]
            public static unsafe void MatrixLoadTranspose3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x2fNV")]
            public static void MatrixMult3x2(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x2fNV")]
            public static void MatrixMult3x2(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x2fNV")]
            public static unsafe void MatrixMult3x2(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x3fNV")]
            public static void MatrixMult3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x3fNV")]
            public static void MatrixMult3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMult3x3fNV")]
            public static unsafe void MatrixMult3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTranspose3x3fNV")]
            public static void MatrixMultTranspose3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTranspose3x3fNV")]
            public static void MatrixMultTranspose3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, ref float m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="matrixMode">
            /// </param>
            /// <param name="m">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glMatrixMultTranspose3x3fNV")]
            public static unsafe void MatrixMultTranspose3x3(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessCountNV")]
            public static void MultiDrawArraysIndirectBindlessCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessCountNV")]
            public static void MultiDrawArraysIndirectBindlessCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessCountNV")]
            public static void MultiDrawArraysIndirectBindlessCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessCountNV")]
            public static void MultiDrawArraysIndirectBindlessCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessCountNV")]
            public static void MultiDrawArraysIndirectBindlessCount<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessNV")]
            public static void MultiDrawArraysIndirectBindles(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessNV")]
            public static void MultiDrawArraysIndirectBindles<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessNV")]
            public static void MultiDrawArraysIndirectBindles<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessNV")]
            public static void MultiDrawArraysIndirectBindles<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawArraysIndirectBindlessNV")]
            public static void MultiDrawArraysIndirectBindles<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessCountNV")]
            public static void MultiDrawElementsIndirectBindlessCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessCountNV")]
            public static void MultiDrawElementsIndirectBindlessCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessCountNV")]
            public static void MultiDrawElementsIndirectBindlessCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessCountNV")]
            public static void MultiDrawElementsIndirectBindlessCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,,] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect_count]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="maxDrawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect_count", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessCountNV")]
            public static void MultiDrawElementsIndirectBindlessCount<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T2 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessNV")]
            public static void MultiDrawElementsIndirectBindles(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessNV")]
            public static void MultiDrawElementsIndirectBindles<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[] indirect, int drawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessNV")]
            public static void MultiDrawElementsIndirectBindles<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,] indirect, int drawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessNV")]
            public static void MultiDrawElementsIndirectBindles<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T2[,,] indirect, int drawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_multi_draw_indirect]
            /// </summary>
            /// <param name="mode">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="indirect">
            /// </param>
            /// <param name="drawCount">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="vertexBufferCount">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_multi_draw_indirect", Version = "", EntryPoint = "glMultiDrawElementsIndirectBindlessNV")]
            public static void MultiDrawElementsIndirectBindles<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T2 indirect, int drawCount, int stride, int vertexBufferCount)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            public static void NamedFramebufferSampleLocations(uint framebuffer, uint start, int count, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            public static void NamedFramebufferSampleLocations(uint framebuffer, uint start, int count, ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="start">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glNamedFramebufferSampleLocationsfvNV")]
            public static unsafe void NamedFramebufferSampleLocations(uint framebuffer, uint start, int count, float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glNormalFormatNV")]
            public static void NormalFormat(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="colorFormat">
            /// </param>
            /// <param name="coeffs">
            /// [length: COMPSIZE(genMode,colorFormat)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            public static void PathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode genMode, OpenTK.Graphics.OpenGL4.NvPathRendering colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] float[] coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="colorFormat">
            /// </param>
            /// <param name="coeffs">
            /// [length: COMPSIZE(genMode,colorFormat)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            public static void PathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode genMode, OpenTK.Graphics.OpenGL4.NvPathRendering colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] ref float coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="color">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="colorFormat">
            /// </param>
            /// <param name="coeffs">
            /// [length: COMPSIZE(genMode,colorFormat)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathColorGenNV")]
            public static unsafe void PathColorGen(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode genMode, OpenTK.Graphics.OpenGL4.NvPathRendering colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] float* coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[,] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[,,] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T5 coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[,] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[,,] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T5 coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static unsafe void PathCommands(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static unsafe void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static unsafe void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[,] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static unsafe void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T5[,,] coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCommandsNV")]
            public static unsafe void PathCommands<T5>(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T5 coords)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            public static void PathCoords(uint path, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            public static void PathCoords<T3>(uint path, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T3[] coords)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            public static void PathCoords<T3>(uint path, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T3[,] coords)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            public static void PathCoords<T3>(uint path, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T3[,,] coords)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoordsNV")]
            public static void PathCoords<T3>(uint path, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T3 coords)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="func">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathCoverDepthFuncNV")]
            public static void PathCoverDepthFunc(OpenTK.Graphics.OpenGL4.DepthFunction func)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="dashCount">
            /// </param>
            /// <param name="dashArray">
            /// [length: dashCount]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            public static void PathDashArray(uint path, int dashCount, [CountAttribute(Parameter = "dashCount")] float[] dashArray)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="dashCount">
            /// </param>
            /// <param name="dashArray">
            /// [length: dashCount]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            public static void PathDashArray(uint path, int dashCount, [CountAttribute(Parameter = "dashCount")] ref float dashArray)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="dashCount">
            /// </param>
            /// <param name="dashArray">
            /// [length: dashCount]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathDashArrayNV")]
            public static unsafe void PathDashArray(uint path, int dashCount, [CountAttribute(Parameter = "dashCount")] float* dashArray)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="genMode">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathFogGenNV")]
            public static void PathFogGen(OpenTK.Graphics.OpenGL4.PathGenMode genMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexArray(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexArray<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] T2[] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexArray<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] T2[,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexArray<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] T2[,,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexArray<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] ref T2 fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            /// <param name="baseAndCount">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexRange(OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint baseAndCount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            /// <param name="baseAndCount">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexRange<T1>(OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] T1[] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint baseAndCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            /// <param name="baseAndCount">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexRange<T1>(OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] T1[,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint baseAndCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            /// <param name="baseAndCount">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexRange<T1>(OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] T1[,,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint baseAndCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            /// <param name="baseAndCount">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphIndexRangeNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathGlyphIndexRange<T1>(OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, [InAttribute, OutAttribute] ref T1 fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint baseAndCount)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyph">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            public static void PathGlyphRange(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyph">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            public static void PathGlyphRange<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] T2[] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyph">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            public static void PathGlyphRange<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] T2[,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyph">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            public static void PathGlyphRange<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] T2[,,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="firstGlyph">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphRangeNV")]
            public static void PathGlyphRange<T2>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] ref T2 fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="charcodes">
            /// [length: COMPSIZE(numGlyphs,type,charcodes)]
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            public static void PathGlyph(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, int numGlyphs, OpenTK.Graphics.OpenGL4.PathElementType type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="charcodes">
            /// [length: COMPSIZE(numGlyphs,type,charcodes)]
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            public static void PathGlyph<T2, T6>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] T2[] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, int numGlyphs, OpenTK.Graphics.OpenGL4.PathElementType type, [InAttribute, OutAttribute, CountAttribute(Computed = "numGlyphs,type,charcodes")] T6[] charcodes, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="charcodes">
            /// [length: COMPSIZE(numGlyphs,type,charcodes)]
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            public static void PathGlyph<T2, T6>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] T2[,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, int numGlyphs, OpenTK.Graphics.OpenGL4.PathElementType type, [InAttribute, OutAttribute, CountAttribute(Computed = "numGlyphs,type,charcodes")] T6[,] charcodes, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="charcodes">
            /// [length: COMPSIZE(numGlyphs,type,charcodes)]
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            public static void PathGlyph<T2, T6>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] T2[,,] fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, int numGlyphs, OpenTK.Graphics.OpenGL4.PathElementType type, [InAttribute, OutAttribute, CountAttribute(Computed = "numGlyphs,type,charcodes")] T6[,,] charcodes, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontName">
            /// [length: COMPSIZE(fontTarget,fontName)]
            /// </param>
            /// <param name="fontStyle">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="charcodes">
            /// [length: COMPSIZE(numGlyphs,type,charcodes)]
            /// </param>
            /// <param name="handleMissingGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathGlyphsNV")]
            public static void PathGlyph<T2, T6>(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [InAttribute, OutAttribute, CountAttribute(Computed = "fontTarget,fontName")] ref T2 fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, int numGlyphs, OpenTK.Graphics.OpenGL4.PathElementType type, [InAttribute, OutAttribute, CountAttribute(Computed = "numGlyphs,type,charcodes")] ref T6 charcodes, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T2 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, int fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, int fontSize, [InAttribute, OutAttribute] T3[] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, int fontSize, [InAttribute, OutAttribute] T3[,] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, int fontSize, [InAttribute, OutAttribute] T3[,,] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, int fontSize, [InAttribute, OutAttribute] ref T3 fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontSize, [InAttribute, OutAttribute] T3[] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontSize, [InAttribute, OutAttribute] T3[,] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontSize, [InAttribute, OutAttribute] T3[,,] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="firstPathName">
            /// </param>
            /// <param name="fontTarget">
            /// </param>
            /// <param name="fontSize">
            /// </param>
            /// <param name="fontData">
            /// </param>
            /// <param name="faceIndex">
            /// </param>
            /// <param name="firstGlyphIndex">
            /// </param>
            /// <param name="numGlyphs">
            /// </param>
            /// <param name="pathParameterTemplate">
            /// </param>
            /// <param name="emScale">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathMemoryGlyphIndexArrayNV")]
            public static OpenTK.Graphics.OpenGL4.NvPathRendering PathMemoryGlyphIndexArray<T3>(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontSize, [InAttribute, OutAttribute] ref T3 fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfNV")]
            public static void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            public static void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            public static void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterfvNV")]
            public static unsafe void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameteriNV")]
            public static void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            public static void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            public static void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="value">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathParameterivNV")]
            public static unsafe void PathParameter(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="factor">
            /// </param>
            /// <param name="units">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilDepthOffsetNV")]
            public static void PathStencilDepthOffset(float factor, float units)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="func">
            /// </param>
            /// <param name="@ref">
            /// </param>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStencilFuncNV")]
            public static void PathStencilFunc(OpenTK.Graphics.OpenGL4.StencilFunction func, int @ref, uint mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="pathString">
            /// [length: length]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            public static void PathString(uint path, OpenTK.Graphics.OpenGL4.PathStringFormat format, int length, [CountAttribute(Parameter = "length")] IntPtr pathString)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="pathString">
            /// [length: length]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            public static void PathString<T3>(uint path, OpenTK.Graphics.OpenGL4.PathStringFormat format, int length, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] pathString)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="pathString">
            /// [length: length]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            public static void PathString<T3>(uint path, OpenTK.Graphics.OpenGL4.PathStringFormat format, int length, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] pathString)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="pathString">
            /// [length: length]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            public static void PathString<T3>(uint path, OpenTK.Graphics.OpenGL4.PathStringFormat format, int length, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] pathString)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="pathString">
            /// [length: length]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathStringNV")]
            public static void PathString<T3>(uint path, OpenTK.Graphics.OpenGL4.PathStringFormat format, int length, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 pathString)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[,] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[,,] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte[] commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T7 coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[,] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[,,] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] ref Byte commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T7 coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static unsafe void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static unsafe void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static unsafe void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[,] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static unsafe void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T7[,,] coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="commandStart">
            /// </param>
            /// <param name="commandsToDelete">
            /// </param>
            /// <param name="numCommands">
            /// </param>
            /// <param name="commands">
            /// [length: numCommands]
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCommandsNV")]
            public static unsafe void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T7 coords)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coordStart">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            public static void PathSubCoords(uint path, int coordStart, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coordStart">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            public static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T4[] coords)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coordStart">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            public static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T4[,] coords)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coordStart">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            public static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] T4[,,] coords)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="coordStart">
            /// </param>
            /// <param name="numCoords">
            /// </param>
            /// <param name="coordType">
            /// </param>
            /// <param name="coords">
            /// [length: COMPSIZE(numCoords,coordType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathSubCoordsNV")]
            public static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [InAttribute, OutAttribute, CountAttribute(Computed = "numCoords,coordType")] ref T4 coords)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="components">
            /// </param>
            /// <param name="coeffs">
            /// [length: COMPSIZE(genMode,components)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            public static void PathTexGen(OpenTK.Graphics.OpenGL4.PathColor texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode genMode, int components, [CountAttribute(Computed = "genMode,components")] float[] coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="components">
            /// </param>
            /// <param name="coeffs">
            /// [length: COMPSIZE(genMode,components)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            public static void PathTexGen(OpenTK.Graphics.OpenGL4.PathColor texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode genMode, int components, [CountAttribute(Computed = "genMode,components")] ref float coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="texCoordSet">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="components">
            /// </param>
            /// <param name="coeffs">
            /// [length: COMPSIZE(genMode,components)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPathTexGenNV")]
            public static unsafe void PathTexGen(OpenTK.Graphics.OpenGL4.PathColor texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode genMode, int components, [CountAttribute(Computed = "genMode,components")] float* coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="startSegment">
            /// </param>
            /// <param name="numSegments">
            /// </param>
            /// <param name="distance">
            /// </param>
            /// <param name="x">
            /// [length: 1]
            /// </param>
            /// <param name="y">
            /// [length: 1]
            /// </param>
            /// <param name="tangentX">
            /// [length: 1]
            /// </param>
            /// <param name="tangentY">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPointAlongPathNV")]
            public static bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, [OutAttribute, CountAttribute(Count = 1)] out float x, [OutAttribute, CountAttribute(Count = 1)] out float y, [OutAttribute, CountAttribute(Count = 1)] out float tangentX, [OutAttribute, CountAttribute(Count = 1)] out float tangentY)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="startSegment">
            /// </param>
            /// <param name="numSegments">
            /// </param>
            /// <param name="distance">
            /// </param>
            /// <param name="x">
            /// [length: 1]
            /// </param>
            /// <param name="y">
            /// [length: 1]
            /// </param>
            /// <param name="tangentX">
            /// [length: 1]
            /// </param>
            /// <param name="tangentY">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glPointAlongPathNV")]
            public static unsafe bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, [OutAttribute, CountAttribute(Count = 1)] float* x, [OutAttribute, CountAttribute(Count = 1)] float* y, [OutAttribute, CountAttribute(Count = 1)] float* tangentX, [OutAttribute, CountAttribute(Count = 1)] float* tangentY)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="components">
            /// </param>
            /// <param name="coeffs">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            public static void ProgramPathFragmentInputGen(uint program, int location, OpenTK.Graphics.OpenGL4.NvPathRendering genMode, int components, float[] coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="components">
            /// </param>
            /// <param name="coeffs">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            public static void ProgramPathFragmentInputGen(uint program, int location, OpenTK.Graphics.OpenGL4.NvPathRendering genMode, int components, ref float coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="genMode">
            /// </param>
            /// <param name="components">
            /// </param>
            /// <param name="coeffs">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glProgramPathFragmentInputGenNV")]
            public static unsafe void ProgramPathFragmentInputGen(uint program, int location, OpenTK.Graphics.OpenGL4.NvPathRendering genMode, int components, float* coeffs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64NV")]
            public static void ProgramUniform1(uint program, int location, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1i64vNV")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64NV")]
            public static void ProgramUniform1(uint program, int location, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform1ui64vNV")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64NV")]
            public static void ProgramUniform2(uint program, int location, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2i64vNV")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64NV")]
            public static void ProgramUniform2(uint program, int location, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform2ui64vNV")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64NV")]
            public static void ProgramUniform3(uint program, int location, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3i64vNV")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64NV")]
            public static void ProgramUniform3(uint program, int location, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform3ui64vNV")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64NV")]
            public static void ProgramUniform4(uint program, int location, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4i64vNV")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64NV")]
            public static void ProgramUniform4(uint program, int location, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glProgramUniform4ui64vNV")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64NV")]
            public static void ProgramUniformHandle(uint program, int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="values">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            public static void ProgramUniformHandle(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="values">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            public static void ProgramUniformHandle(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="values">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vNV")]
            public static unsafe void ProgramUniformHandle(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="value">
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64NV")]
            public static void ProgramUniform(uint program, int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64vNV")]
            public static void ProgramUniform(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64vNV")]
            public static void ProgramUniform(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glProgramUniformui64vNV")]
            public static unsafe void ProgramUniform(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_framebuffer_multisample_coverage]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="coverageSamples">
            /// </param>
            /// <param name="colorSamples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_multisample_coverage", Version = "", EntryPoint = "glRenderbufferStorageMultisampleCoverageNV")]
            public static void RenderbufferStorageMultisampleCoverage(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, int coverageSamples, int colorSamples, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_sample_locations]
            /// </summary>
            [AutoGenerated(Category = "NV_sample_locations", Version = "", EntryPoint = "glResolveDepthValuesNV")]
            public static void ResolveDepthValues()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glSecondaryColorFormatNV")]
            public static void SecondaryColorFormat(int size, OpenTK.Graphics.OpenGL4.ColorPointerType type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_draw_vulkan_image]
            /// </summary>
            /// <param name="vkFence">
            /// </param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glSignalVkFenceNV")]
            public static void SignalVkFence(ulong vkFence)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_draw_vulkan_image]
            /// </summary>
            /// <param name="vkSemaphore">
            /// </param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glSignalVkSemaphoreNV")]
            public static void SignalVkSemaphore(ulong vkSemaphore)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_command_list]
            /// </summary>
            /// <param name="state">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "NV_command_list", Version = "", EntryPoint = "glStateCaptureNV")]
            public static void StateCapture(uint state, OpenTK.Graphics.OpenGL4.NvCommandList mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static unsafe void StencilFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static unsafe void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static unsafe void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static unsafe void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathInstancedNV")]
            public static unsafe void StencilFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilFillPathNV")]
            public static void StencilFillPath(uint path, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static unsafe void StencilStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static unsafe void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static unsafe void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static unsafe void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] T2[,,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// [length: COMPSIZE(numPaths,pathNameType,paths)]
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(numPaths,transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathInstancedNV")]
            public static unsafe void StencilStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [InAttribute, OutAttribute, CountAttribute(Computed = "numPaths,pathNameType,paths")] ref T2 paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilStrokePathNV")]
            public static void StencilStrokePath(uint path, int reference, uint mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static unsafe void StencilThenCoverFillPathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static unsafe void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static unsafe void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static unsafe void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,,] paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathInstancedNV")]
            public static unsafe void StencilThenCoverFillPathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] ref T2 paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="fillMode">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverFillPathNV")]
            public static void StencilThenCoverFillPath(uint path, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static unsafe void StencilThenCoverStrokePathInstanced(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static unsafe void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static unsafe void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static unsafe void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] T2[,,] paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] ref T2 paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float[] transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] ref T2 paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, ref float transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="numPaths">
            /// </param>
            /// <param name="pathNameType">
            /// </param>
            /// <param name="paths">
            /// </param>
            /// <param name="pathBase">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathInstancedNV")]
            public static unsafe void StencilThenCoverStrokePathInstanced<T2>(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, [InAttribute, OutAttribute] ref T2 paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="path">
            /// </param>
            /// <param name="reference">
            /// </param>
            /// <param name="mask">
            /// </param>
            /// <param name="coverMode">
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glStencilThenCoverStrokePathNV")]
            public static void StencilThenCoverStrokePath(uint path, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_conservative_raster]
            /// </summary>
            /// <param name="xbits">
            /// </param>
            /// <param name="ybits">
            /// </param>
            [AutoGenerated(Category = "NV_conservative_raster", Version = "", EntryPoint = "glSubpixelPrecisionBiasNV")]
            public static void SubpixelPrecisionBia(uint xbits, uint ybits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glTexCoordFormatNV")]
            public static void TexCoordFormat(int size, OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_texture_barrier]
            /// </summary>
            [AutoGenerated(Category = "NV_texture_barrier", Version = "", EntryPoint = "glTextureBarrierNV")]
            public static void TextureBarrier()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="srcPath">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            public static void TransformPath(uint resultPath, uint srcPath, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "transformType")] float[] transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="srcPath">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            public static void TransformPath(uint resultPath, uint srcPath, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "transformType")] ref float transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="srcPath">
            /// </param>
            /// <param name="transformType">
            /// </param>
            /// <param name="transformValues">
            /// [length: COMPSIZE(transformType)]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glTransformPathNV")]
            public static unsafe void TransformPath(uint resultPath, uint srcPath, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "transformType")] float* transformValues)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64NV")]
            public static void Uniform1(int location, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1i64vNV")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64NV")]
            public static void Uniform1(int location, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform1ui64vNV")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64NV")]
            public static void Uniform2(int location, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2i64vNV")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64NV")]
            public static void Uniform2(int location, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform2ui64vNV")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64NV")]
            public static void Uniform3(int location, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3i64vNV")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64NV")]
            public static void Uniform3(int location, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform3ui64vNV")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64NV")]
            public static void Uniform4(int location, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] long[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref long value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4i64vNV")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] long* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64NV")]
            public static void Uniform4(int location, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_gpu_shader5]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_gpu_shader5", Version = "", EntryPoint = "glUniform4ui64vNV")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64NV")]
            public static void UniformHandle(int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            public static void UniformHandle(int location, int count, [CountAttribute(Parameter = "count")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            public static void UniformHandle(int location, int count, [CountAttribute(Parameter = "count")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_bindless_texture]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vNV")]
            public static unsafe void UniformHandle(int location, int count, [CountAttribute(Parameter = "count")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="value">
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64NV")]
            public static void Uniform(int location, ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64vNV")]
            public static void Uniform(int location, int count, [CountAttribute(Parameter = "count*1")] ulong[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64vNV")]
            public static void Uniform(int location, int count, [CountAttribute(Parameter = "count*1")] ref ulong value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_shader_buffer_load]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "NV_shader_buffer_load", Version = "", EntryPoint = "glUniformui64vNV")]
            public static unsafe void Uniform(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// Specify the organization of vertex arrays
            /// </summary>
            /// <param name="index">
            /// The generic vertex attribute array being described.
            /// </param>
            /// <param name="size">
            /// The number of values per vertex that are stored in the array.
            /// </param>
            /// <param name="type">
            /// The type of the data stored in the array.
            /// </param>
            /// <param name="normalized">
            /// The distance between elements within the buffer.
            /// </param>
            /// <param name="stride">
            /// The distance between elements within the buffer.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glVertexAttribFormatNV")]
            public static void VertexAttribFormat(uint index, int size, OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, bool normalized, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glVertexAttribIFormatNV")]
            public static void VertexAttribIFormat(uint index, int size, OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL1i64NV")]
            public static void VertexAttribL1(uint index, long x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL1i64vNV")]
            public static void VertexAttribL1(uint index, [CountAttribute(Count = 1)] ref long v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL1i64vNV")]
            public static unsafe void VertexAttribL1(uint index, [CountAttribute(Count = 1)] long* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL1ui64NV")]
            public static void VertexAttribL1(uint index, ulong x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL1ui64vNV")]
            public static void VertexAttribL1(uint index, [CountAttribute(Count = 1)] ref ulong v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL1ui64vNV")]
            public static unsafe void VertexAttribL1(uint index, [CountAttribute(Count = 1)] ulong* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2i64NV")]
            public static void VertexAttribL2(uint index, long x, long y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2i64vNV")]
            public static void VertexAttribL2(uint index, [CountAttribute(Count = 2)] long[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2i64vNV")]
            public static void VertexAttribL2(uint index, [CountAttribute(Count = 2)] ref long v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2i64vNV")]
            public static unsafe void VertexAttribL2(uint index, [CountAttribute(Count = 2)] long* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2ui64NV")]
            public static void VertexAttribL2(uint index, ulong x, ulong y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2ui64vNV")]
            public static void VertexAttribL2(uint index, [CountAttribute(Count = 2)] ulong[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2ui64vNV")]
            public static void VertexAttribL2(uint index, [CountAttribute(Count = 2)] ref ulong v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL2ui64vNV")]
            public static unsafe void VertexAttribL2(uint index, [CountAttribute(Count = 2)] ulong* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3i64NV")]
            public static void VertexAttribL3(uint index, long x, long y, long z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3i64vNV")]
            public static void VertexAttribL3(uint index, [CountAttribute(Count = 3)] long[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3i64vNV")]
            public static void VertexAttribL3(uint index, [CountAttribute(Count = 3)] ref long v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3i64vNV")]
            public static unsafe void VertexAttribL3(uint index, [CountAttribute(Count = 3)] long* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3ui64NV")]
            public static void VertexAttribL3(uint index, ulong x, ulong y, ulong z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3ui64vNV")]
            public static void VertexAttribL3(uint index, [CountAttribute(Count = 3)] ulong[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3ui64vNV")]
            public static void VertexAttribL3(uint index, [CountAttribute(Count = 3)] ref ulong v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL3ui64vNV")]
            public static unsafe void VertexAttribL3(uint index, [CountAttribute(Count = 3)] ulong* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4i64NV")]
            public static void VertexAttribL4(uint index, long x, long y, long z, long w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4i64vNV")]
            public static void VertexAttribL4(uint index, [CountAttribute(Count = 4)] long[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4i64vNV")]
            public static void VertexAttribL4(uint index, [CountAttribute(Count = 4)] ref long v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4i64vNV")]
            public static unsafe void VertexAttribL4(uint index, [CountAttribute(Count = 4)] long* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4ui64NV")]
            public static void VertexAttribL4(uint index, ulong x, ulong y, ulong z, ulong w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4ui64vNV")]
            public static void VertexAttribL4(uint index, [CountAttribute(Count = 4)] ulong[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4ui64vNV")]
            public static void VertexAttribL4(uint index, [CountAttribute(Count = 4)] ref ulong v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribL4ui64vNV")]
            public static unsafe void VertexAttribL4(uint index, [CountAttribute(Count = 4)] ulong* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_attrib_integer_64bit]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", Version = "", EntryPoint = "glVertexAttribLFormatNV")]
            public static void VertexAttribLFormat(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_buffer_unified_memory]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", Version = "", EntryPoint = "glVertexFormatNV")]
            public static void VertexFormat(int size, OpenTK.Graphics.OpenGL4.VertexPointerType type, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_clip_space_w_scaling]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="xcoeff">
            /// </param>
            /// <param name="ycoeff">
            /// </param>
            [AutoGenerated(Category = "NV_clip_space_w_scaling", Version = "", EntryPoint = "glViewportPositionWScaleNV")]
            public static void ViewportPositionWScale(uint index, float xcoeff, float ycoeff)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_swizzle]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="swizzlex">
            /// </param>
            /// <param name="swizzley">
            /// </param>
            /// <param name="swizzlez">
            /// </param>
            /// <param name="swizzlew">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_swizzle", Version = "", EntryPoint = "glViewportSwizzleNV")]
            public static void ViewportSwizzle(uint index, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzlex, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzley, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzlez, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzlew)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_draw_vulkan_image]
            /// </summary>
            /// <param name="vkSemaphore">
            /// </param>
            [AutoGenerated(Category = "NV_draw_vulkan_image", Version = "", EntryPoint = "glWaitVkSemaphoreNV")]
            public static void WaitVkSemaphore(ulong vkSemaphore)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="paths">
            /// [length: numPaths]
            /// </param>
            /// <param name="weights">
            /// [length: numPaths]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            public static void WeightPath(uint resultPath, int numPaths, [CountAttribute(Parameter = "numPaths")] uint[] paths, [CountAttribute(Parameter = "numPaths")] float[] weights)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="paths">
            /// [length: numPaths]
            /// </param>
            /// <param name="weights">
            /// [length: numPaths]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            public static void WeightPath(uint resultPath, int numPaths, [CountAttribute(Parameter = "numPaths")] ref uint paths, [CountAttribute(Parameter = "numPaths")] ref float weights)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_path_rendering]
            /// </summary>
            /// <param name="resultPath">
            /// </param>
            /// <param name="numPaths">
            /// </param>
            /// <param name="paths">
            /// [length: numPaths]
            /// </param>
            /// <param name="weights">
            /// [length: numPaths]
            /// </param>
            [AutoGenerated(Category = "NV_path_rendering", Version = "", EntryPoint = "glWeightPathsNV")]
            public static unsafe void WeightPath(uint resultPath, int numPaths, [CountAttribute(Parameter = "numPaths")] uint* paths, [CountAttribute(Parameter = "numPaths")] float* weights)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        public static partial class Ovr
        {
            /// <summary>
            /// [requires: OVR_multiview]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="baseViewIndex">
            /// </param>
            /// <param name="numViews">
            /// </param>
            [AutoGenerated(Category = "OVR_multiview", Version = "", EntryPoint = "glFramebufferTextureMultiviewOVR")]
            public static void FramebufferTextureMultiview(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int baseViewIndex, int numViews)
            {
                throw new BindingsNotRewrittenException();
            }
        }
        [Slot(8)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginPerfMonitorAMD(uint monitor);
        
        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeletePerfMonitorsAMD(int n, [CountAttribute(Parameter = "n")] uint* monitors);
        
        [Slot(271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndPerfMonitorAMD(uint monitor);
        
        [Slot(309)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenPerfMonitorsAMD(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* monitors);
        
        [Slot(486)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorCounterDataAMD(uint monitor, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, int dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] uint* data, [OutAttribute, CountAttribute(Count = 1)] int* bytesWritten);
        
        [Slot(487)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, OpenTK.Graphics.OpenGL4.AmdPerformanceMonitor pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr data);
        
        [Slot(489)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr counterString);
        
        [Slot(488)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorCountersAMD(uint group, [OutAttribute, CountAttribute(Count = 1)] int* numCounters, [OutAttribute, CountAttribute(Count = 1)] int* maxActiveCounters, int counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] uint* counters);
        
        [Slot(491)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr groupString);
        
        [Slot(490)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfMonitorGroupsAMD([OutAttribute, CountAttribute(Count = 1)] int* numGroups, int groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] uint* groups);
        
        [Slot(1012)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] uint* counterList);
        
        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparateiARB(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationModeExt modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationModeExt modeAlpha);
        
        [Slot(42)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationiARB(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode);
        
        [Slot(51)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparateiARB(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactor srcRGB, OpenTK.Graphics.OpenGL4.BlendingFactor dstRGB, OpenTK.Graphics.OpenGL4.BlendingFactor srcAlpha, OpenTK.Graphics.OpenGL4.BlendingFactor dstAlpha);
        
        [Slot(48)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunciARB(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactor src, OpenTK.Graphics.OpenGL4.BlendingFactor dst);
        
        [Slot(57)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferPageCommitmentARB(OpenTK.Graphics.OpenGL4.BufferTargetArb target, IntPtr offset, IntPtr size, bool commit);
        
        [Slot(103)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCompileShaderIncludeARB(uint shader, int count, [CountAttribute(Parameter = "count")] IntPtr path, [CountAttribute(Parameter = "count")] int* length);
        
        [Slot(179)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe IntPtr glCreateSyncFromCLeventARB([OutAttribute] IntPtr* context, [OutAttribute] IntPtr* @event, uint flags);
        
        [Slot(185)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallbackARB(DebugProcArb callback, [CountAttribute(Computed = "callback")] IntPtr userParam);
        
        [Slot(188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControlARB(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled);
        
        [Slot(191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsertARB(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Parameter = "length")] IntPtr buf);
        
        [Slot(196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteNamedStringARB(int namelen, [CountAttribute(Parameter = "namelen")] IntPtr name);
        
        [Slot(229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z);
        
        [Slot(234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedARB(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count, int primcount);
        
        [Slot(247)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedARB(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int primcount);
        
        [Slot(276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvaluateDepthValuesARB();
        
        [Slot(290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFramebufferSampleLocationsfvARB(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, float* v);
        
        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureARB(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level);
        
        [Slot(297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureFaceARB(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, OpenTK.Graphics.OpenGL4.TextureTarget face);
        
        [Slot(299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureLayerARB(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer);
        
        [Slot(352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe uint glGetDebugMessageLogARB(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        
        [Slot(370)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.GraphicsResetStatus glGetGraphicsResetStatusARB();
        
        [Slot(375)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ulong glGetImageHandleARB(uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL4.PixelFormat format);
        
        [Slot(423)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedStringARB(int namelen, [CountAttribute(Parameter = "namelen")] IntPtr name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* stringlen, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr @string);
        
        [Slot(424)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedStringivARB(int namelen, [CountAttribute(Parameter = "namelen")] IntPtr name, OpenTK.Graphics.OpenGL4.ArbShadingLanguageInclude pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(547)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ulong glGetTextureHandleARB(uint texture);
        
        [Slot(563)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ulong glGetTextureSamplerHandleARB(uint texture, uint sampler);
        
        [Slot(573)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformi64vARB(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long* @params);
        
        [Slot(579)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformui64vARB(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong* @params);
        
        [Slot(596)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribLui64vARB(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] ulong* @params);
        
        [Slot(426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnColorTableARB(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr table);
        
        [Slot(428)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnCompressedTexImageARB(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img);
        
        [Slot(430)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnConvolutionFilterARB(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr image);
        
        [Slot(433)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnHistogramARB(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values);
        
        [Slot(435)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnMapdvARB(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* v);
        
        [Slot(437)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnMapfvARB(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* v);
        
        [Slot(439)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnMapivARB(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* v);
        
        [Slot(441)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnMinmaxARB(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values);
        
        [Slot(443)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPixelMapfvARB(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* values);
        
        [Slot(445)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPixelMapuivARB(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* values);
        
        [Slot(447)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPixelMapusvARB(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] ushort* values);
        
        [Slot(449)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPolygonStippleARB(int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Byte* pattern);
        
        [Slot(451)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnSeparableFilterARB(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [OutAttribute, CountAttribute(Parameter = "rowBufSize")] IntPtr row, int columnBufSize, [OutAttribute, CountAttribute(Parameter = "columnBufSize")] IntPtr column, [OutAttribute, CountAttribute(Count = 0)] IntPtr span);
        
        [Slot(453)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnTexImageARB(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img);
        
        [Slot(455)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformdvARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] double* @params);
        
        [Slot(457)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfvARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] float* @params);
        
        [Slot(459)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformi64vARB(uint program, int location, int bufSize, [OutAttribute] long* @params);
        
        [Slot(461)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformivARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);
        
        [Slot(463)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformui64vARB(uint program, int location, int bufSize, [OutAttribute] ulong* @params);
        
        [Slot(465)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformuivARB(uint program, int location, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] uint* @params);
        
        [Slot(620)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsImageHandleResidentARB(ulong handle);
        
        [Slot(623)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsNamedStringARB(int namelen, [CountAttribute(Parameter = "namelen")] IntPtr name);
        
        [Slot(637)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTextureHandleResidentARB(ulong handle);
        
        [Slot(648)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeImageHandleNonResidentARB(ulong handle);
        
        [Slot(650)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeImageHandleResidentARB(ulong handle, OpenTK.Graphics.OpenGL4.ArbBindlessTexture access);
        
        [Slot(654)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeTextureHandleNonResidentARB(ulong handle);
        
        [Slot(656)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeTextureHandleResidentARB(ulong handle);
        
        [Slot(689)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaxShaderCompilerThreadsARB(uint count);
        
        [Slot(695)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMinSampleShadingARB(float value);
        
        [Slot(701)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawArraysIndirectCountARB(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride);
        
        [Slot(708)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawElementsIndirectCountARB(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride);
        
        [Slot(744)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferPageCommitmentARB(uint buffer, IntPtr offset, IntPtr size, bool commit);
        
        [Slot(758)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v);
        
        [Slot(785)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedStringARB(OpenTK.Graphics.OpenGL4.ArbShadingLanguageInclude type, int namelen, [CountAttribute(Parameter = "namelen")] IntPtr name, int stringlen, [CountAttribute(Parameter = "stringlen")] IntPtr @string);
        
        [Slot(832)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        
        [Slot(836)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramParameteriARB(uint program, OpenTK.Graphics.OpenGL4.AssemblyProgramParameterArb pname, int value);
        
        [Slot(848)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1i64ARB(uint program, int location, long x);
        
        [Slot(850)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1i64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count")] long* value);
        
        [Slot(856)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1ui64ARB(uint program, int location, ulong x);
        
        [Slot(858)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1ui64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value);
        
        [Slot(872)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2i64ARB(uint program, int location, long x, long y);
        
        [Slot(874)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2i64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long* value);
        
        [Slot(880)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y);
        
        [Slot(882)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2ui64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value);
        
        [Slot(896)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z);
        
        [Slot(898)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3i64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long* value);
        
        [Slot(904)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z);
        
        [Slot(906)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3ui64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value);
        
        [Slot(920)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w);
        
        [Slot(922)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4i64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long* value);
        
        [Slot(928)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w);
        
        [Slot(930)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4ui64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value);
        
        [Slot(935)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniformHandleui64ARB(uint program, int location, ulong value);
        
        [Slot(937)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformHandleui64vARB(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* values);
        
        [Slot(986)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixelsARB(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        
        [Slot(1020)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSpecializeShaderARB(uint shader, IntPtr pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);
        
        [Slot(1038)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBufferARB(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, uint buffer);
        
        [Slot(1054)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexPageCommitmentARB(OpenTK.Graphics.OpenGL4.ArbSparseTexture target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        
        [Slot(1118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1i64ARB(int location, long x);
        
        [Slot(1120)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1i64vARB(int location, int count, [CountAttribute(Parameter = "count*1")] long* value);
        
        [Slot(1124)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1ui64ARB(int location, ulong x);
        
        [Slot(1126)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1ui64vARB(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value);
        
        [Slot(1134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2i64ARB(int location, long x, long y);
        
        [Slot(1136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2i64vARB(int location, int count, [CountAttribute(Parameter = "count*2")] long* value);
        
        [Slot(1140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2ui64ARB(int location, ulong x, ulong y);
        
        [Slot(1142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2ui64vARB(int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value);
        
        [Slot(1150)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3i64ARB(int location, long x, long y, long z);
        
        [Slot(1152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3i64vARB(int location, int count, [CountAttribute(Parameter = "count*3")] long* value);
        
        [Slot(1156)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z);
        
        [Slot(1158)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3ui64vARB(int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value);
        
        [Slot(1166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4i64ARB(int location, long x, long y, long z, long w);
        
        [Slot(1168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4i64vARB(int location, int count, [CountAttribute(Parameter = "count*4")] long* value);
        
        [Slot(1172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w);
        
        [Slot(1174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4ui64vARB(int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value);
        
        [Slot(1178)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformHandleui64ARB(int location, ulong value);
        
        [Slot(1180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformHandleui64vARB(int location, int count, [CountAttribute(Parameter = "count")] ulong* value);
        
        [Slot(1278)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribDivisorARB(uint index, uint divisor);
        
        [Slot(1308)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL1ui64ARB(uint index, ulong x);
        
        [Slot(1310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL1ui64vARB(uint index, ulong* v);
        
        [Slot(4)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glApplyFramebufferAttachmentCMAAINTEL();
        
        [Slot(1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveShaderProgram(uint pipeline, uint program);
        
        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveTexture(OpenTK.Graphics.OpenGL4.TextureUnit texture);
        
        [Slot(5)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAttachShader(uint program, uint shader);
        
        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginConditionalRender(uint id, OpenTK.Graphics.OpenGL4.ConditionalRenderType mode);
        
        [Slot(10)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, uint id);
        
        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, uint id);
        
        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackPrimitiveType primitiveMode);
        
        [Slot(13)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindAttribLocation(uint program, uint index, IntPtr name);
        
        [Slot(14)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, uint buffer);
        
        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBufferBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint index, uint buffer);
        
        [Slot(16)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBufferRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size);
        
        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers);
        
        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes);
        
        [Slot(19)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFragDataLocation(uint program, uint color, [CountAttribute(Computed = "name")] IntPtr name);
        
        [Slot(20)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, IntPtr name);
        
        [Slot(21)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint framebuffer);
        
        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL4.TextureAccess access, OpenTK.Graphics.OpenGL4.SizedInternalFormat format);
        
        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindImageTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures);
        
        [Slot(25)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindProgramPipeline(uint pipeline);
        
        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindRenderbuffer(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, uint renderbuffer);
        
        [Slot(28)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindSampler(uint unit, uint sampler);
        
        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindSamplers(uint first, int count, [CountAttribute(Parameter = "count")] uint* samplers);
        
        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTexture(OpenTK.Graphics.OpenGL4.TextureTarget target, uint texture);
        
        [Slot(32)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTextureUnit(uint unit, uint texture);
        
        [Slot(31)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindTextures(uint first, int count, [CountAttribute(Parameter = "count")] uint* textures);
        
        [Slot(33)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackTarget target, uint id);
        
        [Slot(34)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexArray(uint array);
        
        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride);
        
        [Slot(36)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBindVertexBuffers(uint first, int count, [CountAttribute(Parameter = "count")] uint* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] int* strides);
        
        [Slot(39)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendColor(float red, float green, float blue, float alpha);
        
        [Slot(40)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquation(OpenTK.Graphics.OpenGL4.BlendEquationMode mode);
        
        [Slot(43)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparate(OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha);
        
        [Slot(44)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparatei(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha);
        
        [Slot(41)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationi(uint buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode);
        
        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunc(OpenTK.Graphics.OpenGL4.BlendingFactor sfactor, OpenTK.Graphics.OpenGL4.BlendingFactor dfactor);
        
        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparate(OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorAlpha);
        
        [Slot(50)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparatei(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstAlpha);
        
        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunci(uint buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc src, OpenTK.Graphics.OpenGL4.BlendingFactorDest dst);
        
        [Slot(53)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, OpenTK.Graphics.OpenGL4.ClearBufferMask mask, OpenTK.Graphics.OpenGL4.BlitFramebufferFilter filter);
        
        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, OpenTK.Graphics.OpenGL4.ClearBufferMask mask, OpenTK.Graphics.OpenGL4.BlitFramebufferFilter filter);
        
        [Slot(56)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage);
        
        [Slot(58)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferStorage(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags);
        
        [Slot(59)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);
        
        [Slot(61)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.FramebufferErrorCode glCheckFramebufferStatus(OpenTK.Graphics.OpenGL4.FramebufferTarget target);
        
        [Slot(62)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.FramebufferStatus glCheckNamedFramebufferStatus(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferTarget target);
        
        [Slot(64)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClampColor(OpenTK.Graphics.OpenGL4.ClampColorTarget target, OpenTK.Graphics.OpenGL4.ClampColorMode clamp);
        
        [Slot(65)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClear(OpenTK.Graphics.OpenGL4.ClearBufferMask mask);
        
        [Slot(66)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearBufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);
        
        [Slot(70)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);
        
        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearBufferfi(OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, int drawbuffer, float depth, int stencil);
        
        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferfv(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] float* value);
        
        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferiv(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] int* value);
        
        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearBufferuiv(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, [CountAttribute(Computed = "buffer")] uint* value);
        
        [Slot(72)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColor(float red, float green, float blue, float alpha);
        
        [Slot(73)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepth(double depth);
        
        [Slot(74)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthf(float d);
        
        [Slot(75)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearNamedBufferData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);
        
        [Slot(77)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);
        
        [Slot(79)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearNamedFramebufferfi(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, int drawbuffer, float depth, int stencil);
        
        [Slot(80)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearNamedFramebufferfv(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, float* value);
        
        [Slot(81)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearNamedFramebufferiv(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, int* value);
        
        [Slot(82)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClearNamedFramebufferuiv(uint framebuffer, OpenTK.Graphics.OpenGL4.ClearBuffer buffer, int drawbuffer, uint* value);
        
        [Slot(83)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearStencil(int s);
        
        [Slot(84)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearTexImage(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);
        
        [Slot(85)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);
        
        [Slot(87)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.WaitSyncStatus glClientWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.ClientWaitSyncFlags flags, ulong timeout);
        
        [Slot(88)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClipControl(OpenTK.Graphics.OpenGL4.ClipOrigin origin, OpenTK.Graphics.OpenGL4.ClipDepthMode depth);
        
        [Slot(90)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMask(bool red, bool green, bool blue, bool alpha);
        
        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMaski(uint index, bool r, bool g, bool b, bool a);
        
        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorP3ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint color);
        
        [Slot(93)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColorP3uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* color);
        
        [Slot(94)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorP4ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint color);
        
        [Slot(95)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColorP4uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* color);
        
        [Slot(96)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,count")] IntPtr data);
        
        [Slot(97)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr table);
        
        [Slot(98)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColorTableParameterfv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColorTableParameteriv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompileShader(uint shader);
        
        [Slot(110)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        
        [Slot(111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        
        [Slot(112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        
        [Slot(113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        
        [Slot(114)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        
        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        
        [Slot(119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, IntPtr data);
        
        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, IntPtr data);
        
        [Slot(123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, IntPtr data);
        
        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image);
        
        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image);
        
        [Slot(129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionParameterf(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, float @params);
        
        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glConvolutionParameterfv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConvolutionParameteri(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, int @params);
        
        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glConvolutionParameteriv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(133)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget readTarget, OpenTK.Graphics.OpenGL4.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        
        [Slot(134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, int start, int x, int y, int width);
        
        [Slot(135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width);
        
        [Slot(136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width);
        
        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height);
        
        [Slot(138)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyImageSubData(uint srcName, OpenTK.Graphics.OpenGL4.ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, OpenTK.Graphics.OpenGL4.ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        
        [Slot(144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        
        [Slot(146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int border);
        
        [Slot(147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height, int border);
        
        [Slot(148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int x, int y, int width);
        
        [Slot(149)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        
        [Slot(150)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        
        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);
        
        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        
        [Slot(157)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        
        [Slot(165)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);
        
        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers);
        
        [Slot(169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateProgram();
        
        [Slot(170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines);
        
        [Slot(171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateQueries(OpenTK.Graphics.OpenGL4.QueryTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);
        
        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers);
        
        [Slot(173)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateSamplers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* samplers);
        
        [Slot(174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateShader(OpenTK.Graphics.OpenGL4.ShaderType type);
        
        [Slot(176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateShaderProgramv(OpenTK.Graphics.OpenGL4.ShaderType type, int count, [CountAttribute(Parameter = "count")] IntPtr strings);
        
        [Slot(180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateTextures(OpenTK.Graphics.OpenGL4.TextureTarget target, int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures);
        
        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);
        
        [Slot(182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays);
        
        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCullFace(OpenTK.Graphics.OpenGL4.CullFaceMode mode);
        
        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallback(DebugProc callback, IntPtr userParam);
        
        [Slot(187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, int count, [CountAttribute(Parameter = "count")] uint* ids, bool enabled);
        
        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, [CountAttribute(Computed = "buf,length")] IntPtr buf);
        
        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers);
        
        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers);
        
        [Slot(200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteProgram(uint program);
        
        [Slot(201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint* pipelines);
        
        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteQueries(int n, [CountAttribute(Parameter = "n")] uint* ids);
        
        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers);
        
        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteSamplers(int count, [CountAttribute(Parameter = "count")] uint* samplers);
        
        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteShader(uint shader);
        
        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteSync(IntPtr sync);
        
        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures);
        
        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] uint* ids);
        
        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint* arrays);
        
        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthFunc(OpenTK.Graphics.OpenGL4.DepthFunction func);
        
        [Slot(213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthMask(bool flag);
        
        [Slot(214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRange(double near, double far);
        
        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDepthRangeArrayv(uint first, int count, [CountAttribute(Computed = "count")] double* v);
        
        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangeIndexed(uint index, double n, double f);
        
        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangef(float n, float f);
        
        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDetachShader(uint program, uint shader);
        
        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisable(OpenTK.Graphics.OpenGL4.EnableCap cap);
        
        [Slot(224)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableVertexArrayAttrib(uint vaobj, uint index);
        
        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableVertexAttribArray(uint index);
        
        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisablei(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);
        
        [Slot(228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        
        [Slot(230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDispatchComputeIndirect(IntPtr indirect);
        
        [Slot(231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count);
        
        [Slot(232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect);
        
        [Slot(233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count, int instancecount);
        
        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int first, int count, int instancecount, uint baseinstance);
        
        [Slot(237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawBuffer(OpenTK.Graphics.OpenGL4.DrawBufferMode buf);
        
        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawBuffers(int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL4.DrawBuffersEnum* bufs);
        
        [Slot(243)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices);
        
        [Slot(244)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int basevertex);
        
        [Slot(245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect);
        
        [Slot(246)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int instancecount);
        
        [Slot(248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, int instancecount, uint baseinstance);
        
        [Slot(249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int instancecount, int basevertex);
        
        [Slot(250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, int instancecount, int basevertex, uint baseinstance);
        
        [Slot(252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawRangeElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices);
        
        [Slot(253)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawRangeElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint start, uint end, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int basevertex);
        
        [Slot(254)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedback(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id);
        
        [Slot(255)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedbackInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, int instancecount);
        
        [Slot(256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedbackStream(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, uint stream);
        
        [Slot(257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawTransformFeedbackStreamInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, uint id, uint stream, int instancecount);
        
        [Slot(260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnable(OpenTK.Graphics.OpenGL4.EnableCap cap);
        
        [Slot(265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableVertexArrayAttrib(uint vaobj, uint index);
        
        [Slot(268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableVertexAttribArray(uint index);
        
        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnablei(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);
        
        [Slot(269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndConditionalRender();
        
        [Slot(273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndQuery(OpenTK.Graphics.OpenGL4.QueryTarget target);
        
        [Slot(274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index);
        
        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndTransformFeedback();
        
        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glFenceSync(OpenTK.Graphics.OpenGL4.SyncCondition condition, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags);
        
        [Slot(278)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinish();
        
        [Slot(279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlush();
        
        [Slot(280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlushMappedBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr length);
        
        [Slot(281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlushMappedNamedBufferRange(uint buffer, IntPtr offset, IntPtr length);
        
        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferParameteri(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, int param);
        
        [Slot(289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferRenderbuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, uint renderbuffer);
        
        [Slot(292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level);
        
        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture1D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level);
        
        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level);
        
        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture3D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level, int zoffset);
        
        [Slot(298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureLayer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer);
        
        [Slot(301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrontFace(OpenTK.Graphics.OpenGL4.FrontFaceDirection mode);
        
        [Slot(302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);
        
        [Slot(307)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers);
        
        [Slot(310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines);
        
        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);
        
        [Slot(313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers);
        
        [Slot(314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenSamplers(int count, [OutAttribute, CountAttribute(Parameter = "count")] uint* samplers);
        
        [Slot(315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures);
        
        [Slot(316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);
        
        [Slot(317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays);
        
        [Slot(303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateMipmap(OpenTK.Graphics.OpenGL4.GenerateMipmapTarget target);
        
        [Slot(305)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateTextureMipmap(uint texture);
        
        [Slot(318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(319)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveAttrib(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        
        [Slot(320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveSubroutineName(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, int bufsize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] IntPtr name);
        
        [Slot(322)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveSubroutineUniformName(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, int bufsize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] IntPtr name);
        
        [Slot(321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveSubroutineUniformiv(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, uint index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* values);
        
        [Slot(323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniform(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        
        [Slot(325)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr uniformBlockName);
        
        [Slot(324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] int* @params);
        
        [Slot(326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr uniformName);
        
        [Slot(327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniformsiv(uint program, int uniformCount, [CountAttribute(Parameter = "uniformCount")] uint* uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] int* @params);
        
        [Slot(328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] int* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint* shaders);
        
        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetAttribLocation(uint program, IntPtr name);
        
        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleani_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data);
        
        [Slot(332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanv(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);
        
        [Slot(333)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteri64v(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] long* @params);
        
        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteriv(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferPointerv(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        
        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data);
        
        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr table);
        
        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetColorTableParameterfv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetColorTableParameteriv(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(343)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img);
        
        [Slot(344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetCompressedTextureImage(uint texture, int level, int bufSize, [OutAttribute] IntPtr pixels);
        
        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, [OutAttribute] IntPtr pixels);
        
        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image);
        
        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetConvolutionParameterfv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetConvolutionParameteriv(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe uint glGetDebugMessageLog(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        
        [Slot(354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDoublei_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data);
        
        [Slot(357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDoublev(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] double* data);
        
        [Slot(358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.ErrorCode glGetError();
        
        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloati_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data);
        
        [Slot(363)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatv(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data);
        
        [Slot(364)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetFragDataIndex(uint program, IntPtr name);
        
        [Slot(365)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetFragDataLocation(uint program, [CountAttribute(Computed = "name")] IntPtr name);
        
        [Slot(366)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferAttachmentParameteriv(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(367)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferParameteriv(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(369)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.ResetStatus glGetGraphicsResetStatus();
        
        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);
        
        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetHistogramParameterfv(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetHistogramParameteriv(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(377)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64i_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] long* data);
        
        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInteger64v(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] long* data);
        
        [Slot(379)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegeri_v(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] int* data);
        
        [Slot(383)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerv(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data);
        
        [Slot(384)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInternalformati64v(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] long* @params);
        
        [Slot(385)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInternalformativ(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);
        
        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);
        
        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMinmaxParameterfv(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(389)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMinmaxParameteriv(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(390)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultisamplefv(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* val);
        
        [Slot(403)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedBufferParameteri64v(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] long* @params);
        
        [Slot(404)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedBufferParameteriv(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] int* @params);
        
        [Slot(407)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetNamedBufferPointerv(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute] IntPtr @params);
        
        [Slot(409)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data);
        
        [Slot(411)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] int* @params);
        
        [Slot(413)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedFramebufferParameteriv(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] int* param);
        
        [Slot(421)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedRenderbufferParameteriv(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] int* @params);
        
        [Slot(467)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        
        [Slot(470)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabel(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        
        [Slot(497)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointerv(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        
        [Slot(499)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramBinary(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary);
        
        [Slot(500)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramInfoLog(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        
        [Slot(501)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramInterfaceiv(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(503)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        
        [Slot(505)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineiv(uint pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(508)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGetProgramResourceIndex(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, [CountAttribute(Computed = "name")] IntPtr name);
        
        [Slot(510)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetProgramResourceLocation(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, [CountAttribute(Computed = "name")] IntPtr name);
        
        [Slot(511)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetProgramResourceLocationIndex(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, [CountAttribute(Computed = "name")] IntPtr name);
        
        [Slot(512)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramResourceName(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        
        [Slot(509)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramResourceiv(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] OpenTK.Graphics.OpenGL4.ProgramProperty* props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);
        
        [Slot(513)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramStageiv(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] int* values);
        
        [Slot(502)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramiv(uint program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(514)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetQueryBufferObjecti64v(uint id, uint buffer, OpenTK.Graphics.OpenGL4.QueryObjectParameterName pname, IntPtr offset);
        
        [Slot(518)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryIndexediv(OpenTK.Graphics.OpenGL4.QueryTarget target, uint index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(520)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjecti64v(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] long* @params);
        
        [Slot(521)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectiv(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(522)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectui64v(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params);
        
        [Slot(523)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryObjectuiv(uint id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(519)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetQueryiv(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(524)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetRenderbufferParameteriv(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(526)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(527)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterIuiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(525)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameterfv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(528)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSamplerParameteriv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(529)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span);
        
        [Slot(530)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderInfoLog(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        
        [Slot(532)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] int* range, [OutAttribute, CountAttribute(Count = 1)] int* precision);
        
        [Slot(533)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderSource(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr source);
        
        [Slot(531)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderiv(uint shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(535)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetString(OpenTK.Graphics.OpenGL4.StringName name);
        
        [Slot(536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetStringi(OpenTK.Graphics.OpenGL4.StringNameIndexed name, uint index);
        
        [Slot(537)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGetSubroutineIndex(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, IntPtr name);
        
        [Slot(538)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetSubroutineUniformLocation(uint program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, IntPtr name);
        
        [Slot(539)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetSynciv(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values);
        
        [Slot(540)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);
        
        [Slot(541)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameterfv(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(542)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameteriv(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(544)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(545)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterIuiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(543)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterfv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(546)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameteriv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(549)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetTextureImage(uint texture, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr pixels);
        
        [Slot(551)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureLevelParameterfv(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] float* @params);
        
        [Slot(553)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureLevelParameteriv(uint texture, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int* @params);
        
        [Slot(557)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterIiv(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int* @params);
        
        [Slot(559)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterIuiv(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] uint* @params);
        
        [Slot(555)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterfv(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] float* @params);
        
        [Slot(561)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameteriv(uint texture, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] int* @params);
        
        [Slot(565)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr pixels);
        
        [Slot(569)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL4.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        
        [Slot(567)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTransformFeedbacki64_v(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] long* param);
        
        [Slot(566)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTransformFeedbacki_v(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackIndexedParameter pname, uint index, [OutAttribute] int* param);
        
        [Slot(568)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTransformFeedbackiv(uint xfb, OpenTK.Graphics.OpenGL4.TransformFeedbackParameter pname, [OutAttribute] int* param);
        
        [Slot(570)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGetUniformBlockIndex(uint program, [CountAttribute(Computed = "")] IntPtr uniformBlockName);
        
        [Slot(575)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformIndices(uint program, int uniformCount, [CountAttribute(Computed = "uniformCount")] IntPtr uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] uint* uniformIndices);
        
        [Slot(577)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetUniformLocation(uint program, IntPtr name);
        
        [Slot(578)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformSubroutineuiv(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int location, [OutAttribute, CountAttribute(Count = 1)] uint* @params);
        
        [Slot(571)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformdv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] double* @params);
        
        [Slot(572)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformfv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] float* @params);
        
        [Slot(576)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformiv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] int* @params);
        
        [Slot(581)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformuiv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint* @params);
        
        [Slot(582)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexArrayIndexed64iv(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexed64Parameter pname, [OutAttribute] long* param);
        
        [Slot(583)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexArrayIndexediv(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayIndexedParameter pname, [OutAttribute] int* param);
        
        [Slot(586)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexArrayiv(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayParameter pname, [OutAttribute] int* param);
        
        [Slot(591)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribIiv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] int* @params);
        
        [Slot(592)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribIuiv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] uint* @params);
        
        [Slot(594)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribLdv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params);
        
        [Slot(598)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetVertexAttribPointerv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer);
        
        [Slot(589)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribdv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] double* @params);
        
        [Slot(590)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribfv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] float* @params);
        
        [Slot(593)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribiv(uint index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] int* @params);
        
        [Slot(425)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr table);
        
        [Slot(427)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, int bufSize, [OutAttribute] IntPtr pixels);
        
        [Slot(429)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr image);
        
        [Slot(432)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr values);
        
        [Slot(434)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnMapdv(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] double* v);
        
        [Slot(436)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnMapfv(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] float* v);
        
        [Slot(438)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnMapiv(OpenTK.Graphics.OpenGL4.MapTarget target, OpenTK.Graphics.OpenGL4.MapQuery query, int bufSize, [OutAttribute] int* v);
        
        [Slot(440)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr values);
        
        [Slot(442)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPixelMapfv(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] float* values);
        
        [Slot(444)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPixelMapuiv(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] uint* values);
        
        [Slot(446)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPixelMapusv(OpenTK.Graphics.OpenGL4.PixelMap map, int bufSize, [OutAttribute] ushort* values);
        
        [Slot(448)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnPolygonStipple(int bufSize, [OutAttribute] Byte* pattern);
        
        [Slot(450)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int rowBufSize, [OutAttribute] IntPtr row, int columnBufSize, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span);
        
        [Slot(452)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetnTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr pixels);
        
        [Slot(454)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformdv(uint program, int location, int bufSize, [OutAttribute] double* @params);
        
        [Slot(456)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfv(uint program, int location, int bufSize, [OutAttribute] float* @params);
        
        [Slot(460)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformiv(uint program, int location, int bufSize, [OutAttribute] int* @params);
        
        [Slot(464)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformuiv(uint program, int location, int bufSize, [OutAttribute] uint* @params);
        
        [Slot(600)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHint(OpenTK.Graphics.OpenGL4.HintTarget target, OpenTK.Graphics.OpenGL4.HintMode mode);
        
        [Slot(601)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target, int width, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink);
        
        [Slot(605)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInvalidateBufferData(uint buffer);
        
        [Slot(606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length);
        
        [Slot(607)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glInvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments);
        
        [Slot(608)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments);
        
        [Slot(609)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments, int x, int y, int width, int height);
        
        [Slot(610)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glInvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, int numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments, int x, int y, int width, int height);
        
        [Slot(611)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInvalidateTexImage(uint texture, int level);
        
        [Slot(612)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        
        [Slot(613)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBuffer(uint buffer);
        
        [Slot(616)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabled(OpenTK.Graphics.OpenGL4.EnableCap cap);
        
        [Slot(617)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabledi(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);
        
        [Slot(619)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsFramebuffer(uint framebuffer);
        
        [Slot(627)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgram(uint program);
        
        [Slot(628)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgramPipeline(uint pipeline);
        
        [Slot(630)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsQuery(uint id);
        
        [Slot(631)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsRenderbuffer(uint renderbuffer);
        
        [Slot(632)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSampler(uint sampler);
        
        [Slot(633)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsShader(uint shader);
        
        [Slot(635)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsSync(IntPtr sync);
        
        [Slot(636)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTexture(uint texture);
        
        [Slot(639)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTransformFeedback(uint id);
        
        [Slot(640)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsVertexArray(uint array);
        
        [Slot(642)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidth(float width);
        
        [Slot(643)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLinkProgram(uint program);
        
        [Slot(645)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLogicOp(OpenTK.Graphics.OpenGL4.LogicOp opcode);
        
        [Slot(658)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferAccess access);
        
        [Slot(659)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access);
        
        [Slot(660)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapNamedBuffer(uint buffer, OpenTK.Graphics.OpenGL4.BufferAccess access);
        
        [Slot(662)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapNamedBufferRange(uint buffer, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access);
        
        [Slot(691)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags barriers);
        
        [Slot(692)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMemoryBarrierByRegion(OpenTK.Graphics.OpenGL4.MemoryBarrierRegionFlags barriers);
        
        [Slot(694)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMinSampleShading(float value);
        
        [Slot(693)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, bool sink);
        
        [Slot(696)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "count")] int* first, [CountAttribute(Computed = "drawcount")] int* count, int drawcount);
        
        [Slot(697)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawArraysIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, int drawcount, int stride);
        
        [Slot(700)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawArraysIndirectCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride);
        
        [Slot(702)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount);
        
        [Slot(703)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount, [CountAttribute(Computed = "drawcount")] int* basevertex);
        
        [Slot(704)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawElementsIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, int drawcount, int stride);
        
        [Slot(707)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawElementsIndirectCount(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.Version46 type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride);
        
        [Slot(710)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoordP1ui(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(711)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoordP1uiv(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(712)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoordP2ui(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(713)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoordP2uiv(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(714)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoordP3ui(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(715)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoordP3uiv(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(716)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoordP4ui(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(717)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoordP4uiv(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(742)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferData(uint buffer, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage);
        
        [Slot(746)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags);
        
        [Slot(748)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data);
        
        [Slot(751)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferDrawBuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.DrawBufferMode buf);
        
        [Slot(752)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedFramebufferDrawBuffers(uint framebuffer, int n, OpenTK.Graphics.OpenGL4.DrawBuffersEnum* bufs);
        
        [Slot(753)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferParameteri(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, int param);
        
        [Slot(755)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferReadBuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.ReadBufferMode src);
        
        [Slot(756)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferRenderbuffer(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, uint renderbuffer);
        
        [Slot(760)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTexture(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level);
        
        [Slot(766)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTextureLayer(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer);
        
        [Slot(780)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height);
        
        [Slot(782)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height);
        
        [Slot(787)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormalP3ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(788)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormalP3uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(789)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, uint name, int length, [CountAttribute(Computed = "label,length")] IntPtr label);
        
        [Slot(791)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabel(IntPtr ptr, int length, [CountAttribute(Computed = "label,length")] IntPtr label);
        
        [Slot(793)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPatchParameterfv(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] float* values);
        
        [Slot(794)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPatchParameteri(OpenTK.Graphics.OpenGL4.PatchParameterInt pname, int value);
        
        [Slot(816)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPauseTransformFeedback();
        
        [Slot(817)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStoref(OpenTK.Graphics.OpenGL4.PixelStoreParameter pname, float param);
        
        [Slot(818)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorei(OpenTK.Graphics.OpenGL4.PixelStoreParameter pname, int param);
        
        [Slot(820)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterf(OpenTK.Graphics.OpenGL4.PointParameterName pname, float param);
        
        [Slot(821)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterfv(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(822)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameteri(OpenTK.Graphics.OpenGL4.PointParameterName pname, int param);
        
        [Slot(823)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameteriv(OpenTK.Graphics.OpenGL4.PointParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(824)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSize(float size);
        
        [Slot(825)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonMode(OpenTK.Graphics.OpenGL4.MaterialFace face, OpenTK.Graphics.OpenGL4.PolygonMode mode);
        
        [Slot(826)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffset(float factor, float units);
        
        [Slot(827)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffsetClamp(float factor, float units, float clamp);
        
        [Slot(829)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroup();
        
        [Slot(833)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPrimitiveRestartIndex(uint index);
        
        [Slot(834)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramBinary(uint program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, int length);
        
        [Slot(835)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramParameteri(uint program, OpenTK.Graphics.OpenGL4.ProgramParameterName pname, int value);
        
        [Slot(839)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1d(uint program, int location, double v0);
        
        [Slot(841)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1dv(uint program, int location, int count, [CountAttribute(Parameter = "count")] double* value);
        
        [Slot(843)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1f(uint program, int location, float v0);
        
        [Slot(845)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1fv(uint program, int location, int count, [CountAttribute(Parameter = "count")] float* value);
        
        [Slot(847)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1i(uint program, int location, int v0);
        
        [Slot(853)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1iv(uint program, int location, int count, [CountAttribute(Parameter = "count")] int* value);
        
        [Slot(855)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1ui(uint program, int location, uint v0);
        
        [Slot(861)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1uiv(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint* value);
        
        [Slot(863)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2d(uint program, int location, double v0, double v1);
        
        [Slot(865)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2dv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double* value);
        
        [Slot(867)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2f(uint program, int location, float v0, float v1);
        
        [Slot(869)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2fv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float* value);
        
        [Slot(871)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2i(uint program, int location, int v0, int v1);
        
        [Slot(877)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2iv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int* value);
        
        [Slot(879)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2ui(uint program, int location, uint v0, uint v1);
        
        [Slot(885)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2uiv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint* value);
        
        [Slot(887)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3d(uint program, int location, double v0, double v1, double v2);
        
        [Slot(889)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3dv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double* value);
        
        [Slot(891)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3f(uint program, int location, float v0, float v1, float v2);
        
        [Slot(893)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3fv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float* value);
        
        [Slot(895)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3i(uint program, int location, int v0, int v1, int v2);
        
        [Slot(901)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3iv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int* value);
        
        [Slot(903)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);
        
        [Slot(909)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3uiv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint* value);
        
        [Slot(911)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);
        
        [Slot(913)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4dv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double* value);
        
        [Slot(915)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);
        
        [Slot(917)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4fv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float* value);
        
        [Slot(919)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);
        
        [Slot(925)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4iv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int* value);
        
        [Slot(927)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        
        [Slot(933)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4uiv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint* value);
        
        [Slot(939)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value);
        
        [Slot(941)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value);
        
        [Slot(943)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);
        
        [Slot(945)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);
        
        [Slot(947)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);
        
        [Slot(949)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);
        
        [Slot(951)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value);
        
        [Slot(953)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value);
        
        [Slot(955)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);
        
        [Slot(957)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);
        
        [Slot(959)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);
        
        [Slot(961)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        
        [Slot(963)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value);
        
        [Slot(965)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value);
        
        [Slot(967)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);
        
        [Slot(969)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);
        
        [Slot(971)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);
        
        [Slot(973)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        
        [Slot(977)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProvokingVertex(OpenTK.Graphics.OpenGL4.ProvokingVertexMode mode);
        
        [Slot(979)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, uint id, int length, [CountAttribute(Computed = "message,length")] IntPtr message);
        
        [Slot(982)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glQueryCounter(uint id, OpenTK.Graphics.OpenGL4.QueryCounterTarget target);
        
        [Slot(984)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadBuffer(OpenTK.Graphics.OpenGL4.ReadBufferMode src);
        
        [Slot(988)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(985)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute] IntPtr data);
        
        [Slot(989)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReleaseShaderCompiler();
        
        [Slot(990)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorage(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height);
        
        [Slot(991)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisample(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, int samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height);
        
        [Slot(993)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResetHistogram(OpenTK.Graphics.OpenGL4.HistogramTargetExt target);
        
        [Slot(994)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTargetExt target);
        
        [Slot(996)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResumeTransformFeedback();
        
        [Slot(997)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoverage(float value, bool invert);
        
        [Slot(998)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleMaski(uint maskNumber, uint mask);
        
        [Slot(1002)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param);
        
        [Slot(1003)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterIuiv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] uint* param);
        
        [Slot(999)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSamplerParameterf(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, float param);
        
        [Slot(1000)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameterfv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] float* param);
        
        [Slot(1001)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSamplerParameteri(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, int param);
        
        [Slot(1004)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSamplerParameteriv(uint sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [CountAttribute(Computed = "pname")] int* param);
        
        [Slot(1005)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissor(int x, int y, int width, int height);
        
        [Slot(1006)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorArrayv(uint first, int count, [CountAttribute(Computed = "count")] int* v);
        
        [Slot(1007)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissorIndexed(uint index, int left, int bottom, int width, int height);
        
        [Slot(1008)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glScissorIndexedv(uint index, [CountAttribute(Count = 4)] int* v);
        
        [Slot(1010)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColorP3ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint color);
        
        [Slot(1011)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColorP3uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* color);
        
        [Slot(1013)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSeparableFilter2D(OpenTK.Graphics.OpenGL4.SeparableTargetExt target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column);
        
        [Slot(1014)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glShaderBinary(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length);
        
        [Slot(1015)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] IntPtr @string, [CountAttribute(Parameter = "count")] int* length);
        
        [Slot(1016)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);
        
        [Slot(1019)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSpecializeShader(uint shader, IntPtr pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);
        
        [Slot(1024)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFunc(OpenTK.Graphics.OpenGL4.StencilFunction func, int @ref, uint mask);
        
        [Slot(1025)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFuncSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilFunction func, int @ref, uint mask);
        
        [Slot(1026)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMask(uint mask);
        
        [Slot(1027)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMaskSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, uint mask);
        
        [Slot(1028)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOp(OpenTK.Graphics.OpenGL4.StencilOp fail, OpenTK.Graphics.OpenGL4.StencilOp zfail, OpenTK.Graphics.OpenGL4.StencilOp zpass);
        
        [Slot(1029)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOpSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilOp sfail, OpenTK.Graphics.OpenGL4.StencilOp dpfail, OpenTK.Graphics.OpenGL4.StencilOp dppass);
        
        [Slot(1037)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBuffer(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer);
        
        [Slot(1039)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexBufferRange(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size);
        
        [Slot(1041)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordP1ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(1042)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoordP1uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(1043)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordP2ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(1044)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoordP2uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(1045)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordP3ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(1046)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoordP3uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(1047)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordP4ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint coords);
        
        [Slot(1048)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoordP4uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* coords);
        
        [Slot(1049)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        
        [Slot(1050)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(1051)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        
        [Slot(1052)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        
        [Slot(1053)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, int samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        
        [Slot(1058)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(1059)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterIuiv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(1055)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterf(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param);
        
        [Slot(1056)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterfv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(1057)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameteri(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param);
        
        [Slot(1060)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameteriv(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(1061)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage1D(OpenTK.Graphics.OpenGL4.TextureTarget1d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width);
        
        [Slot(1062)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2D(OpenTK.Graphics.OpenGL4.TextureTarget2d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height);
        
        [Slot(1063)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample2d target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        
        [Slot(1064)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3D(OpenTK.Graphics.OpenGL4.TextureTarget3d target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth);
        
        [Slot(1065)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample3d target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        
        [Slot(1066)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        
        [Slot(1067)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(1068)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        
        [Slot(1069)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureBarrier();
        
        [Slot(1071)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureBuffer(uint texture, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer);
        
        [Slot(1073)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureBufferRange(uint texture, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size);
        
        [Slot(1085)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterIiv(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int* @params);
        
        [Slot(1087)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterIuiv(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, uint* @params);
        
        [Slot(1079)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureParameterf(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param);
        
        [Slot(1081)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterfv(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float* param);
        
        [Slot(1083)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureParameteri(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param);
        
        [Slot(1089)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameteriv(uint texture, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int* param);
        
        [Slot(1092)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage1D(uint texture, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width);
        
        [Slot(1094)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage2D(uint texture, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height);
        
        [Slot(1096)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage2DMultisample(uint texture, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        
        [Slot(1098)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage3D(uint texture, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth);
        
        [Slot(1100)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage3DMultisample(uint texture, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        
        [Slot(1102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureSubImage1D(uint texture, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);
        
        [Slot(1104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);
        
        [Slot(1106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);
        
        [Slot(1108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureView(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, uint origtexture, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        
        [Slot(1109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer);
        
        [Slot(1110)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, IntPtr offset, IntPtr size);
        
        [Slot(1111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] IntPtr varyings, OpenTK.Graphics.OpenGL4.TransformFeedbackMode bufferMode);
        
        [Slot(1113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1d(int location, double x);
        
        [Slot(1114)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1dv(int location, int count, [CountAttribute(Parameter = "count*1")] double* value);
        
        [Slot(1115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1f(int location, float v0);
        
        [Slot(1116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1fv(int location, int count, [CountAttribute(Parameter = "count*1")] float* value);
        
        [Slot(1117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1i(int location, int v0);
        
        [Slot(1122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1iv(int location, int count, [CountAttribute(Parameter = "count*1")] int* value);
        
        [Slot(1123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1ui(int location, uint v0);
        
        [Slot(1128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1uiv(int location, int count, [CountAttribute(Parameter = "count*1")] uint* value);
        
        [Slot(1129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2d(int location, double x, double y);
        
        [Slot(1130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2dv(int location, int count, [CountAttribute(Parameter = "count*2")] double* value);
        
        [Slot(1131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2f(int location, float v0, float v1);
        
        [Slot(1132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2fv(int location, int count, [CountAttribute(Parameter = "count*2")] float* value);
        
        [Slot(1133)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2i(int location, int v0, int v1);
        
        [Slot(1138)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2iv(int location, int count, [CountAttribute(Parameter = "count*2")] int* value);
        
        [Slot(1139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2ui(int location, uint v0, uint v1);
        
        [Slot(1144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2uiv(int location, int count, [CountAttribute(Parameter = "count*2")] uint* value);
        
        [Slot(1145)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3d(int location, double x, double y, double z);
        
        [Slot(1146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3dv(int location, int count, [CountAttribute(Parameter = "count*3")] double* value);
        
        [Slot(1147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3f(int location, float v0, float v1, float v2);
        
        [Slot(1148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3fv(int location, int count, [CountAttribute(Parameter = "count*3")] float* value);
        
        [Slot(1149)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3i(int location, int v0, int v1, int v2);
        
        [Slot(1154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3iv(int location, int count, [CountAttribute(Parameter = "count*3")] int* value);
        
        [Slot(1155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3ui(int location, uint v0, uint v1, uint v2);
        
        [Slot(1160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3uiv(int location, int count, [CountAttribute(Parameter = "count*3")] uint* value);
        
        [Slot(1161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4d(int location, double x, double y, double z, double w);
        
        [Slot(1162)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4dv(int location, int count, [CountAttribute(Parameter = "count*4")] double* value);
        
        [Slot(1163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4f(int location, float v0, float v1, float v2, float v3);
        
        [Slot(1164)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4fv(int location, int count, [CountAttribute(Parameter = "count*4")] float* value);
        
        [Slot(1165)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4i(int location, int v0, int v1, int v2, int v3);
        
        [Slot(1170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4iv(int location, int count, [CountAttribute(Parameter = "count*4")] int* value);
        
        [Slot(1171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        
        [Slot(1176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4uiv(int location, int count, [CountAttribute(Parameter = "count*4")] uint* value);
        
        [Slot(1177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        
        [Slot(1182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value);
        
        [Slot(1183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value);
        
        [Slot(1184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x3dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);
        
        [Slot(1185)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x3fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);
        
        [Slot(1186)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x4dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);
        
        [Slot(1187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2x4fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);
        
        [Slot(1188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value);
        
        [Slot(1189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value);
        
        [Slot(1190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x2dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);
        
        [Slot(1191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x2fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);
        
        [Slot(1192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x4dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);
        
        [Slot(1193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3x4fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        
        [Slot(1194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value);
        
        [Slot(1195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value);
        
        [Slot(1196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x2dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);
        
        [Slot(1197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x2fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);
        
        [Slot(1198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x3dv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);
        
        [Slot(1199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4x3fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        
        [Slot(1200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformSubroutinesuiv(OpenTK.Graphics.OpenGL4.ShaderType shadertype, int count, [CountAttribute(Parameter = "count")] uint* indices);
        
        [Slot(1203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target);
        
        [Slot(1204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapNamedBuffer(uint buffer);
        
        [Slot(1206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgram(uint program);
        
        [Slot(1207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgramStages(uint pipeline, OpenTK.Graphics.OpenGL4.ProgramStageMask stages, uint program);
        
        [Slot(1210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgram(uint program);
        
        [Slot(1211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgramPipeline(uint pipeline);
        
        [Slot(1213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);
        
        [Slot(1214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, uint relativeoffset);
        
        [Slot(1215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, uint relativeoffset);
        
        [Slot(1216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, uint relativeoffset);
        
        [Slot(1217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);
        
        [Slot(1221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayElementBuffer(uint vaobj, uint buffer);
        
        [Slot(1237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride);
        
        [Slot(1238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, IntPtr* offsets, int* strides);
        
        [Slot(1240)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib1d(uint index, double x);
        
        [Slot(1241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib1dv(uint index, [CountAttribute(Count = 1)] double* v);
        
        [Slot(1242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib1f(uint index, float x);
        
        [Slot(1243)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib1fv(uint index, [CountAttribute(Count = 1)] float* v);
        
        [Slot(1244)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib1s(uint index, short x);
        
        [Slot(1245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib1sv(uint index, [CountAttribute(Count = 1)] short* v);
        
        [Slot(1246)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib2d(uint index, double x, double y);
        
        [Slot(1247)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib2dv(uint index, [CountAttribute(Count = 2)] double* v);
        
        [Slot(1248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib2f(uint index, float x, float y);
        
        [Slot(1249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib2fv(uint index, [CountAttribute(Count = 2)] float* v);
        
        [Slot(1250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib2s(uint index, short x, short y);
        
        [Slot(1251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib2sv(uint index, [CountAttribute(Count = 2)] short* v);
        
        [Slot(1252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib3d(uint index, double x, double y, double z);
        
        [Slot(1253)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib3dv(uint index, [CountAttribute(Count = 3)] double* v);
        
        [Slot(1254)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib3f(uint index, float x, float y, float z);
        
        [Slot(1255)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib3fv(uint index, [CountAttribute(Count = 3)] float* v);
        
        [Slot(1256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib3s(uint index, short x, short y, short z);
        
        [Slot(1257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib3sv(uint index, [CountAttribute(Count = 3)] short* v);
        
        [Slot(1264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4Nbv(uint index, [CountAttribute(Count = 4)] SByte* v);
        
        [Slot(1265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4Niv(uint index, [CountAttribute(Count = 4)] int* v);
        
        [Slot(1266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4Nsv(uint index, [CountAttribute(Count = 4)] short* v);
        
        [Slot(1267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib4Nub(uint index, Byte x, Byte y, Byte z, Byte w);
        
        [Slot(1268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4Nubv(uint index, [CountAttribute(Count = 4)] Byte* v);
        
        [Slot(1269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4Nuiv(uint index, [CountAttribute(Count = 4)] uint* v);
        
        [Slot(1270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4Nusv(uint index, [CountAttribute(Count = 4)] ushort* v);
        
        [Slot(1258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4bv(uint index, [CountAttribute(Count = 4)] SByte* v);
        
        [Slot(1259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib4d(uint index, double x, double y, double z, double w);
        
        [Slot(1260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4dv(uint index, [CountAttribute(Count = 4)] double* v);
        
        [Slot(1261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib4f(uint index, float x, float y, float z, float w);
        
        [Slot(1262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4fv(uint index, [CountAttribute(Count = 4)] float* v);
        
        [Slot(1263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4iv(uint index, [CountAttribute(Count = 4)] int* v);
        
        [Slot(1271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib4s(uint index, short x, short y, short z, short w);
        
        [Slot(1272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4sv(uint index, [CountAttribute(Count = 4)] short* v);
        
        [Slot(1273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4ubv(uint index, [CountAttribute(Count = 4)] Byte* v);
        
        [Slot(1274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4uiv(uint index, [CountAttribute(Count = 4)] uint* v);
        
        [Slot(1275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4usv(uint index, [CountAttribute(Count = 4)] ushort* v);
        
        [Slot(1276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribBinding(uint attribindex, uint bindingindex);
        
        [Slot(1277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribDivisor(uint index, uint divisor);
        
        [Slot(1279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, uint relativeoffset);
        
        [Slot(1281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI1i(uint index, int x);
        
        [Slot(1282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI1iv(uint index, [CountAttribute(Count = 1)] int* v);
        
        [Slot(1283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI1ui(uint index, uint x);
        
        [Slot(1284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI1uiv(uint index, [CountAttribute(Count = 1)] uint* v);
        
        [Slot(1285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI2i(uint index, int x, int y);
        
        [Slot(1286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI2iv(uint index, [CountAttribute(Count = 2)] int* v);
        
        [Slot(1287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI2ui(uint index, uint x, uint y);
        
        [Slot(1288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI2uiv(uint index, [CountAttribute(Count = 2)] uint* v);
        
        [Slot(1289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI3i(uint index, int x, int y, int z);
        
        [Slot(1290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI3iv(uint index, [CountAttribute(Count = 3)] int* v);
        
        [Slot(1291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI3ui(uint index, uint x, uint y, uint z);
        
        [Slot(1292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI3uiv(uint index, [CountAttribute(Count = 3)] uint* v);
        
        [Slot(1293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4bv(uint index, [CountAttribute(Count = 4)] SByte* v);
        
        [Slot(1294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI4i(uint index, int x, int y, int z, int w);
        
        [Slot(1295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4iv(uint index, [CountAttribute(Count = 4)] int* v);
        
        [Slot(1296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4sv(uint index, [CountAttribute(Count = 4)] short* v);
        
        [Slot(1297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4ubv(uint index, [CountAttribute(Count = 4)] Byte* v);
        
        [Slot(1298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        
        [Slot(1299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4uiv(uint index, [CountAttribute(Count = 4)] uint* v);
        
        [Slot(1300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribI4usv(uint index, [CountAttribute(Count = 4)] ushort* v);
        
        [Slot(1301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, uint relativeoffset);
        
        [Slot(1303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        
        [Slot(1304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL1d(uint index, double x);
        
        [Slot(1305)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL1dv(uint index, [CountAttribute(Count = 1)] double* v);
        
        [Slot(1312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL2d(uint index, double x, double y);
        
        [Slot(1313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL2dv(uint index, [CountAttribute(Count = 2)] double* v);
        
        [Slot(1318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL3d(uint index, double x, double y, double z);
        
        [Slot(1319)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL3dv(uint index, [CountAttribute(Count = 3)] double* v);
        
        [Slot(1324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL4d(uint index, double x, double y, double z, double w);
        
        [Slot(1325)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL4dv(uint index, [CountAttribute(Count = 4)] double* v);
        
        [Slot(1330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribLFormat(uint attribindex, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, uint relativeoffset);
        
        [Slot(1332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribLPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, int stride, [CountAttribute(Parameter = "size")] IntPtr pointer);
        
        [Slot(1333)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribP1ui(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value);
        
        [Slot(1334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribP1uiv(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribP2ui(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value);
        
        [Slot(1336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribP2uiv(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribP3ui(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value);
        
        [Slot(1338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribP3uiv(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribP4ui(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, uint value);
        
        [Slot(1340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribP4uiv(uint index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribPointer(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        
        [Slot(1342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexBindingDivisor(uint bindingindex, uint divisor);
        
        [Slot(1344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexP2ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint value);
        
        [Slot(1345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexP2uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexP3ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint value);
        
        [Slot(1347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexP3uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexP4ui(OpenTK.Graphics.OpenGL4.PackedPointerType type, uint value);
        
        [Slot(1349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexP4uiv(OpenTK.Graphics.OpenGL4.PackedPointerType type, [CountAttribute(Count = 1)] uint* value);
        
        [Slot(1350)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewport(int x, int y, int width, int height);
        
        [Slot(1351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportArrayv(uint first, int count, [CountAttribute(Computed = "count")] float* v);
        
        [Slot(1352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportIndexedf(uint index, float x, float y, float w, float h);
        
        [Slot(1353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glViewportIndexedfv(uint index, [CountAttribute(Count = 4)] float* v);
        
        [Slot(1356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags, ulong timeout);
        
        [Slot(0)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveProgramEXT(uint program);
        
        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveShaderProgramEXT(uint pipeline, uint program);
        
        [Slot(24)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindMultiTextureEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, uint texture);
        
        [Slot(26)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindProgramPipelineEXT(uint pipeline);
        
        [Slot(63)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.FramebufferStatus glCheckNamedFramebufferStatusEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferTarget target);
        
        [Slot(76)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearNamedBufferDataEXT(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);
        
        [Slot(78)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearNamedBufferSubDataEXT(uint buffer, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);
        
        [Slot(86)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClientAttribDefaultEXT(OpenTK.Graphics.OpenGL4.ClientAttribMask mask);
        
        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedMultiTexImage1DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedMultiTexImage2DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedMultiTexImage3DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(107)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedMultiTexSubImage1DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedMultiTexSubImage2DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedMultiTexSubImage3DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureImage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureImage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureImage3DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(120)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureSubImage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureSubImage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(124)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTextureSubImage3DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        
        [Slot(139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyMultiTexImage1DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int border);
        
        [Slot(140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyMultiTexImage2DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height, int border);
        
        [Slot(141)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyMultiTexSubImage1DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int x, int y, int width);
        
        [Slot(142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyMultiTexSubImage2DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        
        [Slot(143)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyMultiTexSubImage3DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        
        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureImage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int border);
        
        [Slot(152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureImage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int x, int y, int width, int height, int border);
        
        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureSubImage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int x, int y, int width);
        
        [Slot(156)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureSubImage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        
        [Slot(158)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTextureSubImage3DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        
        [Slot(175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateShaderProgramEXT(OpenTK.Graphics.OpenGL4.ShaderType type, IntPtr @string);
        
        [Slot(177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateShaderProgramvEXT(OpenTK.Graphics.OpenGL4.ShaderType type, int count, [CountAttribute(Parameter = "count")] IntPtr strings);
        
        [Slot(202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteProgramPipelinesEXT(int n, [CountAttribute(Parameter = "n")] uint* pipelines);
        
        [Slot(221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableClientStateIndexedEXT(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index);
        
        [Slot(220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableClientStateiEXT(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index);
        
        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableIndexedEXT(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);
        
        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableVertexArrayAttribEXT(uint vaobj, uint index);
        
        [Slot(226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableVertexArrayEXT(uint vaobj, OpenTK.Graphics.OpenGL4.EnableCap array);
        
        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysInstancedEXT(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int start, int count, int primcount);
        
        [Slot(251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsInstancedEXT(OpenTK.Graphics.OpenGL4.PrimitiveType mode, int count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int primcount);
        
        [Slot(262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableClientStateIndexedEXT(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index);
        
        [Slot(261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableClientStateiEXT(OpenTK.Graphics.OpenGL4.ArrayCap array, uint index);
        
        [Slot(264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableIndexedEXT(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);
        
        [Slot(266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableVertexArrayAttribEXT(uint vaobj, uint index);
        
        [Slot(267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableVertexArrayEXT(uint vaobj, OpenTK.Graphics.OpenGL4.EnableCap array);
        
        [Slot(282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlushMappedNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length);
        
        [Slot(285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferDrawBufferEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.DrawBufferMode mode);
        
        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFramebufferDrawBuffersEXT(uint framebuffer, int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL4.DrawBufferMode* bufs);
        
        [Slot(288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferReadBufferEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.ReadBufferMode mode);
        
        [Slot(311)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenProgramPipelinesEXT(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines);
        
        [Slot(304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateMultiTexMipmapEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target);
        
        [Slot(306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateTextureMipmapEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target);
        
        [Slot(331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanIndexedvEXT(OpenTK.Graphics.OpenGL4.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data);
        
        [Slot(342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetCompressedMultiTexImageEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img);
        
        [Slot(345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetCompressedTextureImageEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img);
        
        [Slot(356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDoubleIndexedvEXT(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data);
        
        [Slot(355)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDoublei_vEXT(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] double* @params);
        
        [Slot(362)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatIndexedvEXT(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data);
        
        [Slot(361)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloati_vEXT(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(368)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferParameterivEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(380)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerIndexedvEXT(OpenTK.Graphics.OpenGL4.GetIndexedPName target, uint index, [OutAttribute, CountAttribute(Computed = "target")] int* data);
        
        [Slot(391)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexEnvfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(392)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexEnvivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(393)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexGendvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params);
        
        [Slot(394)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexGenfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(395)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexGenivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(396)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetMultiTexImageEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);
        
        [Slot(397)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexLevelParameterfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(398)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexLevelParameterivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(400)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexParameterIivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(401)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexParameterIuivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(399)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexParameterfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(402)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultiTexParameterivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(405)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedBufferParameterivEXT(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(408)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetNamedBufferPointervEXT(uint buffer, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        
        [Slot(410)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetNamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data);
        
        [Slot(412)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(414)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedFramebufferParameterivEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(418)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedProgramLocalParameterIivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] int* @params);
        
        [Slot(419)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedProgramLocalParameterIuivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] uint* @params);
        
        [Slot(416)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedProgramLocalParameterdvEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] double* @params);
        
        [Slot(417)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedProgramLocalParameterfvEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] float* @params);
        
        [Slot(420)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetNamedProgramStringEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "program,pname")] IntPtr @string);
        
        [Slot(415)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedProgramivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ProgramPropertyArb pname, [OutAttribute, CountAttribute(Count = 1)] int* @params);
        
        [Slot(422)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(468)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabelEXT(OpenTK.Graphics.OpenGL4.ExtDebugLabel type, uint @object, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        
        [Slot(496)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointerIndexedvEXT(OpenTK.Graphics.OpenGL4.TypeEnum target, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr data);
        
        [Slot(495)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointeri_vEXT(OpenTK.Graphics.OpenGL4.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        
        [Slot(504)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        
        [Slot(506)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineivEXT(uint pipeline, OpenTK.Graphics.OpenGL4.PipelineParameterName pname, [OutAttribute] int* @params);
        
        [Slot(550)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetTextureImageEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);
        
        [Slot(552)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureLevelParameterfvEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(554)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureLevelParameterivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(558)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterIivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(560)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterIuivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(556)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterfvEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(562)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTextureParameterivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(584)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] int* param);
        
        [Slot(585)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexArrayIntegervEXT(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] int* param);
        
        [Slot(587)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute] IntPtr param);
        
        [Slot(588)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetVertexArrayPointervEXT(uint vaobj, OpenTK.Graphics.OpenGL4.VertexArrayPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr param);
        
        [Slot(603)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInsertEventMarkerEXT(int length, IntPtr marker);
        
        [Slot(618)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabledIndexedEXT(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, uint index);
        
        [Slot(629)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgramPipelineEXT(uint pipeline);
        
        [Slot(641)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLabelObjectEXT(OpenTK.Graphics.OpenGL4.ExtDebugLabel type, uint @object, int length, IntPtr label);
        
        [Slot(661)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapNamedBufferEXT(uint buffer, OpenTK.Graphics.OpenGL4.BufferAccess access);
        
        [Slot(663)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glMapNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access);
        
        [Slot(664)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixFrustumEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);
        
        [Slot(669)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixLoadIdentityEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode);
        
        [Slot(671)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadTransposedEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m);
        
        [Slot(672)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadTransposefEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m);
        
        [Slot(667)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoaddEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m);
        
        [Slot(668)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadfEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m);
        
        [Slot(678)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultTransposedEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m);
        
        [Slot(679)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultTransposefEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m);
        
        [Slot(675)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultdEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] double* m);
        
        [Slot(676)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultfEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, [CountAttribute(Count = 16)] float* m);
        
        [Slot(680)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixOrthoEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);
        
        [Slot(681)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixPopEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode);
        
        [Slot(682)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixPushEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode);
        
        [Slot(683)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixRotatedEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, double angle, double x, double y, double z);
        
        [Slot(684)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixRotatefEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, float angle, float x, float y, float z);
        
        [Slot(685)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixScaledEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, double x, double y, double z);
        
        [Slot(686)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixScalefEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, float x, float y, float z);
        
        [Slot(687)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixTranslatedEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, double x, double y, double z);
        
        [Slot(688)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixTranslatefEXT(OpenTK.Graphics.OpenGL4.MatrixMode mode, float x, float y, float z);
        
        [Slot(709)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexBufferEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TypeEnum internalformat, uint buffer);
        
        [Slot(718)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoordPointerEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        
        [Slot(719)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexEnvfEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, float param);
        
        [Slot(720)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexEnvfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(721)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexEnviEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, int param);
        
        [Slot(722)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexEnvivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureEnvTarget target, OpenTK.Graphics.OpenGL4.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(723)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexGendEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, double param);
        
        [Slot(724)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexGendvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double* @params);
        
        [Slot(725)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexGenfEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, float param);
        
        [Slot(726)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexGenfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(727)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexGeniEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, int param);
        
        [Slot(728)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexGenivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureCoordName coord, OpenTK.Graphics.OpenGL4.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(729)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexImage1DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        
        [Slot(730)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexImage2DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(731)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexImage3DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        
        [Slot(735)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexParameterIivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(736)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexParameterIuivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(732)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexParameterfEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param);
        
        [Slot(733)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexParameterfvEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(734)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexParameteriEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param);
        
        [Slot(737)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexParameterivEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(738)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexRenderbufferEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, uint renderbuffer);
        
        [Slot(739)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexSubImage1DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        
        [Slot(740)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexSubImage2DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(741)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexSubImage3DEXT(OpenTK.Graphics.OpenGL4.TextureUnit texunit, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        
        [Slot(743)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferDataEXT(uint buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage);
        
        [Slot(745)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferPageCommitmentEXT(uint buffer, IntPtr offset, IntPtr size, bool commit);
        
        [Slot(747)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferStorageEXT(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags);
        
        [Slot(749)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data);
        
        [Slot(750)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        
        [Slot(754)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferParameteriEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, int param);
        
        [Slot(757)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferRenderbufferEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, uint renderbuffer);
        
        [Slot(761)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTexture1DEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level);
        
        [Slot(762)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTexture2DEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level);
        
        [Slot(763)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTexture3DEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, uint texture, int level, int zoffset);
        
        [Slot(764)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTextureEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level);
        
        [Slot(765)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTextureFaceEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, OpenTK.Graphics.OpenGL4.TextureTarget face);
        
        [Slot(767)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedFramebufferTextureLayerEXT(uint framebuffer, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int layer);
        
        [Slot(768)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedProgramLocalParameter4dEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, double x, double y, double z, double w);
        
        [Slot(769)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParameter4dvEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] double* @params);
        
        [Slot(770)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedProgramLocalParameter4fEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, float x, float y, float z, float w);
        
        [Slot(771)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParameter4fvEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] float* @params);
        
        [Slot(772)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedProgramLocalParameterI4iEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int x, int y, int z, int w);
        
        [Slot(773)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParameterI4ivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] int* @params);
        
        [Slot(774)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedProgramLocalParameterI4uiEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w);
        
        [Slot(775)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParameterI4uivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] uint* @params);
        
        [Slot(776)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParameters4fvEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] float* @params);
        
        [Slot(777)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParametersI4ivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] int* @params);
        
        [Slot(778)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedProgramLocalParametersI4uivEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] uint* @params);
        
        [Slot(779)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedProgramStringEXT(uint program, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess format, int len, [CountAttribute(Parameter = "len")] IntPtr @string);
        
        [Slot(781)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedRenderbufferStorageEXT(uint renderbuffer, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height);
        
        [Slot(783)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height);
        
        [Slot(784)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, int width, int height);
        
        [Slot(828)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffsetClampEXT(float factor, float units, float clamp);
        
        [Slot(831)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopGroupMarkerEXT();
        
        [Slot(837)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramParameteriEXT(uint program, OpenTK.Graphics.OpenGL4.AssemblyProgramParameterArb pname, int value);
        
        [Slot(840)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1dEXT(uint program, int location, double x);
        
        [Slot(842)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count")] double* value);
        
        [Slot(844)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1fEXT(uint program, int location, float v0);
        
        [Slot(846)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1fvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count")] float* value);
        
        [Slot(852)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1iEXT(uint program, int location, int v0);
        
        [Slot(854)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1ivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count")] int* value);
        
        [Slot(860)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1uiEXT(uint program, int location, uint v0);
        
        [Slot(862)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1uivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint* value);
        
        [Slot(864)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2dEXT(uint program, int location, double x, double y);
        
        [Slot(866)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double* value);
        
        [Slot(868)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2fEXT(uint program, int location, float v0, float v1);
        
        [Slot(870)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2fvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float* value);
        
        [Slot(876)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2iEXT(uint program, int location, int v0, int v1);
        
        [Slot(878)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2ivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int* value);
        
        [Slot(884)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);
        
        [Slot(886)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2uivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint* value);
        
        [Slot(888)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3dEXT(uint program, int location, double x, double y, double z);
        
        [Slot(890)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double* value);
        
        [Slot(892)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);
        
        [Slot(894)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3fvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float* value);
        
        [Slot(900)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);
        
        [Slot(902)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3ivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int* value);
        
        [Slot(908)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);
        
        [Slot(910)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3uivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint* value);
        
        [Slot(912)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);
        
        [Slot(914)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double* value);
        
        [Slot(916)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);
        
        [Slot(918)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4fvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float* value);
        
        [Slot(924)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);
        
        [Slot(926)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4ivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int* value);
        
        [Slot(932)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        
        [Slot(934)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4uivEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint* value);
        
        [Slot(940)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value);
        
        [Slot(942)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value);
        
        [Slot(944)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);
        
        [Slot(946)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);
        
        [Slot(948)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);
        
        [Slot(950)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);
        
        [Slot(952)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value);
        
        [Slot(954)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value);
        
        [Slot(956)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);
        
        [Slot(958)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);
        
        [Slot(960)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);
        
        [Slot(962)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        
        [Slot(964)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value);
        
        [Slot(966)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value);
        
        [Slot(968)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);
        
        [Slot(970)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);
        
        [Slot(972)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);
        
        [Slot(974)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        
        [Slot(978)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushClientAttribDefaultEXT(OpenTK.Graphics.OpenGL4.ClientAttribMask mask);
        
        [Slot(981)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushGroupMarkerEXT(int length, IntPtr marker);
        
        [Slot(983)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterSamplesEXT(uint samples, bool fixedsamplelocations);
        
        [Slot(1072)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureBufferEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer);
        
        [Slot(1074)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureBufferRangeEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size);
        
        [Slot(1075)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureImage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        
        [Slot(1076)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureImage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(1077)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureImage3DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        
        [Slot(1078)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        
        [Slot(1086)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterIivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(1088)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterIuivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params);
        
        [Slot(1080)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureParameterfEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, float param);
        
        [Slot(1082)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterfvEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);
        
        [Slot(1084)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureParameteriEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, int param);
        
        [Slot(1090)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTextureParameterivEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);
        
        [Slot(1091)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureRenderbufferEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, uint renderbuffer);
        
        [Slot(1093)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width);
        
        [Slot(1095)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height);
        
        [Slot(1097)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage2DMultisampleEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        
        [Slot(1099)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage3DEXT(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth);
        
        [Slot(1101)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureStorage3DMultisampleEXT(uint texture, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess target, int samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        
        [Slot(1103)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureSubImage1DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        
        [Slot(1105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureSubImage2DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        
        [Slot(1107)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureSubImage3DEXT(uint texture, OpenTK.Graphics.OpenGL4.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        
        [Slot(1205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glUnmapNamedBufferEXT(uint buffer);
        
        [Slot(1208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgramStagesEXT(uint pipeline, OpenTK.Graphics.OpenGL4.UseProgramStageMask stages, uint program);
        
        [Slot(1209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseShaderProgramEXT(OpenTK.Graphics.OpenGL4.ExtSeparateShaderObjects type, uint program);
        
        [Slot(1212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgramPipelineEXT(uint pipeline);
        
        [Slot(1218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride);
        
        [Slot(1219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.ColorPointerType type, int stride, IntPtr offset);
        
        [Slot(1220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, IntPtr offset);
        
        [Slot(1222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.FogPointerType type, int stride, IntPtr offset);
        
        [Slot(1223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.IndexPointerType type, int stride, IntPtr offset);
        
        [Slot(1224)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess texunit, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, IntPtr offset);
        
        [Slot(1225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL4.NormalPointerType type, int stride, IntPtr offset);
        
        [Slot(1226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.ColorPointerType type, int stride, IntPtr offset);
        
        [Slot(1227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.TexCoordPointerType type, int stride, IntPtr offset);
        
        [Slot(1228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);
        
        [Slot(1229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);
        
        [Slot(1230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, bool normalized, uint relativeoffset);
        
        [Slot(1231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, uint relativeoffset);
        
        [Slot(1232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribEnum type, int stride, IntPtr offset);
        
        [Slot(1233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, uint relativeoffset);
        
        [Slot(1234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL4.ExtDirectStateAccess type, int stride, IntPtr offset);
        
        [Slot(1235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, int stride, IntPtr offset);
        
        [Slot(1236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);
        
        [Slot(1239)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL4.VertexPointerType type, int stride, IntPtr offset);
        
        [Slot(1359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowRectanglesEXT(OpenTK.Graphics.OpenGL4.ExtWindowRectangles mode, int count, [CountAttribute(Computed = "count")] int* box);
        
        [Slot(9)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginPerfQueryINTEL(uint queryHandle);
        
        [Slot(168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreatePerfQueryINTEL(uint queryId, [OutAttribute] uint* queryHandle);
        
        [Slot(199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeletePerfQueryINTEL(uint queryHandle);
        
        [Slot(272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndPerfQueryINTEL(uint queryHandle);
        
        [Slot(359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFirstPerfQueryIdINTEL([OutAttribute] uint* queryId);
        
        [Slot(431)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNextPerfQueryIdINTEL(uint queryId, [OutAttribute] uint* nextQueryId);
        
        [Slot(485)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] IntPtr counterName, uint counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] IntPtr counterDesc, [OutAttribute] uint* counterOffset, [OutAttribute] uint* counterDataSize, [OutAttribute] uint* counterTypeEnum, [OutAttribute] uint* counterDataTypeEnum, [OutAttribute] ulong* rawCounterMaxValue);
        
        [Slot(492)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, [OutAttribute] IntPtr data, [OutAttribute] uint* bytesWritten);
        
        [Slot(493)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfQueryIdByNameINTEL(IntPtr queryName, [OutAttribute] uint* queryId);
        
        [Slot(494)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] IntPtr queryName, [OutAttribute] uint* dataSize, [OutAttribute] uint* noCounters, [OutAttribute] uint* noInstances, [OutAttribute] uint* capsMask);
        
        [Slot(37)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendBarrierKHR();
        
        [Slot(186)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);
        
        [Slot(189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDebugMessageControlKHR(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int count, uint* ids, bool enabled);
        
        [Slot(192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDebugMessageInsertKHR(OpenTK.Graphics.OpenGL4.DebugSource source, OpenTK.Graphics.OpenGL4.DebugType type, uint id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, int length, IntPtr buf);
        
        [Slot(353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe uint glGetDebugMessageLogKHR(uint count, int bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] uint* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] int* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        
        [Slot(371)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.GraphicsResetStatus glGetGraphicsResetStatusKHR();
        
        [Slot(469)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectLabelKHR(OpenTK.Graphics.OpenGL4.KhrDebug identifier, uint name, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        
        [Slot(471)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        
        [Slot(498)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetPointervKHR(OpenTK.Graphics.OpenGL4.KhrDebug pname, [OutAttribute] IntPtr @params);
        
        [Slot(458)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformfvKHR(uint program, int location, int bufSize, [OutAttribute] float* @params);
        
        [Slot(462)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformivKHR(uint program, int location, int bufSize, [OutAttribute] int* @params);
        
        [Slot(466)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetnUniformuivKHR(uint program, int location, int bufSize, [OutAttribute] uint* @params);
        
        [Slot(690)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaxShaderCompilerThreadsKHR(uint count);
        
        [Slot(790)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectLabelKHR(OpenTK.Graphics.OpenGL4.ObjectIdentifier identifier, uint name, int length, IntPtr label);
        
        [Slot(792)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glObjectPtrLabelKHR(IntPtr ptr, int length, IntPtr label);
        
        [Slot(830)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopDebugGroupKHR();
        
        [Slot(980)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushDebugGroupKHR(OpenTK.Graphics.OpenGL4.DebugSource source, uint id, int length, IntPtr message);
        
        [Slot(987)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadnPixelsKHR(int x, int y, int width, int height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        
        [Slot(7)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBeginConditionalRenderNV(uint id, OpenTK.Graphics.OpenGL4.TypeEnum mode);
        
        [Slot(38)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendBarrierNV();
        
        [Slot(52)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendParameteriNV(OpenTK.Graphics.OpenGL4.NvBlendEquationAdvanced pname, int value);
        
        [Slot(55)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferAddressRangeNV(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory pname, uint index, ulong address, IntPtr length);
        
        [Slot(60)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCallCommandListNV(uint list);
        
        [Slot(89)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorFormatNV(int size, OpenTK.Graphics.OpenGL4.PixelType type, int stride);
        
        [Slot(100)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCommandListSegmentsNV(uint list, uint segments);
        
        [Slot(101)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompileCommandListNV(uint list);
        
        [Slot(125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConservativeRasterParameterfNV(OpenTK.Graphics.OpenGL4.NvConservativeRasterDilate pname, float value);
        
        [Slot(126)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glConservativeRasterParameteriNV(OpenTK.Graphics.OpenGL4.NvConservativeRasterDilate pname, int param);
        
        [Slot(145)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyPathNV(uint resultPath, uint srcPath);
        
        [Slot(161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCoverFillPathInstancedNV(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues);
        
        [Slot(162)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverFillPathNV(uint path, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode);
        
        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCoverStrokePathInstancedNV(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues);
        
        [Slot(164)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverStrokePathNV(uint path, OpenTK.Graphics.OpenGL4.PathCoverMode coverMode);
        
        [Slot(159)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCoverageModulationNV(OpenTK.Graphics.OpenGL4.ColorComponent components);
        
        [Slot(160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCoverageModulationTableNV(int n, [CountAttribute(Parameter = "n")] float* v);
        
        [Slot(166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateCommandListsNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* lists);
        
        [Slot(178)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glCreateStatesNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* states);
        
        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteCommandListsNV(int n, [CountAttribute(Parameter = "n")] uint* lists);
        
        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeletePathsNV(uint path, int range);
        
        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteStatesNV(int n, [CountAttribute(Parameter = "n")] uint* states);
        
        [Slot(239)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawCommandsAddressNV(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, ulong* indirects, int* sizes, uint count);
        
        [Slot(240)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawCommandsNV(OpenTK.Graphics.OpenGL4.BasicPrimitiveType primitiveMode, uint buffer, IntPtr* indirects, int* sizes, uint count);
        
        [Slot(241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawCommandsStatesAddressNV(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count);
        
        [Slot(242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDrawCommandsStatesNV(uint buffer, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count);
        
        [Slot(258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
        
        [Slot(259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEdgeFlagFormatNV(int stride);
        
        [Slot(270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndConditionalRenderNV();
        
        [Slot(283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogCoordFormatNV(OpenTK.Graphics.OpenGL4.PixelType type, int stride);
        
        [Slot(284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFragmentCoverageColorNV(uint color);
        
        [Slot(291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFramebufferSampleLocationsfvNV(OpenTK.Graphics.OpenGL4.FramebufferTarget target, uint start, int count, float* v);
        
        [Slot(308)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGenPathsNV(int range);
        
        [Slot(335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameterui64vNV(OpenTK.Graphics.OpenGL4.BufferTargetArb target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params);
        
        [Slot(341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGetCommandHeaderNV(OpenTK.Graphics.OpenGL4.NvCommandList tokenID, uint size);
        
        [Slot(350)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetCoverageModulationTableNV(int bufsize, [OutAttribute] float* v);
        
        [Slot(376)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ulong glGetImageHandleNV(uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL4.PixelFormat format);
        
        [Slot(381)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerui64i_vNV(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory value, uint index, [OutAttribute, CountAttribute(Computed = "value")] ulong* result);
        
        [Slot(382)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerui64vNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad value, [OutAttribute, CountAttribute(Computed = "value")] ulong* result);
        
        [Slot(386)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetInternalformatSampleivNV(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int samples, OpenTK.Graphics.OpenGL4.InternalFormatPName pname, int bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);
        
        [Slot(406)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetNamedBufferParameterui64vNV(uint buffer, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params);
        
        [Slot(472)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathColorGenfvNV(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] float* value);
        
        [Slot(473)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathColorGenivNV(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] int* value);
        
        [Slot(474)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathCommandsNV(uint path, [OutAttribute, CountAttribute(Computed = "path")] Byte* commands);
        
        [Slot(475)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathCoordsNV(uint path, [OutAttribute, CountAttribute(Computed = "path")] float* coords);
        
        [Slot(476)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathDashArrayNV(uint path, [OutAttribute, CountAttribute(Computed = "path")] float* dashArray);
        
        [Slot(477)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern float glGetPathLengthNV(uint path, int startSegment, int numSegments);
        
        [Slot(478)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathMetricRangeNV(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics);
        
        [Slot(479)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathMetricsNV(OpenTK.Graphics.OpenGL4.PathMetricMask metricQueryMask, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] float* metrics);
        
        [Slot(480)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathParameterfvNV(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] float* value);
        
        [Slot(481)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathParameterivNV(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [OutAttribute, CountAttribute(Count = 4)] int* value);
        
        [Slot(482)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathSpacingNV(OpenTK.Graphics.OpenGL4.PathListMode pathListMode, int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, float advanceScale, float kerningScale, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] float* returnedSpacing);
        
        [Slot(483)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathTexGenfvNV(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] float* value);
        
        [Slot(484)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPathTexGenivNV(OpenTK.Graphics.OpenGL4.TextureUnit texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode pname, [OutAttribute, CountAttribute(Computed = "pname")] int* value);
        
        [Slot(507)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramResourcefvNV(uint program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, uint index, int propCount, OpenTK.Graphics.OpenGL4.NvPathRendering* props, int bufSize, [OutAttribute] int* length, [OutAttribute] float* @params);
        
        [Slot(534)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ushort glGetStageIndexNV(OpenTK.Graphics.OpenGL4.ShaderType shadertype);
        
        [Slot(548)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ulong glGetTextureHandleNV(uint texture);
        
        [Slot(564)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern ulong glGetTextureSamplerHandleNV(uint texture, uint sampler);
        
        [Slot(574)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformi64vNV(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] long* @params);
        
        [Slot(580)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformui64vNV(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] ulong* @params);
        
        [Slot(595)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribLi64vNV(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] long* @params);
        
        [Slot(597)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribLui64vNV(uint index, OpenTK.Graphics.OpenGL4.VertexAttribEnum pname, [OutAttribute, CountAttribute(Computed = "pname")] ulong* @params);
        
        [Slot(599)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetVkProcAddrNV([CountAttribute(Computed = "name")] IntPtr name);
        
        [Slot(602)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexFormatNV(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride);
        
        [Slot(604)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);
        
        [Slot(614)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBufferResidentNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target);
        
        [Slot(615)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsCommandListNV(uint list);
        
        [Slot(621)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsImageHandleResidentNV(ulong handle);
        
        [Slot(622)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsNamedBufferResidentNV(uint buffer);
        
        [Slot(624)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsPathNV(uint path);
        
        [Slot(625)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsPointInFillPathNV(uint path, uint mask, float x, float y);
        
        [Slot(626)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsPointInStrokePathNV(uint path, float x, float y);
        
        [Slot(634)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsStateNV(uint state);
        
        [Slot(638)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTextureHandleResidentNV(ulong handle);
        
        [Slot(644)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glListDrawCommandsStatesClientNV(uint list, uint segment, IntPtr indirects, int* sizes, uint* states, uint* fbos, uint count);
        
        [Slot(646)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeBufferNonResidentNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target);
        
        [Slot(647)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeBufferResidentNV(OpenTK.Graphics.OpenGL4.NvShaderBufferLoad target, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access);
        
        [Slot(649)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeImageHandleNonResidentNV(ulong handle);
        
        [Slot(651)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeImageHandleResidentNV(ulong handle, OpenTK.Graphics.OpenGL4.NvBindlessTexture access);
        
        [Slot(652)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeNamedBufferNonResidentNV(uint buffer);
        
        [Slot(653)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeNamedBufferResidentNV(uint buffer, OpenTK.Graphics.OpenGL4.NvShaderBufferLoad access);
        
        [Slot(655)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeTextureHandleNonResidentNV(ulong handle);
        
        [Slot(657)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMakeTextureHandleResidentNV(ulong handle);
        
        [Slot(665)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoad3x2fNV(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m);
        
        [Slot(666)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoad3x3fNV(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m);
        
        [Slot(670)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixLoadTranspose3x3fNV(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m);
        
        [Slot(673)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMult3x2fNV(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m);
        
        [Slot(674)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMult3x3fNV(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m);
        
        [Slot(677)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMatrixMultTranspose3x3fNV(OpenTK.Graphics.OpenGL4.NvPathRendering matrixMode, float* m);
        
        [Slot(698)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawArraysIndirectBindlessCountNV(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
        
        [Slot(699)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawArraysIndirectBindlessNV(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount);
        
        [Slot(705)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawElementsIndirectBindlessCountNV(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
        
        [Slot(706)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiDrawElementsIndirectBindlessNV(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount);
        
        [Slot(759)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v);
        
        [Slot(786)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormalFormatNV(OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride);
        
        [Slot(795)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathColorGenNV(OpenTK.Graphics.OpenGL4.PathColor color, OpenTK.Graphics.OpenGL4.PathGenMode genMode, OpenTK.Graphics.OpenGL4.NvPathRendering colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] float* coeffs);
        
        [Slot(796)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathCommandsNV(uint path, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        
        [Slot(797)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathCoordsNV(uint path, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        
        [Slot(798)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathCoverDepthFuncNV(OpenTK.Graphics.OpenGL4.DepthFunction func);
        
        [Slot(799)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathDashArrayNV(uint path, int dashCount, [CountAttribute(Parameter = "dashCount")] float* dashArray);
        
        [Slot(800)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathFogGenNV(OpenTK.Graphics.OpenGL4.PathGenMode genMode);
        
        [Slot(801)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.NvPathRendering glPathGlyphIndexArrayNV(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
        
        [Slot(802)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.NvPathRendering glPathGlyphIndexRangeNV(OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint baseAndCount);
        
        [Slot(803)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathGlyphRangeNV(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale);
        
        [Slot(804)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathGlyphsNV(uint firstPathName, OpenTK.Graphics.OpenGL4.PathFontTarget fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, OpenTK.Graphics.OpenGL4.PathFontStyle fontStyle, int numGlyphs, OpenTK.Graphics.OpenGL4.PathElementType type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, OpenTK.Graphics.OpenGL4.PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale);
        
        [Slot(805)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL4.NvPathRendering glPathMemoryGlyphIndexArrayNV(uint firstPathName, OpenTK.Graphics.OpenGL4.NvPathRendering fontTarget, IntPtr fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
        
        [Slot(806)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathParameterfNV(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, float value);
        
        [Slot(807)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathParameterfvNV(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] float* value);
        
        [Slot(808)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathParameteriNV(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, int value);
        
        [Slot(809)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathParameterivNV(uint path, OpenTK.Graphics.OpenGL4.PathParameter pname, [CountAttribute(Computed = "pname")] int* value);
        
        [Slot(810)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathStencilDepthOffsetNV(float factor, float units);
        
        [Slot(811)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathStencilFuncNV(OpenTK.Graphics.OpenGL4.StencilFunction func, int @ref, uint mask);
        
        [Slot(812)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathStringNV(uint path, OpenTK.Graphics.OpenGL4.PathStringFormat format, int length, [CountAttribute(Parameter = "length")] IntPtr pathString);
        
        [Slot(813)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        
        [Slot(814)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPathSubCoordsNV(uint path, int coordStart, int numCoords, OpenTK.Graphics.OpenGL4.NvPathRendering coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        
        [Slot(815)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPathTexGenNV(OpenTK.Graphics.OpenGL4.PathColor texCoordSet, OpenTK.Graphics.OpenGL4.PathGenMode genMode, int components, [CountAttribute(Computed = "genMode,components")] float* coeffs);
        
        [Slot(819)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe byte glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, [OutAttribute, CountAttribute(Count = 1)] float* x, [OutAttribute, CountAttribute(Count = 1)] float* y, [OutAttribute, CountAttribute(Count = 1)] float* tangentX, [OutAttribute, CountAttribute(Count = 1)] float* tangentY);
        
        [Slot(838)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramPathFragmentInputGenNV(uint program, int location, OpenTK.Graphics.OpenGL4.NvPathRendering genMode, int components, float* coeffs);
        
        [Slot(849)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1i64NV(uint program, int location, long x);
        
        [Slot(851)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] long* value);
        
        [Slot(857)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1ui64NV(uint program, int location, ulong x);
        
        [Slot(859)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value);
        
        [Slot(873)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2i64NV(uint program, int location, long x, long y);
        
        [Slot(875)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] long* value);
        
        [Slot(881)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);
        
        [Slot(883)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value);
        
        [Slot(897)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3i64NV(uint program, int location, long x, long y, long z);
        
        [Slot(899)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] long* value);
        
        [Slot(905)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);
        
        [Slot(907)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value);
        
        [Slot(921)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);
        
        [Slot(923)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4i64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] long* value);
        
        [Slot(929)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);
        
        [Slot(931)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4ui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value);
        
        [Slot(936)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniformHandleui64NV(uint program, int location, ulong value);
        
        [Slot(938)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformHandleui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* values);
        
        [Slot(975)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniformui64NV(uint program, int location, ulong value);
        
        [Slot(976)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformui64vNV(uint program, int location, int count, [CountAttribute(Parameter = "count")] ulong* value);
        
        [Slot(992)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorageMultisampleCoverageNV(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, int coverageSamples, int colorSamples, OpenTK.Graphics.OpenGL4.InternalFormat internalformat, int width, int height);
        
        [Slot(995)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glResolveDepthValuesNV();
        
        [Slot(1009)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColorFormatNV(int size, OpenTK.Graphics.OpenGL4.ColorPointerType type, int stride);
        
        [Slot(1017)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSignalVkFenceNV(ulong vkFence);
        
        [Slot(1018)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSignalVkSemaphoreNV(ulong vkSemaphore);
        
        [Slot(1021)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStateCaptureNV(uint state, OpenTK.Graphics.OpenGL4.NvCommandList mode);
        
        [Slot(1022)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilFillPathInstancedNV(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues);
        
        [Slot(1023)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFillPathNV(uint path, OpenTK.Graphics.OpenGL4.PathFillMode fillMode, uint mask);
        
        [Slot(1030)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilStrokePathInstancedNV(int numPaths, OpenTK.Graphics.OpenGL4.PathElementType pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "numPaths,transformType")] float* transformValues);
        
        [Slot(1031)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilStrokePathNV(uint path, int reference, uint mask);
        
        [Slot(1032)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilThenCoverFillPathInstancedNV(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues);
        
        [Slot(1033)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilThenCoverFillPathNV(uint path, OpenTK.Graphics.OpenGL4.NvPathRendering fillMode, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode);
        
        [Slot(1034)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glStencilThenCoverStrokePathInstancedNV(int numPaths, OpenTK.Graphics.OpenGL4.NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode, OpenTK.Graphics.OpenGL4.NvPathRendering transformType, float* transformValues);
        
        [Slot(1035)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, OpenTK.Graphics.OpenGL4.NvPathRendering coverMode);
        
        [Slot(1036)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSubpixelPrecisionBiasNV(uint xbits, uint ybits);
        
        [Slot(1040)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordFormatNV(int size, OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride);
        
        [Slot(1070)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTextureBarrierNV();
        
        [Slot(1112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTransformPathNV(uint resultPath, uint srcPath, OpenTK.Graphics.OpenGL4.PathTransformType transformType, [CountAttribute(Computed = "transformType")] float* transformValues);
        
        [Slot(1119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1i64NV(int location, long x);
        
        [Slot(1121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1i64vNV(int location, int count, [CountAttribute(Parameter = "count*1")] long* value);
        
        [Slot(1125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1ui64NV(int location, ulong x);
        
        [Slot(1127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1ui64vNV(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value);
        
        [Slot(1135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2i64NV(int location, long x, long y);
        
        [Slot(1137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2i64vNV(int location, int count, [CountAttribute(Parameter = "count*2")] long* value);
        
        [Slot(1141)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2ui64NV(int location, ulong x, ulong y);
        
        [Slot(1143)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2ui64vNV(int location, int count, [CountAttribute(Parameter = "count*2")] ulong* value);
        
        [Slot(1151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3i64NV(int location, long x, long y, long z);
        
        [Slot(1153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3i64vNV(int location, int count, [CountAttribute(Parameter = "count*3")] long* value);
        
        [Slot(1157)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3ui64NV(int location, ulong x, ulong y, ulong z);
        
        [Slot(1159)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3ui64vNV(int location, int count, [CountAttribute(Parameter = "count*3")] ulong* value);
        
        [Slot(1167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4i64NV(int location, long x, long y, long z, long w);
        
        [Slot(1169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4i64vNV(int location, int count, [CountAttribute(Parameter = "count*4")] long* value);
        
        [Slot(1173)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);
        
        [Slot(1175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4ui64vNV(int location, int count, [CountAttribute(Parameter = "count*4")] ulong* value);
        
        [Slot(1179)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformHandleui64NV(int location, ulong value);
        
        [Slot(1181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformHandleui64vNV(int location, int count, [CountAttribute(Parameter = "count")] ulong* value);
        
        [Slot(1201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniformui64NV(int location, ulong value);
        
        [Slot(1202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformui64vNV(int location, int count, [CountAttribute(Parameter = "count*1")] ulong* value);
        
        [Slot(1280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribFormatNV(uint index, int size, OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, bool normalized, int stride);
        
        [Slot(1302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIFormatNV(uint index, int size, OpenTK.Graphics.OpenGL4.NvVertexBufferUnifiedMemory type, int stride);
        
        [Slot(1306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL1i64NV(uint index, long x);
        
        [Slot(1307)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL1i64vNV(uint index, [CountAttribute(Count = 1)] long* v);
        
        [Slot(1309)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL1ui64NV(uint index, ulong x);
        
        [Slot(1311)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL1ui64vNV(uint index, [CountAttribute(Count = 1)] ulong* v);
        
        [Slot(1314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL2i64NV(uint index, long x, long y);
        
        [Slot(1315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL2i64vNV(uint index, [CountAttribute(Count = 2)] long* v);
        
        [Slot(1316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL2ui64NV(uint index, ulong x, ulong y);
        
        [Slot(1317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL2ui64vNV(uint index, [CountAttribute(Count = 2)] ulong* v);
        
        [Slot(1320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL3i64NV(uint index, long x, long y, long z);
        
        [Slot(1321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL3i64vNV(uint index, [CountAttribute(Count = 3)] long* v);
        
        [Slot(1322)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);
        
        [Slot(1323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL3ui64vNV(uint index, [CountAttribute(Count = 3)] ulong* v);
        
        [Slot(1326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w);
        
        [Slot(1327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL4i64vNV(uint index, [CountAttribute(Count = 4)] long* v);
        
        [Slot(1328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);
        
        [Slot(1329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttribL4ui64vNV(uint index, [CountAttribute(Count = 4)] ulong* v);
        
        [Slot(1331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribLFormatNV(uint index, int size, OpenTK.Graphics.OpenGL4.VertexAttribType type, int stride);
        
        [Slot(1343)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexFormatNV(int size, OpenTK.Graphics.OpenGL4.VertexPointerType type, int stride);
        
        [Slot(1354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff);
        
        [Slot(1355)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewportSwizzleNV(uint index, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzlex, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzley, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzlez, OpenTK.Graphics.OpenGL4.NvViewportSwizzle swizzlew);
        
        [Slot(1357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWaitVkSemaphoreNV(ulong vkSemaphore);
        
        [Slot(1358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWeightPathsNV(uint resultPath, int numPaths, [CountAttribute(Parameter = "numPaths")] uint* paths, [CountAttribute(Parameter = "numPaths")] float* weights);
        
        [Slot(300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTextureMultiviewOVR(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, uint texture, int level, int baseViewIndex, int numViews);
    }
}
