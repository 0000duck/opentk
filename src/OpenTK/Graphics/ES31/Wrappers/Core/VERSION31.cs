//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES31
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Set the active program object for a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to set the active program object for.
        /// </param>
        /// <param name="program">
        /// Specifies the program object to set as the active program pipeline object pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glActiveShaderProgram")]
        public static void ActiveShaderProgram(uint pipeline, uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Bind a level of a texture to an image unit
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the image unit to which to bind the texture
        /// </param>
        /// <param name="texture">
        /// Specifies the name of the texture to bind to the image unit.
        /// </param>
        /// <param name="level">
        /// Specifies the level of the texture that is to be bound.
        /// </param>
        /// <param name="layered">
        /// Specifies whether a layered texture binding is to be established.
        /// </param>
        /// <param name="layer">
        /// If layered is False, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
        /// </param>
        /// <param name="access">
        /// Specifies a token indicating the type of access that will be performed on the image.
        /// </param>
        /// <param name="format">
        /// Specifies the format that the elements of the image will be treated as for the purposes of formatted loads and stores.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glBindImageTexture")]
        public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, OpenTK.Graphics.ES31.BufferAccessArb access, OpenTK.Graphics.ES31.InternalFormat format)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Bind a program pipeline to the current context
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of the pipeline object to bind to the context.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glBindProgramPipeline")]
        public static void BindProgramPipeline(uint pipeline)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </param>
        /// <param name="buffer">
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </param>
        /// <param name="offset">
        /// The offset of the first element of the buffer.
        /// </param>
        /// <param name="stride">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glBindVertexBuffer")]
        public static void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Create a stand-alone program from an array of null-terminated source code strings
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to create.
        /// </param>
        /// <param name="count">
        /// Specifies the number of source code strings in the array strings.
        /// </param>
        /// <param name="strings">
        /// [length: count]
        /// Specifies the address of an array of pointers to source code strings from which to create the program object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glCreateShaderProgramv")]
        public static uint CreateShaderProgram(OpenTK.Graphics.ES31.ShaderType type, int count, [CountAttribute(Parameter = "count")] String[] strings)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDeleteProgramPipelines")]
        public static void DeleteProgramPipeline([CountAttribute(Parameter = "n")] uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDeleteProgramPipelines")]
        public static void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint[] pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDeleteProgramPipelines")]
        public static void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] ref uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDeleteProgramPipelines")]
        public static unsafe void DeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint* pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Launch one or more compute work groups
        /// </summary>
        /// <param name="num_groups_x">
        /// The number of work groups to be launched in the X dimension.
        /// </param>
        /// <param name="num_groups_y">
        /// The number of work groups to be launched in the Y dimension.
        /// </param>
        /// <param name="num_groups_z">
        /// The number of work groups to be launched in the Z dimension.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDispatchCompute")]
        public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Launch one or more compute work groups using parameters stored in a buffer
        /// </summary>
        /// <param name="indirect">
        /// The offset into the buffer object currently bound to the DispatchIndirectBuffer buffer target at which the dispatch parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDispatchComputeIndirect")]
        public static void DispatchComputeIndirect(IntPtr indirect)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect(OpenTK.Graphics.ES31.PrimitiveType mode, IntPtr indirect)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.ES31.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.ES31.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.ES31.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenTK.Graphics.ES31.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect)
            where T1 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles, are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect(OpenTK.Graphics.ES31.PrimitiveType mode, OpenTK.Graphics.ES31.DrawElementsType type, IntPtr indirect)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles, are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.ES31.PrimitiveType mode, OpenTK.Graphics.ES31.DrawElementsType type, [InAttribute, OutAttribute] T2[] indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles, are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.ES31.PrimitiveType mode, OpenTK.Graphics.ES31.DrawElementsType type, [InAttribute, OutAttribute] T2[,] indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles, are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.ES31.PrimitiveType mode, OpenTK.Graphics.ES31.DrawElementsType type, [InAttribute, OutAttribute] T2[,,] indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles, are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenTK.Graphics.ES31.PrimitiveType mode, OpenTK.Graphics.ES31.DrawElementsType type, [InAttribute, OutAttribute] ref T2 indirect)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Set a named parameter of a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be modified.
        /// </param>
        /// <param name="param">
        /// The new value for the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glFramebufferParameteri")]
        public static void FramebufferParameter(OpenTK.Graphics.ES31.FramebufferTarget target, OpenTK.Graphics.ES31.FramebufferParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Reserve program pipeline object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGenProgramPipelines")]
        public static uint GenProgramPipeline()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGenProgramPipelines")]
        public static void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGenProgramPipelines")]
        public static void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">
        /// [length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGenProgramPipelines")]
        public static unsafe void GenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetBooleani_v")]
        public static void GetBoolean(OpenTK.Graphics.ES31.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetBooleani_v")]
        public static void GetBoolean(OpenTK.Graphics.ES31.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(target)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetBooleani_v")]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES31.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetFramebufferParameteriv")]
        public static void GetFramebufferParameter(OpenTK.Graphics.ES31.FramebufferTarget target, OpenTK.Graphics.ES31.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetFramebufferParameteriv")]
        public static void GetFramebufferParameter(OpenTK.Graphics.ES31.FramebufferTarget target, OpenTK.Graphics.ES31.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetFramebufferParameteriv")]
        public static unsafe void GetFramebufferParameter(OpenTK.Graphics.ES31.FramebufferTarget target, OpenTK.Graphics.ES31.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetMultisamplefv")]
        public static void GetMultisample(OpenTK.Graphics.ES31.EsVersion31 pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float[] val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetMultisamplefv")]
        public static void GetMultisample(OpenTK.Graphics.ES31.EsVersion31 pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out float val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="index">
        /// </param>
        /// <param name="val">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetMultisamplefv")]
        public static unsafe void GetMultisample(OpenTK.Graphics.ES31.EsVersion31 pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* val)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramInterfaceiv")]
        public static void GetProgramInterface(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, OpenTK.Graphics.ES31.ProgramInterfacePName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramInterfaceiv")]
        public static void GetProgramInterface(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, OpenTK.Graphics.ES31.ProgramInterfacePName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramInterfaceiv")]
        public static unsafe void GetProgramInterface(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, OpenTK.Graphics.ES31.ProgramInterfacePName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static unsafe void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramPipelineiv")]
        public static void GetProgramPipeline(uint pipeline, OpenTK.Graphics.ES31.PipelineParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramPipelineiv")]
        public static void GetProgramPipeline(uint pipeline, OpenTK.Graphics.ES31.PipelineParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramPipelineiv")]
        public static unsafe void GetProgramPipeline(uint pipeline, OpenTK.Graphics.ES31.PipelineParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query the index of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the resource to query the index of.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceIndex")]
        public static uint GetProgramResourceIndex(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query the location of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">
        /// [length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceLocation")]
        public static int GetProgramResourceLocation(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceName")]
        public static void GetProgramResourceName(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceName")]
        public static unsafe void GetProgramResourceName(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceiv")]
        public static void GetProgramResource(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] OpenTK.Graphics.ES31.EsVersion31[] props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceiv")]
        public static void GetProgramResource(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] ref OpenTK.Graphics.ES31.EsVersion31 props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetProgramResourceiv")]
        public static unsafe void GetProgramResource(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] OpenTK.Graphics.ES31.EsVersion31* props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetTexLevelParameterfv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetTexLevelParameterfv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetTexLevelParameterfv")]
        public static unsafe void GetTexLevelParameter(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetTexLevelParameteriv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetTexLevelParameteriv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="level">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glGetTexLevelParameteriv")]
        public static unsafe void GetTexLevelParameter(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Determine if a name corresponds to a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies a value that may be the name of a program pipeline object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glIsProgramPipeline")]
        public static bool IsProgramPipeline(uint pipeline)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Defines a barrier ordering memory transactions
        /// </summary>
        /// <param name="barriers">
        /// Specifies the barriers to insert. Must be a bitwise combination of VertexAttribArrayBarrierBit, ElementArrayBarrierBit, UniformBarrierBit, TextureFetchBarrierBit, ShaderImageAccessBarrierBit, CommandBarrierBit, PixelBufferBarrierBit, TextureUpdateBarrierBit, BufferUpdateBarrierBit, FramebufferBarrierBit, TransformFeedbackBarrierBit, AtomicCounterBarrierBit, or ShaderStorageBarrierBit. If the special value AllBarrierBits is specified, all supported barriers will be inserted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glMemoryBarrier")]
        public static void MemoryBarrier(OpenTK.Graphics.ES31.MemoryBarrierMask barriers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="barriers">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glMemoryBarrierByRegion")]
        public static void MemoryBarrierByRegion(OpenTK.Graphics.ES31.MemoryBarrierMask barriers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1f")]
        public static void ProgramUniform1(uint program, int location, float v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1fv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1fv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1fv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1i")]
        public static void ProgramUniform1(uint program, int location, int v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1iv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1iv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1iv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1ui")]
        public static void ProgramUniform1(uint program, int location, uint v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1uiv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1uiv")]
        public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform1uiv")]
        public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2f")]
        public static void ProgramUniform2(uint program, int location, float v0, float v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2fv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2fv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2fv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2i")]
        public static void ProgramUniform2(uint program, int location, int v0, int v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2iv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2iv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2iv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2ui")]
        public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2uiv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2uiv")]
        public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform2uiv")]
        public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3f")]
        public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3fv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3fv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3fv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3i")]
        public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3iv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3iv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3iv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3ui")]
        public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3uiv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3uiv")]
        public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform3uiv")]
        public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4f")]
        public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4fv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4fv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4fv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4i")]
        public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4iv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4iv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4iv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4ui")]
        public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4uiv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4uiv")]
        public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref uint value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniform4uiv")]
        public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*6]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*8]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="program">
        /// </param>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*12]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="maskNumber">
        /// </param>
        /// <param name="mask">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glSampleMaski")]
        public static void SampleMask(uint maskNumber, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify storage for a two-dimensional multisample texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be Texture2DMultisample.
        /// </param>
        /// <param name="samples">
        /// Specify the number of samples in the texture.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glTexStorage2DMultisample")]
        public static void TexStorage2DMultisample(OpenTK.Graphics.ES31.TextureTarget target, int samples, OpenTK.Graphics.ES31.InternalFormat internalformat, int width, int height, bool fixedsamplelocations)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Bind stages of a program object to a program pipeline
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to which to bind stages from program.
        /// </param>
        /// <param name="stages">
        /// Specifies a set of program stages to bind to the program pipeline object.
        /// </param>
        /// <param name="program">
        /// Specifies the program object containing the shader executables to use in pipeline.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glUseProgramStages")]
        public static void UseProgramStages(uint pipeline, OpenTK.Graphics.ES31.UseProgramStageMask stages, uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Validate a program pipeline object against current GL state
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object to validate.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glValidateProgramPipeline")]
        public static void ValidateProgramPipeline(uint pipeline)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </param>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glVertexAttribBinding")]
        public static void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// The generic vertex attribute array being described.
        /// </param>
        /// <param name="size">
        /// The number of values per vertex that are stored in the array.
        /// </param>
        /// <param name="type">
        /// The type of the data stored in the array.
        /// </param>
        /// <param name="normalized">
        /// The distance between elements within the buffer.
        /// </param>
        /// <param name="relativeoffset">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glVertexAttribFormat")]
        public static void VertexAttribFormat(uint attribindex, int size, OpenTK.Graphics.ES31.EsVersion31 type, bool normalized, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// </summary>
        /// <param name="attribindex">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="relativeoffset">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glVertexAttribIFormat")]
        public static void VertexAttribIFormat(uint attribindex, int size, OpenTK.Graphics.ES31.EsVersion31 type, uint relativeoffset)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v3.1 or ES_VERSION_3_1]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the binding whose divisor to modify.
        /// </param>
        /// <param name="divisor">
        /// The new value for the instance step rate to apply.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_1", Version = "3.1", EntryPoint = "glVertexBindingDivisor")]
        public static void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveShaderProgram(uint pipeline, uint program);

        [Slot(21)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, OpenTK.Graphics.ES31.BufferAccessArb access, OpenTK.Graphics.ES31.InternalFormat format);

        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindProgramPipeline(uint pipeline);

        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride);

        [Slot(105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateShaderProgramv(OpenTK.Graphics.ES31.ShaderType type, int count, [CountAttribute(Parameter = "count")] IntPtr strings);

        [Slot(122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteProgramPipelines(int n, [CountAttribute(Parameter = "n")] uint* pipelines);

        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);

        [Slot(152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDispatchComputeIndirect(IntPtr indirect);

        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArraysIndirect(OpenTK.Graphics.ES31.PrimitiveType mode, IntPtr indirect);

        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElementsIndirect(OpenTK.Graphics.ES31.PrimitiveType mode, OpenTK.Graphics.ES31.DrawElementsType type, IntPtr indirect);

        [Slot(220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferParameteri(OpenTK.Graphics.ES31.FramebufferTarget target, OpenTK.Graphics.ES31.FramebufferParameterName pname, int param);

        [Slot(242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenProgramPipelines(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* pipelines);

        [Slot(260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleani_v(OpenTK.Graphics.ES31.BufferTargetArb target, uint index, [OutAttribute, CountAttribute(Computed = "target")] bool* data);

        [Slot(280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferParameteriv(OpenTK.Graphics.ES31.FramebufferTarget target, OpenTK.Graphics.ES31.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMultisamplefv(OpenTK.Graphics.ES31.EsVersion31 pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* val);

        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramInterfaceiv(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, OpenTK.Graphics.ES31.ProgramInterfacePName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);

        [Slot(342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramPipelineiv(uint pipeline, OpenTK.Graphics.ES31.PipelineParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGetProgramResourceIndex(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, [CountAttribute(Computed = "name")] IntPtr name);

        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetProgramResourceLocation(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, [CountAttribute(Computed = "name")] IntPtr name);

        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramResourceName(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);

        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramResourceiv(uint program, OpenTK.Graphics.ES31.ProgramInterface programInterface, uint index, int propCount, [CountAttribute(Parameter = "propCount")] OpenTK.Graphics.ES31.EsVersion31* props, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* @params);

        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameterfv(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameteriv(OpenTK.Graphics.ES31.TextureTarget target, int level, OpenTK.Graphics.ES31.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgramPipeline(uint pipeline);

        [Slot(477)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMemoryBarrier(OpenTK.Graphics.ES31.MemoryBarrierMask barriers);

        [Slot(478)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMemoryBarrierByRegion(OpenTK.Graphics.ES31.MemoryBarrierMask barriers);

        [Slot(532)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1f(uint program, int location, float v0);

        [Slot(534)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1fv(uint program, int location, int count, [CountAttribute(Parameter = "count")] float* value);

        [Slot(536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1i(uint program, int location, int v0);

        [Slot(540)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1iv(uint program, int location, int count, [CountAttribute(Parameter = "count")] int* value);

        [Slot(542)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform1ui(uint program, int location, uint v0);

        [Slot(546)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform1uiv(uint program, int location, int count, [CountAttribute(Parameter = "count")] uint* value);

        [Slot(548)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2f(uint program, int location, float v0, float v1);

        [Slot(550)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2fv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] float* value);

        [Slot(552)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2i(uint program, int location, int v0, int v1);

        [Slot(556)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2iv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] int* value);

        [Slot(558)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform2ui(uint program, int location, uint v0, uint v1);

        [Slot(562)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform2uiv(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] uint* value);

        [Slot(564)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3f(uint program, int location, float v0, float v1, float v2);

        [Slot(566)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3fv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] float* value);

        [Slot(568)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3i(uint program, int location, int v0, int v1, int v2);

        [Slot(572)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3iv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] int* value);

        [Slot(574)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);

        [Slot(578)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform3uiv(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] uint* value);

        [Slot(580)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);

        [Slot(582)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4fv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] float* value);

        [Slot(584)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);

        [Slot(588)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4iv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] int* value);

        [Slot(590)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);

        [Slot(594)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniform4uiv(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] uint* value);

        [Slot(600)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value);

        [Slot(602)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);

        [Slot(604)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);

        [Slot(606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value);

        [Slot(608)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);

        [Slot(610)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);

        [Slot(612)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value);

        [Slot(614)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);

        [Slot(616)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);

        [Slot(643)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleMaski(uint maskNumber, uint mask);

        [Slot(703)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexStorage2DMultisample(OpenTK.Graphics.ES31.TextureTarget target, int samples, OpenTK.Graphics.ES31.InternalFormat internalformat, int width, int height, bool fixedsamplelocations);

        [Slot(791)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgramStages(uint pipeline, OpenTK.Graphics.ES31.UseProgramStageMask stages, uint program);

        [Slot(795)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgramPipeline(uint pipeline);

        [Slot(805)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribBinding(uint attribindex, uint bindingindex);

        [Slot(810)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribFormat(uint attribindex, int size, OpenTK.Graphics.ES31.EsVersion31 type, bool normalized, uint relativeoffset);

        [Slot(815)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribIFormat(uint attribindex, int size, OpenTK.Graphics.ES31.EsVersion31 type, uint relativeoffset);

        [Slot(818)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexBindingDivisor(uint bindingindex, uint divisor);
    }
}
