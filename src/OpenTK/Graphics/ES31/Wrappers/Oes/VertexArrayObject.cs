//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES31
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexArrayObject" in the extension "Oes".
        /// </summary>
        public static partial class Oes
        {
            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            public static void BindVertexArray(uint array)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArray([CountAttribute(Parameter = "n")] uint arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint[] arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] ref uint arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            public static unsafe void DeleteVertexArrays(int n, [CountAttribute(Parameter = "n")] uint* arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static uint GenVertexArray()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">
            /// [length: n]
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            public static unsafe void GenVertexArrays(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            public static bool IsVertexArray(uint array)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(29)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindVertexArrayOES(uint array);

            [Slot(135)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteVertexArraysOES(int n, [CountAttribute(Parameter = "n")] uint* arrays);

            [Slot(252)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenVertexArraysOES(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* arrays);

            [Slot(440)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsVertexArrayOES(uint array);
        }
    }
}
