//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES31
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "InstancedArrays" in the extension "Angle".
        /// </summary>
        public static partial class Angle
        {
            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedANGLE")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES31.PrimitiveType mode, int first, int count, int primcount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES31.PrimitiveType mode, int count, OpenTK.Graphics.ES31.PrimitiveType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int primcount)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.PrimitiveType mode, int count, OpenTK.Graphics.ES31.PrimitiveType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.PrimitiveType mode, int count, OpenTK.Graphics.ES31.PrimitiveType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.PrimitiveType mode, int count, OpenTK.Graphics.ES31.PrimitiveType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type">
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">
            /// [length: COMPSIZE(count,type)]
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount">
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES31.PrimitiveType mode, int count, OpenTK.Graphics.ES31.PrimitiveType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, int primcount)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor">
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorANGLE")]
            public static void VertexAttribDivisor(uint index, uint divisor)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(156)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDrawArraysInstancedANGLE(OpenTK.Graphics.ES31.PrimitiveType mode, int first, int count, int primcount);

            [Slot(169)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDrawElementsInstancedANGLE(OpenTK.Graphics.ES31.PrimitiveType mode, int count, OpenTK.Graphics.ES31.PrimitiveType type, [CountAttribute(Computed = "count,type")] IntPtr indices, int primcount);

            [Slot(807)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttribDivisorANGLE(uint index, uint divisor);
        }
    }
}
