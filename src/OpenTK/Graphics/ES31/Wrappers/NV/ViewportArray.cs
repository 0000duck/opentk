//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES31
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "ViewportArray" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            public static void DepthRangeArray(uint first, int count, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            public static void DepthRangeArray(uint first, int count, ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeArrayfvNV")]
            public static unsafe void DepthRangeArray(uint first, int count, float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDepthRangeIndexedfNV")]
            public static void DepthRangeIndexed(uint index, float n, float f)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glDisableiNV")]
            public static void Disable(OpenTK.Graphics.ES31.EnableCap target, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glEnableiNV")]
            public static void Enable(OpenTK.Graphics.ES31.EnableCap target, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            public static void GetFloat(OpenTK.Graphics.ES31.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            public static void GetFloat(OpenTK.Graphics.ES31.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out float data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glGetFloati_vNV")]
            public static unsafe void GetFloat(OpenTK.Graphics.ES31.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target">
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the capability.
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glIsEnablediNV")]
            public static bool IsEnabled(OpenTK.Graphics.ES31.EnableCap target, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            public static void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            public static void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] ref int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorArrayvNV")]
            public static unsafe void ScissorArray(uint first, int count, [CountAttribute(Computed = "count")] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="left">
            /// </param>
            /// <param name="bottom">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedNV")]
            public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            public static void ScissorIndexed(uint index, [CountAttribute(Count = 4)] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            public static void ScissorIndexed(uint index, [CountAttribute(Count = 4)] ref int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glScissorIndexedvNV")]
            public static unsafe void ScissorIndexed(uint index, [CountAttribute(Count = 4)] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            public static void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            public static void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="first">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(count)]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportArrayvNV")]
            public static unsafe void ViewportArray(uint first, int count, [CountAttribute(Computed = "count")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="w">
            /// </param>
            /// <param name="h">
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfNV")]
            public static void ViewportIndexed(uint index, float x, float y, float w, float h)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            public static void ViewportIndexed(uint index, [CountAttribute(Count = 4)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            public static void ViewportIndexed(uint index, [CountAttribute(Count = 4)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_viewport_array]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_viewport_array", Version = "", EntryPoint = "glViewportIndexedfvNV")]
            public static unsafe void ViewportIndexed(uint index, [CountAttribute(Count = 4)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(138)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDepthRangeArrayfvNV(uint first, int count, float* v);

            [Slot(141)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDepthRangeIndexedfNV(uint index, float n, float f);

            [Slot(147)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableiNV(OpenTK.Graphics.ES31.EnableCap target, uint index);

            [Slot(187)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableiNV(OpenTK.Graphics.ES31.EnableCap target, uint index);

            [Slot(274)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFloati_vNV(OpenTK.Graphics.ES31.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data);

            [Slot(416)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsEnablediNV(OpenTK.Graphics.ES31.EnableCap target, uint index);

            [Slot(653)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glScissorArrayvNV(uint first, int count, [CountAttribute(Computed = "count")] int* v);

            [Slot(655)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glScissorIndexedNV(uint index, int left, int bottom, int width, int height);

            [Slot(657)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glScissorIndexedvNV(uint index, [CountAttribute(Count = 4)] int* v);

            [Slot(820)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glViewportArrayvNV(uint first, int count, [CountAttribute(Computed = "count")] float* v);

            [Slot(822)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glViewportIndexedfNV(uint index, float x, float y, float w, float h);

            [Slot(824)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glViewportIndexedfvNV(uint index, [CountAttribute(Count = 4)] float* v);
        }
    }
}
