//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES31
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "NonSquareMatrices" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            public static void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            public static void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            public static void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            public static void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            public static void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            public static void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            public static void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            public static void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            public static void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            public static void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            public static void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            public static void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_non_square_matrices]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(775)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix2x3fvNV(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);

            [Slot(777)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix2x4fvNV(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);

            [Slot(780)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix3x2fvNV(int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] float* value);

            [Slot(782)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix3x4fvNV(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);

            [Slot(785)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix4x2fvNV(int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] float* value);

            [Slot(787)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix4x3fvNV(int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] float* value);
        }
    }
}
