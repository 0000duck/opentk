//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES31
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Sync" in the extension "Apple".
        /// </summary>
        public static partial class Apple
        {
            /// <summary>
            /// [requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout">
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            public static OpenTK.Graphics.ES31.SyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES31.SyncObjectMask flags, ulong timeout)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync">
            /// The sync object to be deleted.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glDeleteSyncAPPLE")]
            public static void DeleteSync(IntPtr sync)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags">
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES31.SyncCondition condition, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static long GetInteger64(OpenTK.Graphics.ES31.GetPName pname)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static void GetInteger64(OpenTK.Graphics.ES31.GetPName pname, [OutAttribute] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static void GetInteger64(OpenTK.Graphics.ES31.GetPName pname, [OutAttribute] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES31.GetPName pname, [OutAttribute] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="sync">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES31.SyncParameterName pname, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="sync">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES31.SyncParameterName pname, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// </summary>
            /// <param name="sync">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES31.SyncParameterName pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync">
            /// Specifies a value that may be the name of a sync object.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glIsSyncAPPLE")]
            public static bool IsSync(IntPtr sync)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags">
            /// A bitfield controlling the command flushing behavior. flags must be zero.
            /// </param>
            /// <param name="timeout">
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            public static void WaitSync(IntPtr sync, uint flags, ulong timeout)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(69)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern OpenTK.Graphics.ES31.SyncStatus glClientWaitSyncAPPLE(IntPtr sync, OpenTK.Graphics.ES31.SyncObjectMask flags, ulong timeout);

            [Slot(131)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDeleteSyncAPPLE(IntPtr sync);

            [Slot(210)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern IntPtr glFenceSyncAPPLE(OpenTK.Graphics.ES31.SyncCondition condition, uint flags);

            [Slot(288)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetInteger64vAPPLE(OpenTK.Graphics.ES31.GetPName pname, [OutAttribute] long* @params);

            [Slot(372)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetSyncivAPPLE(IntPtr sync, OpenTK.Graphics.ES31.SyncParameterName pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values);

            [Slot(435)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsSyncAPPLE(IntPtr sync);

            [Slot(830)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout);
        }
    }
}
