//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES20
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Fence" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFence([CountAttribute(Parameter = "n")] uint fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFences(int n, [CountAttribute(Parameter = "n")] uint[] fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static void DeleteFences(int n, [CountAttribute(Parameter = "n")] ref uint fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            public static unsafe void DeleteFences(int n, [CountAttribute(Parameter = "n")] uint* fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            public static void FinishFence(uint fence)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static uint GenFence()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="fences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            public static unsafe void GenFences(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* fences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static void GetFence(uint fence, NvFence pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static void GetFence(uint fence, NvFence pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            public static unsafe void GetFence(uint fence, NvFence pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            public static bool IsFence(uint fence)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            /// <param name="condition">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            public static void SetFence(uint fence, NvFence condition)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_fence]
            /// </summary>
            /// <param name="fence">
            /// </param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            public static bool TestFence(uint fence)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(93)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteFencesNV(int n, [CountAttribute(Parameter = "n")] uint* fences);

            [Slot(173)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFinishFenceNV(uint fence);

            [Slot(196)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenFencesNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* fences);

            [Slot(219)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFenceivNV(uint fence, NvFence pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(334)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsFenceNV(uint fence);

            [Slot(524)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSetFenceNV(uint fence, NvFence condition);

            [Slot(546)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glTestFenceNV(uint fence);
        }
    }
}
