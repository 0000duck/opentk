//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES20
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES20.TextureUnit texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Attach a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        public static void AttachShader(uint program, uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Associate a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name">
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static void BindAttribLocation(uint program, uint index, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.ES20.BufferTarget target, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.FramebufferTarget target, uint framebuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.RenderbufferTarget target, uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.ES20.TextureTarget target, uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="green">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="blue">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="alpha">
        /// specify the components of BlendColor
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendColor")]
        public static void BlendColor(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.ES20.BlendEquationMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES20.BlendingFactorSrc sfactor, OpenTK.Graphics.ES20.BlendingFactorDest dfactor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES20.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.ES20.BlendingFactorDest dfactorRGB, OpenTK.Graphics.ES20.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.ES20.BlendingFactorDest dfactorAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES20.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES20.BufferUsageHint usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the framebuffer completeness status of a framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.ES20.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES20.FramebufferTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES20.ClearBufferMask mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearColor")]
        public static void ClearColor(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(float d)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(int s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Compile a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        public static void CompileShader(uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureCopyComponentCount internalformat, int x, int y, int width, int height, int border)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create a program object
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static uint CreateProgram()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create a shader object
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to be created. Must be either VertexShader or FragmentShader.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static uint CreateShader(OpenTK.Graphics.ES20.ShaderType type)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES20.CullFaceMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint[] framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] ref uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        public static unsafe void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static void DeleteProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint[] renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] ref uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        public static unsafe void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static void DeleteShader(uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        public static unsafe void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES20.DepthFunction func)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthRangef")]
        public static void DepthRange(float n, float f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Detach a shader object from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        public static void DetachShader(uint program, uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="cap">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES20.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="index">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static void DisableVertexAttribArray(uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, int first, int count)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, int count, OpenTK.Graphics.ES20.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, int count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, int count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, int count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, int count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES20.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static void EnableVertexAttribArray(uint index)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFinish")]
        public static void Finish()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFlush")]
        public static void Flush()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget">
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.TextureTarget2d textarget, uint texture, int level)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES20.FrontFaceDirection mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        public static uint GenBuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        public static uint GenFramebuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">
        /// [length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        public static unsafe void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        public static uint GenRenderbuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">
        /// [length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        public static unsafe void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        public static uint GenTexture()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        public static unsafe void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Generate a complete set of mipmaps for a texture object
        /// </summary>
        /// <param name="target">
        /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.ES20.TextureTarget target)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static void GetActiveAttrib(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES20.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static unsafe void GetActiveAttrib(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES20.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static void GetActiveUniform(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.ES20.ActiveUniformType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">
        /// [length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">
        /// [length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">
        /// [length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static unsafe void GetActiveUniform(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES20.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">
        /// [length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static void GetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] out int count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint[] shaders)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">
        /// [length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static void GetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] out int count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out uint shaders)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">
        /// [length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static unsafe void GetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] int* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint* shaders)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static int GetAttribLocation(uint program, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        public static bool GetBoolean(OpenTK.Graphics.ES20.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.ES20.ErrorCode GetError()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        public static float GetFloat(OpenTK.Graphics.ES20.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        public static unsafe void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        public static int GetInteger(OpenTK.Graphics.ES20.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static void GetProgramInfoLog(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static unsafe void GetProgramInfoLog(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static void GetProgram(uint program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static void GetProgram(uint program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static unsafe void GetProgram(uint program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static void GetShaderInfoLog(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static unsafe void GetShaderInfoLog(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">
        /// [length: 2]
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">
        /// [length: 1]
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] int[] range, [OutAttribute, CountAttribute(Count = 1)] out int precision)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">
        /// [length: 2]
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">
        /// [length: 1]
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] out int range, [OutAttribute, CountAttribute(Count = 1)] out int precision)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">
        /// [length: 2]
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">
        /// [length: 1]
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] int* range, [OutAttribute, CountAttribute(Count = 1)] int* precision)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static void GetShaderSource(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">
        /// [length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">
        /// [length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static unsafe void GetShaderSource(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static void GetShader(uint shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static void GetShader(uint shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static unsafe void GetShader(uint shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES20.StringName name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static int GetUniformLocation(uint program, String name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer(uint index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">
        /// [length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static void GetVertexAttrib(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">
        /// [length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES20.HintTarget target, OpenTK.Graphics.ES20.HintMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        public static bool IsBuffer(uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES20.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        public static bool IsFramebuffer(uint framebuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        public static bool IsProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        public static bool IsRenderbuffer(uint renderbuffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        public static bool IsShader(uint shader)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        public static bool IsTexture(uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(float width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Link a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static void LinkProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES20.PixelStoreParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units">
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(float factor, float units)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(int x, int y, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Release resources allocated by the shader compiler
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReleaseShaderCompiler")]
        public static void ReleaseShaderCompiler()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a renderbuffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer in pixels.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(float value, bool invert)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glScissor")]
        public static void Scissor(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] ref uint shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">
        /// [length: count]
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">
        /// [length: length]
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        public static unsafe void ShaderBinary<T3>(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, int length)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">
        /// [length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">
        /// [length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static void ShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] int[] length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">
        /// [length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">
        /// [length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static void ShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] ref int length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">
        /// [length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">
        /// [length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static unsafe void ShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] int* length)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.ES20.StencilFunction func, int @ref, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilFunction func, int @ref, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        public static void StencilMask(uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.StencilFace face, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES20.StencilOp fail, OpenTK.Graphics.ES20.StencilOp zfail, OpenTK.Graphics.ES20.StencilOp zpass)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilOp sfail, OpenTK.Graphics.ES20.StencilOp dpfail, OpenTK.Graphics.ES20.StencilOp dppass)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, int width, int height, int border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, int width, int height, int border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, int width, int height, int border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, int width, int height, int border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, int width, int height, int border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static void Uniform1(int location, float v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static void Uniform1(int location, int v0)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*1]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static void Uniform2(int location, float v0, float v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static void Uniform2(int location, int v0, int v1)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*2]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static void Uniform3(int location, float v0, float v1, float v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static void Uniform3(int location, int v0, int v1, int v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*3]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static void Uniform4(int location, float v0, float v1, float v2, float v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static void Uniform4(int location, int v0, int v1, int v2, int v3)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] int[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref int value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] int* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*4]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static unsafe void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*9]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static unsafe void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float[] value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// </summary>
        /// <param name="location">
        /// </param>
        /// <param name="count">
        /// </param>
        /// <param name="transpose">
        /// </param>
        /// <param name="value">
        /// [length: count*16]
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static unsafe void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Install a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        public static void UseProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Validate a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static void ValidateProgram(uint program)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static void VertexAttrib1(uint index, float x)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static void VertexAttrib2(uint index, float x, float y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static void VertexAttrib3(uint index, float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static void VertexAttrib4(uint index, float x, float y, float z, float w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer(uint index, int size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[] pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,] pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,,] pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T5 pointer)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v2.0 or ES_VERSION_2_0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glViewport")]
        public static void Viewport(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveTexture(OpenTK.Graphics.ES20.TextureUnit texture);

        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAttachShader(uint program, uint shader);

        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindAttribLocation(uint program, uint index, IntPtr name);

        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBuffer(OpenTK.Graphics.ES20.BufferTarget target, uint buffer);

        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindFramebuffer(OpenTK.Graphics.ES20.FramebufferTarget target, uint framebuffer);

        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindRenderbuffer(OpenTK.Graphics.ES20.RenderbufferTarget target, uint renderbuffer);

        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTexture(OpenTK.Graphics.ES20.TextureTarget target, uint texture);

        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendColor(float red, float green, float blue, float alpha);

        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquation(OpenTK.Graphics.ES20.BlendEquationMode mode);

        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendEquationSeparate(OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha);

        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunc(OpenTK.Graphics.ES20.BlendingFactorSrc sfactor, OpenTK.Graphics.ES20.BlendingFactorDest dfactor);

        [Slot(33)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparate(OpenTK.Graphics.ES20.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.ES20.BlendingFactorDest dfactorRGB, OpenTK.Graphics.ES20.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.ES20.BlendingFactorDest dfactorAlpha);

        [Slot(39)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES20.BufferUsageHint usage);

        [Slot(43)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferSubData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);

        [Slot(44)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.ES20.FramebufferErrorCode glCheckFramebufferStatus(OpenTK.Graphics.ES20.FramebufferTarget target);

        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClear(OpenTK.Graphics.ES20.ClearBufferMask mask);

        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColor(float red, float green, float blue, float alpha);

        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthf(float d);

        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearStencil(int s);

        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMask(bool red, bool green, bool blue, bool alpha);

        [Slot(57)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompileShader(uint shader);

        [Slot(58)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(60)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureCopyComponentCount internalformat, int x, int y, int width, int height, int border);

        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

        [Slot(81)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateProgram();

        [Slot(82)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glCreateShader(OpenTK.Graphics.ES20.ShaderType type);

        [Slot(85)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCullFace(OpenTK.Graphics.ES20.CullFaceMode mode);

        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(94)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers);

        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteProgram(uint program);

        [Slot(102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers);

        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteShader(uint shader);

        [Slot(106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures);

        [Slot(108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthFunc(OpenTK.Graphics.ES20.DepthFunction func);

        [Slot(109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthMask(bool flag);

        [Slot(112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangef(float n, float f);

        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDetachShader(uint program, uint shader);

        [Slot(116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisable(OpenTK.Graphics.ES20.EnableCap cap);

        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableVertexAttribArray(uint index);

        [Slot(123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, int first, int count);

        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, int count, OpenTK.Graphics.ES20.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices);

        [Slot(148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnable(OpenTK.Graphics.ES20.EnableCap cap);

        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableVertexAttribArray(uint index);

        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinish();

        [Slot(174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlush();

        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, uint renderbuffer);

        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.TextureTarget2d textarget, uint texture, int level);

        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrontFace(OpenTK.Graphics.ES20.FrontFaceDirection mode);

        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers);

        [Slot(202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers);

        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures);

        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGenerateMipmap(OpenTK.Graphics.ES20.TextureTarget target);

        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveAttrib(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES20.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);

        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetActiveUniform(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.ES20.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);

        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetAttachedShaders(uint program, int maxCount, [OutAttribute, CountAttribute(Count = 1)] int* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint* shaders);

        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetAttribLocation(uint program, IntPtr name);

        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanv(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);

        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteriv(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.ES20.ErrorCode glGetError();

        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatv(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data);

        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFramebufferAttachmentParameteriv(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.FramebufferAttachment attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerv(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data);

        [Slot(276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramInfoLog(uint program, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);

        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetProgramiv(uint program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetRenderbufferParameteriv(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderInfoLog(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);

        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] int* range, [OutAttribute, CountAttribute(Count = 1)] int* precision);

        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderSource(uint shader, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr source);

        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetShaderiv(uint shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetString(OpenTK.Graphics.ES20.StringName name);

        [Slot(299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterfv(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameteriv(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glGetUniformLocation(uint program, IntPtr name);

        [Slot(310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformfv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] float* @params);

        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetUniformiv(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] int* @params);

        [Slot(318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetVertexAttribPointerv(uint index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer);

        [Slot(316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribfv(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] float* @params);

        [Slot(317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetVertexAttribiv(uint index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] int* @params);

        [Slot(320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHint(OpenTK.Graphics.ES20.HintTarget target, OpenTK.Graphics.ES20.HintMode mode);

        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBuffer(uint buffer);

        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabled(OpenTK.Graphics.ES20.EnableCap cap);

        [Slot(335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsFramebuffer(uint framebuffer);

        [Slot(341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsProgram(uint program);

        [Slot(344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsRenderbuffer(uint renderbuffer);

        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsShader(uint shader);

        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTexture(uint texture);

        [Slot(352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidth(float width);

        [Slot(353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLinkProgram(uint program);

        [Slot(423)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorei(OpenTK.Graphics.ES20.PixelStoreParameter pname, int param);

        [Slot(426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffset(float factor, float units);

        [Slot(499)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadPixels(int x, int y, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(501)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReleaseShaderCompiler();

        [Slot(502)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRenderbufferStorage(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, int width, int height);

        [Slot(510)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoverage(float value, bool invert);

        [Slot(515)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissor(int x, int y, int width, int height);

        [Slot(525)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glShaderBinary(int count, [CountAttribute(Parameter = "count")] uint* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, int length);

        [Slot(526)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glShaderSource(uint shader, int count, [CountAttribute(Parameter = "count")] IntPtr @string, [CountAttribute(Parameter = "count")] int* length);

        [Slot(533)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFunc(OpenTK.Graphics.ES20.StencilFunction func, int @ref, uint mask);

        [Slot(534)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFuncSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilFunction func, int @ref, uint mask);

        [Slot(535)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMask(uint mask);

        [Slot(536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMaskSeparate(OpenTK.Graphics.ES20.StencilFace face, uint mask);

        [Slot(537)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOp(OpenTK.Graphics.ES20.StencilOp fail, OpenTK.Graphics.ES20.StencilOp zfail, OpenTK.Graphics.ES20.StencilOp zpass);

        [Slot(538)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOpSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilOp sfail, OpenTK.Graphics.ES20.StencilOp dpfail, OpenTK.Graphics.ES20.StencilOp dppass);

        [Slot(551)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, int width, int height, int border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(554)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterf(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, float param);

        [Slot(555)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterfv(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(556)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameteri(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, int param);

        [Slot(561)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameteriv(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(571)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(585)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1f(int location, float v0);

        [Slot(586)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1fv(int location, int count, [CountAttribute(Parameter = "count*1")] float* value);

        [Slot(587)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform1i(int location, int v0);

        [Slot(590)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform1iv(int location, int count, [CountAttribute(Parameter = "count*1")] int* value);

        [Slot(593)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2f(int location, float v0, float v1);

        [Slot(594)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2fv(int location, int count, [CountAttribute(Parameter = "count*2")] float* value);

        [Slot(595)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform2i(int location, int v0, int v1);

        [Slot(598)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform2iv(int location, int count, [CountAttribute(Parameter = "count*2")] int* value);

        [Slot(601)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3f(int location, float v0, float v1, float v2);

        [Slot(602)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3fv(int location, int count, [CountAttribute(Parameter = "count*3")] float* value);

        [Slot(603)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform3i(int location, int v0, int v1, int v2);

        [Slot(606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform3iv(int location, int count, [CountAttribute(Parameter = "count*3")] int* value);

        [Slot(609)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4f(int location, float v0, float v1, float v2, float v3);

        [Slot(610)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4fv(int location, int count, [CountAttribute(Parameter = "count*4")] float* value);

        [Slot(611)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUniform4i(int location, int v0, int v1, int v2, int v3);

        [Slot(614)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniform4iv(int location, int count, [CountAttribute(Parameter = "count*4")] int* value);

        [Slot(621)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix2fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value);

        [Slot(624)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix3fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value);

        [Slot(627)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glUniformMatrix4fv(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value);

        [Slot(631)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glUseProgram(uint program);

        [Slot(634)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glValidateProgram(uint program);

        [Slot(636)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib1f(uint index, float x);

        [Slot(637)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib1fv(uint index, [CountAttribute(Count = 1)] float* v);

        [Slot(638)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib2f(uint index, float x, float y);

        [Slot(639)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib2fv(uint index, [CountAttribute(Count = 2)] float* v);

        [Slot(640)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib3f(uint index, float x, float y, float z);

        [Slot(641)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib3fv(uint index, [CountAttribute(Count = 3)] float* v);

        [Slot(642)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttrib4f(uint index, float x, float y, float z, float w);

        [Slot(643)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertexAttrib4fv(uint index, [CountAttribute(Count = 4)] float* v);

        [Slot(647)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexAttribPointer(uint index, int size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(648)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewport(int x, int y, int width, int height);
    }
}
