//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
#pragma warning disable 626
#pragma warning disable 1591

    partial class GL
    {
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        ///  <para>
        /// Specifies the program object to be queried.
        ///  </para>
        /// </param>
        /// <param name="maxCount">
        ///  <para>
        /// Specifies the size of the array for storing the returned object names.
        ///  </para>
        /// </param>
        /// <param name="count">
        ///  <para>
        /// Returns the number of names actually returned in objects.
        ///  </para>
        /// </param>
        /// <param name="obj">
        ///  <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [Obsolete("Use GetAttachedShaders out/array overload instead")]
        public static
            unsafe void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int[] obj)
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        ///  <para>
        /// Specifies the program object to be queried.
        ///  </para>
        /// </param>
        /// <param name="maxCount">
        ///  <para>
        /// Specifies the size of the array for storing the returned object names.
        ///  </para>
        /// </param>
        /// <param name="count">
        ///  <para>
        /// Returns the number of names actually returned in objects.
        ///  </para>
        /// </param>
        /// <param name="obj">
        ///  <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [Obsolete("Use GetAttachedShaders out/array overload instead")]
        public static
            unsafe void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint[] obj)
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row,
                [Out] IntPtr column, [In] [Out] T5[] span)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row,
                [Out] IntPtr column, [In] [Out] T5[,] span)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row,
                [Out] IntPtr column, [In] [Out] T5[,,] span)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row,
                [Out] IntPtr column, [In] [Out] ref T5 span)
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [Out] IntPtr row, [In] [Out] T4[] column, [In] [Out] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [Out] IntPtr row, [In] [Out] T4[,] column, [In] [Out] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [Out] IntPtr row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
        public static
            void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [Out] IntPtr row, [In] [Out] ref T4 column, [In] [Out] T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload with equal array dimensions instead")]
        public static
            void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [In] [Out] T3[] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> overload with equal array dimensions instead")]
        public static
            void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [In] [Out] T3[,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
        /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to storage for the row filter image.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to storage for the column filter image.
        ///  </para>
        /// </param>
        /// <param name="span">
        ///  <para>
        /// Pointer to storage for the span filter image (currently unused).
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        [Obsolete("Use GetSeparableFilter<T3, T4, T5> with three ref arguments instead")]
        public static
            void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type,
                [In] [Out] ref T3 row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        [AutoGenerated(Category = "ArbSync", Version = "1.2", EntryPoint = "glGetSynciv")]
        [Obsolete("Use out/array overload instead")]
        public static
            unsafe void GetSync(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int[] values)
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[] column)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,] column)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,,] column)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] ref T7 column)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }


        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        [Obsolete("Use overload with equal array dimensions instead")]
        public static
            void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        ///  <para>
        /// Must be GL_SEPARABLE_2D.
        ///  </para>
        /// </param>
        /// <param name="internalformat">
        ///  <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
        /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
        /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
        /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
        /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
        /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        ///  </para>
        /// </param>
        /// <param name="width">
        ///  <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="height">
        ///  <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
        /// kernel.)
        ///  </para>
        /// </param>
        /// <param name="format">
        ///  <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
        /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        ///  </para>
        /// </param>
        /// <param name="type">
        ///  <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
        /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
        /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
        /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
        /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
        /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        ///  </para>
        /// </param>
        /// <param name="row">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        ///  </para>
        /// </param>
        /// <param name="column">
        ///  <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        ///  </para>
        /// </param>
        [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
        [Obsolete("Use ref/array overloads instead")]
        public static
            void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        partial class Amd
        {
            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize,
                    [Out] int[] data, [Out] int* bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize,
                    [Out] uint[] data, [Out] int* bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize,
                    [Out] uint[] data, [Out] int* bytesWritten)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorCountersAMD")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters,
                    int counterSize, [Out] int[] counters)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorCountersAMD")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters,
                    int counterSize, [Out] uint[] counters)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [Obsolete("Use GetPerfMonitorGroups instead")]
            public static
                void GetPerfMonitorGroup([Out] out int numGroups, int groupsSize, [Out] out int groups)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [Obsolete("Use GetPerfMonitorGroups instead")]
            public static
                void GetPerfMonitorGroup([Out] out int numGroups, int groupsSize, [Out] out uint groups)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [Obsolete("Use GetPerfMonitorGroups instead")]
            public static
                unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int[] groups)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [Obsolete("Use GetPerfMonitorGroups instead")]
            public static
                unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int* groups)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [Obsolete("Use GetPerfMonitorGroups instead")]
            public static
                unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint[] groups)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AmdPerformanceMonitor", Version = "1.2",
                EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [Obsolete("Use GetPerfMonitorGroups instead")]
            public static
                unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint* groups)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        partial class Arb
        {
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetAttachedObjects(int containerObj, int maxCount, [Out] int* count, [Out] int[] obj)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                unsafe void GetAttachedObjects(uint containerObj, int maxCount, [Out] int* count, [Out] uint[] obj)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        partial class Ati
        {
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glPassTexCoordATI")]
            [Obsolete("Use PassTexCoord instead")]
            public static
                void PassTexCoor(int dst, int coord, AtiFragmentShader swizzle)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glPassTexCoordATI")]
            [Obsolete("Use PassTexCoord instead")]
            public static
                void PassTexCoor(uint dst, uint coord, AtiFragmentShader swizzle)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        partial class Ext
        {
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjecti64(int id, ExtTimerQuery pname, [Out] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjecti64(int id, ExtTimerQuery pname, [Out] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                unsafe void GetQueryObjecti64(int id, ExtTimerQuery pname, [Out] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjecti64(uint id, ExtTimerQuery pname, [Out] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjecti64(uint id, ExtTimerQuery pname, [Out] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                unsafe void GetQueryObjecti64(uint id, ExtTimerQuery pname, [Out] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjectui64(int id, ExtTimerQuery pname, [Out] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjectui64(int id, ExtTimerQuery pname, [Out] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                unsafe void GetQueryObjectui64(int id, ExtTimerQuery pname, [Out] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjectui64(uint id, ExtTimerQuery pname, [Out] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                void GetQueryObjectui64(uint id, ExtTimerQuery pname, [Out] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            [Obsolete("Use GetQueryObject overload instead")]
            public static
                unsafe void GetQueryObjectui64(uint id, ExtTimerQuery pname, [Out] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row,
                    [Out] IntPtr column, [In] [Out] IntPtr span)
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type,
                    ref T4 row, ref T5 column, ref T6 span)
                where T4 : struct
                where T5 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] T4[] row, [Out] T5[] column, [In] [Out] T6[] span)
                where T4 : struct
                where T5 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] T4[,] row, [Out] T5[,] column, [In] [Out] T6[,] span)
                where T4 : struct
                where T5 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] T4[,,] row, [Out] T5[,,] column, [In] [Out] T6[,,] span)
                where T4 : struct
                where T5 : struct
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row,
                    [Out] IntPtr column, [In] [Out] T5[] span)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row,
                    [Out] IntPtr column, [In] [Out] T5[,] span)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row,
                    [Out] IntPtr column, [In] [Out] T5[,,] span)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row,
                    [Out] IntPtr column, [In] [Out] ref T5 span)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] IntPtr row, [In] [Out] T4[] column, [In] [Out] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] IntPtr row, [In] [Out] T4[,] column, [In] [Out] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] IntPtr row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
            public static
                void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [Out] IntPtr row, [In] [Out] ref T4 column, [In] [Out] T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [In] [Out] T3[] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [In] [Out] T3[,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA,
            /// GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to storage for the row filter image.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to storage for the column filter image.
            ///  </para>
            /// </param>
            /// <param name="span">
            ///  <para>
            /// Pointer to storage for the span filter image (currently unused).
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type,
                    [In] [Out] ref T3 row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
            public static
                void SeparableFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int width, int height,
                    PixelFormat format, PixelType type, IntPtr row, [In] [Out] IntPtr column)
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] ref T7 column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] row, [In] [Out] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
            public static
                void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[] column)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
            public static
                void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,] column)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
            public static
                void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,,] column)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
            public static
                void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] ref T7 column)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            /// <summary>
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            ///  <para>
            /// Must be GL_SEPARABLE_2D.
            ///  </para>
            /// </param>
            /// <param name="internalformat">
            ///  <para>
            /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            /// GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16,
            /// GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            /// GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12,
            /// GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,
            /// GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
            ///  </para>
            /// </param>
            /// <param name="width">
            ///  <para>
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="height">
            ///  <para>
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter
            /// kernel.)
            ///  </para>
            /// </param>
            /// <param name="format">
            ///  <para>
            /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,
            /// GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            ///  </para>
            /// </param>
            /// <param name="type">
            ///  <para>
            /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,
            /// GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
            /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            /// GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            /// GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and
            /// GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
            ///  </para>
            /// </param>
            /// <param name="row">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            ///  </para>
            /// </param>
            /// <param name="column">
            ///  <para>
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            ///  </para>
            /// </param>
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            [Obsolete("Use ref/array overloads instead")]
            public static
                void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width,
                    int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }
        }


        partial class Ibm
        {
            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawArraysIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawArrays(BeginMode[] mode, int[] first, int[] count, int primcount, int modestride)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawArraysIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawArrays(ref BeginMode mode, ref int first, ref int count, int primcount,
                    int modestride)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawArraysIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                unsafe void MultiModeDrawArrays(BeginMode* mode, int* first, int* count, int primcount, int modestride)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements(BeginMode[] mode, int[] count, DrawElementsType type, IntPtr indices,
                    int primcount, int modestride)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type,
                    [In] [Out] T3[] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type,
                    [In] [Out] T3[,] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type,
                    [In] [Out] T3[,,] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type,
                    [In] [Out] ref T3 indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements(ref BeginMode mode, ref int count, DrawElementsType type, IntPtr indices,
                    int primcount, int modestride)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type,
                    [In] [Out] T3[] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type,
                    [In] [Out] T3[,] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type,
                    [In] [Out] T3[,,] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type,
                    [In] [Out] ref T3 indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                unsafe void MultiModeDrawElements(BeginMode* mode, int* count, DrawElementsType type, IntPtr indices,
                    int primcount, int modestride)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type,
                    [In] [Out] T3[] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type,
                    [In] [Out] T3[,] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type,
                    [In] [Out] T3[,,] indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1",
                EntryPoint = "glMultiModeDrawElementsIBM")]
            [Obsolete("Use PrimitiveType overload instead")]
            public static
                unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type,
                    [In] [Out] ref T3 indices, int primcount, int modestride)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }
        }

        partial class NV
        {
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "",
                EntryPoint = "glDeleteTransformFeedbacksNV")]
            [Obsolete("Use DeleteTransformFeedbacks overload instead")]
            public static
                void DeleteTransformFeedback(int n, int[] ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "",
                EntryPoint = "glDeleteTransformFeedbacksNV")]
            [Obsolete("Use DeleteTransformFeedbacks overload instead")]
            public static
                void DeleteTransformFeedback(int n, ref int ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "",
                EntryPoint = "glDeleteTransformFeedbacksNV")]
            [Obsolete("Use DeleteTransformFeedbacks overload instead")]
            public static
                unsafe void DeleteTransformFeedback(int n, int* ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "",
                EntryPoint = "glDeleteTransformFeedbacksNV")]
            [Obsolete("Use DeleteTransformFeedbacks overload instead")]
            public static
                void DeleteTransformFeedback(int n, uint[] ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "",
                EntryPoint = "glDeleteTransformFeedbacksNV")]
            [Obsolete("Use DeleteTransformFeedbacks overload instead")]
            public static
                void DeleteTransformFeedback(int n, ref uint ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "",
                EntryPoint = "glDeleteTransformFeedbacksNV")]
            [Obsolete("Use DeleteTransformFeedbacks overload instead")]
            public static
                unsafe void DeleteTransformFeedback(int n, uint* ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            [Obsolete("Use GenTransformFeedbacks overload instead")]
            public static
                void GenTransformFeedback(int n, [Out] int[] ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            [Obsolete("Use GenTransformFeedbacks overload instead")]
            public static
                void GenTransformFeedback(int n, [Out] out int ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            [Obsolete("Use GenTransformFeedbacks overload instead")]
            public static
                unsafe void GenTransformFeedback(int n, [Out] int* ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            [Obsolete("Use GenTransformFeedbacks overload instead")]
            public static
                void GenTransformFeedback(int n, [Out] uint[] ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            [Obsolete("Use GenTransformFeedbacks overload instead")]
            public static
                void GenTransformFeedback(int n, [Out] out uint ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            [Obsolete("Use GenTransformFeedbacks overload instead")]
            public static
                unsafe void GenTransformFeedback(int n, [Out] uint* ids)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glGetProgramNamedParameterdvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void GetProgramNamedParameter(int id, int len, byte* name, [Out] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glGetProgramNamedParameterdvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void GetProgramNamedParameter(uint id, int len, byte* name, [Out] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glGetProgramNamedParameterfvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void GetProgramNamedParameter(int id, int len, byte* name, [Out] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glGetProgramNamedParameterfvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void GetProgramNamedParameter(uint id, int len, byte* name, [Out] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoi64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoi64(int video_slot, NvPresentVideo pname, [Out] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoi64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoi64(int video_slot, NvPresentVideo pname, [Out] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoi64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                unsafe void GetVideoi64(int video_slot, NvPresentVideo pname, [Out] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoi64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoi64(uint video_slot, NvPresentVideo pname, [Out] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoi64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoi64(uint video_slot, NvPresentVideo pname, [Out] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoi64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                unsafe void GetVideoi64(uint video_slot, NvPresentVideo pname, [Out] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoui64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoui64(int video_slot, NvPresentVideo pname, [Out] long[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoui64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoui64(int video_slot, NvPresentVideo pname, [Out] out long @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoui64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                unsafe void GetVideoui64(int video_slot, NvPresentVideo pname, [Out] long* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoui64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoui64(uint video_slot, NvPresentVideo pname, [Out] ulong[] @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoui64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                void GetVideoui64(uint video_slot, NvPresentVideo pname, [Out] out ulong @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvPresentVideo", Version = "1.2", EntryPoint = "glGetVideoui64vNV")]
            [Obsolete("Use GetVideo overload instead")]
            public static
                unsafe void GetVideoui64(uint video_slot, NvPresentVideo pname, [Out] ulong* @params)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glProgramNamedParameter4dvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ProgramNamedParameter4(int id, int len, byte* name, double[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glProgramNamedParameter4dvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ProgramNamedParameter4(uint id, int len, byte* name, double[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glProgramNamedParameter4fvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ProgramNamedParameter4(int id, int len, byte* name, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2",
                EntryPoint = "glProgramNamedParameter4fvNV")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ProgramNamedParameter4(uint id, int len, byte* name, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }
        }

        partial class Sun
        {
            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiColor3fVertex3(int* rc, float[] c, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiColor3fVertex3(uint* rc, float[] c, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiColor4fNormal3fVertex3(int* rc, float[] c, float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiColor4fNormal3fVertex3(uint* rc, float[] c, float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiColor4ubVertex3(int* rc, byte[] c, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiColor4ubVertex3(uint* rc, byte[] c, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiNormal3fVertex3(int* rc, float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiNormal3fVertex3(uint* rc, float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int* rc, float[] tc, float[] c, float[] n,
                    float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint* rc, float[] tc, float[] c,
                    float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(int* rc, float[] tc, float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint* rc, float[] tc, float[] n, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiTexCoord2fVertex3(int* rc, float[] tc, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1",
                EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiTexCoord2fVertex3(uint* rc, float[] tc, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiVertex3(int* rc, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }


            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            [Obsolete("Use ref/array overload instead")]
            public static
                unsafe void ReplacementCodeuiVertex3(uint* rc, float[] v)
            {
                throw new BindingsNotRewrittenException();
            }
        }
    }
}
