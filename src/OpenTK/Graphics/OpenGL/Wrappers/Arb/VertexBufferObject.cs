//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexBufferObject" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Bind a named buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="buffer">
            /// Specifies the name of a buffer object.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBindBufferARB")]
            public static void BindBuffer(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData(OpenTK.Graphics.OpenGL.BufferTargetArb target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Creates and initializes a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the buffer object's new data store.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
            /// </param>
            /// <param name="usage">
            /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferDataARB")]
            public static void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageArb usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Updates a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being replaced.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the new data that will be copied into the data store.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glBufferSubDataARB")]
            public static void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Delete named buffer objects
            /// </summary>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array of buffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glDeleteBuffersARB")]
            public static void DeleteBuffer([CountAttribute(Parameter = "n")] uint buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Delete named buffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffer objects to be deleted.
            /// </param>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array of buffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glDeleteBuffersARB")]
            public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint[] buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Delete named buffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffer objects to be deleted.
            /// </param>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array of buffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glDeleteBuffersARB")]
            public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref uint buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Delete named buffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffer objects to be deleted.
            /// </param>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array of buffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glDeleteBuffersARB")]
            public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Generate buffer object names
            /// </summary>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGenBuffersARB")]
            public static uint GenBuffer()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Generate buffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffer object names to be generated.
            /// </param>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array in which the generated buffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGenBuffersARB")]
            public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Generate buffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffer object names to be generated.
            /// </param>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array in which the generated buffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGenBuffersARB")]
            public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Generate buffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of buffer object names to be generated.
            /// </param>
            /// <param name="buffers">
            /// [length: n]
            /// Specifies an array in which the generated buffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGenBuffersARB")]
            public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferParameterivARB")]
            public static void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferParameterNameArb pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferParameterivARB")]
            public static void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferParameterNameArb pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Return parameters of a buffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Returns the requested parameter.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferParameterivARB")]
            public static unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferParameterNameArb pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferPointervARB")]
            public static void GetBufferPointer(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferPointerNameArb pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferPointervARB")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferPointerNameArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferPointervARB")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferPointerNameArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferPointervARB")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferPointerNameArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferPointervARB")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferPointerNameArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Returns a subset of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset">
            /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
            /// </param>
            /// <param name="size">
            /// Specifies the size in bytes of the data store region being returned.
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// Specifies a pointer to the location where buffer object data is returned.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glGetBufferSubDataARB")]
            public static void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Determine if a name corresponds to a buffer object
            /// </summary>
            /// <param name="buffer">
            /// Specifies a value that may be the name of a buffer object.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glIsBufferARB")]
            public static bool IsBuffer(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access">
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glMapBufferARB")]
            public static IntPtr MapBuffer(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferAccessArb access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_buffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_buffer_object", Version = "", EntryPoint = "glUnmapBufferARB")]
            public static bool UnmapBuffer(OpenTK.Graphics.OpenGL.BufferTargetArb target)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(46)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindBufferARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint buffer);

            [Slot(137)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBufferDataARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageArb usage);

            [Slot(144)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBufferSubDataARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);

            [Slot(406)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteBuffersARB(int n, [CountAttribute(Parameter = "n")] uint* buffers);

            [Slot(660)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenBuffersARB(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);

            [Slot(719)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetBufferParameterivARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferParameterNameArb pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(722)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetBufferPointervARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferPointerNameArb pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);

            [Slot(724)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetBufferSubDataARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data);

            [Slot(1217)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsBufferARB(uint buffer);

            [Slot(1324)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern IntPtr glMapBufferARB(OpenTK.Graphics.OpenGL.BufferTargetArb target, OpenTK.Graphics.OpenGL.BufferAccessArb access);

            [Slot(2490)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glUnmapBufferARB(OpenTK.Graphics.OpenGL.BufferTargetArb target);
        }
    }
}
