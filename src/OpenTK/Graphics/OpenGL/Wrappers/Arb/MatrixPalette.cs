//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "MatrixPalette" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glCurrentPaletteMatrixARB")]
            public static void CurrentPaletteMatrix(int index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerARB")]
            public static void MatrixIndexPointer(int size, OpenTK.Graphics.OpenGL.ArbMatrixPalette type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerARB")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.OpenGL.ArbMatrixPalette type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerARB")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.OpenGL.ArbMatrixPalette type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerARB")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.OpenGL.ArbMatrixPalette type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexPointerARB")]
            public static void MatrixIndexPointer<T3>(int size, OpenTK.Graphics.OpenGL.ArbMatrixPalette type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexubvARB")]
            public static void MatrixIndex(int size, [CountAttribute(Parameter = "size")] Byte[] indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexubvARB")]
            public static void MatrixIndex(int size, [CountAttribute(Parameter = "size")] ref Byte indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexubvARB")]
            public static unsafe void MatrixIndex(int size, [CountAttribute(Parameter = "size")] Byte* indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexuivARB")]
            public static void MatrixIndex(int size, [CountAttribute(Parameter = "size")] uint[] indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexuivARB")]
            public static void MatrixIndex(int size, [CountAttribute(Parameter = "size")] ref uint indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexuivARB")]
            public static unsafe void MatrixIndex(int size, [CountAttribute(Parameter = "size")] uint* indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexusvARB")]
            public static void MatrixIndex(int size, [CountAttribute(Parameter = "size")] ushort[] indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexusvARB")]
            public static void MatrixIndex(int size, [CountAttribute(Parameter = "size")] ref ushort indices)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_matrix_palette]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="indices">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "ARB_matrix_palette", Version = "", EntryPoint = "glMatrixIndexusvARB")]
            public static unsafe void MatrixIndex(int size, [CountAttribute(Parameter = "size")] ushort* indices)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(388)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCurrentPaletteMatrixARB(int index);

            [Slot(1352)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMatrixIndexPointerARB(int size, OpenTK.Graphics.OpenGL.ArbMatrixPalette type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

            [Slot(1353)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMatrixIndexubvARB(int size, [CountAttribute(Parameter = "size")] Byte* indices);

            [Slot(1354)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMatrixIndexuivARB(int size, [CountAttribute(Parameter = "size")] uint* indices);

            [Slot(1355)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMatrixIndexusvARB(int size, [CountAttribute(Parameter = "size")] ushort* indices);
        }
    }
}
