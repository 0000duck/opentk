//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "TextureCompression" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage1DARB")]
            public static void CompressedTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage1DARB")]
            public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage1DARB")]
            public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage1DARB")]
            public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage1DARB")]
            public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage2DARB")]
            public static void CompressedTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage2DARB")]
            public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage2DARB")]
            public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage2DARB")]
            public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage2DARB")]
            public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage3DARB")]
            public static void CompressedTexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage3DARB")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage3DARB")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage3DARB")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border">
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexImage3DARB")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a one-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a two-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[] data)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,] data)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,,] data)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth">
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format">
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize">
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">
            /// [length: imageSize]
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T10 data)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Return a compressed texture image
            /// </summary>
            /// <param name="target">
            /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,level)]
            /// Returns the compressed texture image.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glGetCompressedTexImageARB")]
            public static void GetCompressedTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Return a compressed texture image
            /// </summary>
            /// <param name="target">
            /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,level)]
            /// Returns the compressed texture image.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glGetCompressedTexImageARB")]
            public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[] img)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Return a compressed texture image
            /// </summary>
            /// <param name="target">
            /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,level)]
            /// Returns the compressed texture image.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glGetCompressedTexImageARB")]
            public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,] img)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Return a compressed texture image
            /// </summary>
            /// <param name="target">
            /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,level)]
            /// Returns the compressed texture image.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glGetCompressedTexImageARB")]
            public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,,] img)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_texture_compression]
            /// Return a compressed texture image
            /// </summary>
            /// <param name="target">
            /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,level)]
            /// Returns the compressed texture image.
            /// </param>
            [AutoGenerated(Category = "ARB_texture_compression", Version = "", EntryPoint = "glGetCompressedTexImageARB")]
            public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] ref T2 img)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(285)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTexImage1DARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

            [Slot(287)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTexImage2DARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

            [Slot(289)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTexImage3DARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

            [Slot(291)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTexSubImage1DARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

            [Slot(293)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTexSubImage2DARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

            [Slot(295)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTexSubImage3DARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

            [Slot(745)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetCompressedTexImageARB(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img);
        }
    }
}
