//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexShader" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_vertex_shader]
            /// Associates a generic vertex attribute index with a named attribute variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the handle of the program object in which the association is to be made.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be bound.
            /// </param>
            /// <param name="name">
            /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "", EntryPoint = "glBindAttribLocationARB")]
            public static void BindAttribLocation(uint programObj, uint index, String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_shader]
            /// Returns information about an active attribute variable for the specified program object
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the attribute variable to be queried.
            /// </param>
            /// <param name="maxLength">
            /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
            /// </param>
            /// <param name="size">
            /// [length: 1]
            /// Returns the size of the attribute variable.
            /// </param>
            /// <param name="type">
            /// [length: 1]
            /// Returns the data type of the attribute variable.
            /// </param>
            /// <param name="name">
            /// [length: maxLength]
            /// Returns a null terminated string containing the name of the attribute variable.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "", EntryPoint = "glGetActiveAttribARB")]
            public static void GetActiveAttrib(uint programObj, uint index, int maxLength, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL.AttributeType type, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_shader]
            /// Returns information about an active attribute variable for the specified program object
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the attribute variable to be queried.
            /// </param>
            /// <param name="maxLength">
            /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
            /// </param>
            /// <param name="size">
            /// [length: 1]
            /// Returns the size of the attribute variable.
            /// </param>
            /// <param name="type">
            /// [length: 1]
            /// Returns the data type of the attribute variable.
            /// </param>
            /// <param name="name">
            /// [length: maxLength]
            /// Returns a null terminated string containing the name of the attribute variable.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "", EntryPoint = "glGetActiveAttribARB")]
            public static unsafe void GetActiveAttrib(uint programObj, uint index, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL.AttributeType* type, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_shader]
            /// Returns the location of an attribute variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="name">
            /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_shader", Version = "", EntryPoint = "glGetAttribLocationARB")]
            public static int GetAttribLocation(uint programObj, String name)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(44)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindAttribLocationARB(uint programObj, uint index, IntPtr name);

            [Slot(697)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetActiveAttribARB(uint programObj, uint index, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL.AttributeType* type, [OutAttribute, CountAttribute(Parameter = "maxLength")] IntPtr name);

            [Slot(713)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern int glGetAttribLocationARB(uint programObj, IntPtr name);
        }
    }
}
