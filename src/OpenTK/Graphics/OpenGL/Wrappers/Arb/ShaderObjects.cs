//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "ShaderObjects" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="containerObj">
            /// </param>
            /// <param name="obj">
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glAttachObjectARB")]
            public static void AttachObject(uint containerObj, uint obj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Compiles a shader object
            /// </summary>
            /// <param name="shaderObj">
            /// Specifies the shader object to be compiled.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glCompileShaderARB")]
            public static void CompileShader(uint shaderObj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glCreateProgramObjectARB")]
            public static uint CreateProgramObject()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="shaderType">
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glCreateShaderObjectARB")]
            public static uint CreateShaderObject(OpenTK.Graphics.OpenGL.ShaderType shaderType)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glDeleteObjectARB")]
            public static void DeleteObject(uint obj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="containerObj">
            /// </param>
            /// <param name="attachedObj">
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glDetachObjectARB")]
            public static void DetachObject(uint containerObj, uint attachedObj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns information about an active uniform variable for the specified program object
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the uniform variable to be queried.
            /// </param>
            /// <param name="maxLength">
            /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
            /// </param>
            /// <param name="size">
            /// [length: 1]
            /// Returns the size of the uniform variable.
            /// </param>
            /// <param name="type">
            /// [length: 1]
            /// Returns the data type of the uniform variable.
            /// </param>
            /// <param name="name">
            /// [length: maxLength]
            /// Returns a null terminated string containing the name of the uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetActiveUniformARB")]
            public static void GetActiveUniform(uint programObj, uint index, int maxLength, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL.AttributeType type, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns information about an active uniform variable for the specified program object
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="index">
            /// Specifies the index of the uniform variable to be queried.
            /// </param>
            /// <param name="maxLength">
            /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
            /// </param>
            /// <param name="size">
            /// [length: 1]
            /// Returns the size of the uniform variable.
            /// </param>
            /// <param name="type">
            /// [length: 1]
            /// Returns the data type of the uniform variable.
            /// </param>
            /// <param name="name">
            /// [length: maxLength]
            /// Returns a null terminated string containing the name of the uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetActiveUniformARB")]
            public static unsafe void GetActiveUniform(uint programObj, uint index, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL.AttributeType* type, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="containerObj">
            /// </param>
            /// <param name="maxCount">
            /// </param>
            /// <param name="count">
            /// [length: 1]
            /// </param>
            /// <param name="obj">
            /// [length: maxCount]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetAttachedObjectsARB")]
            public static void GetAttachedObjects(uint containerObj, int maxCount, [OutAttribute, CountAttribute(Count = 1)] out int count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint[] obj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="containerObj">
            /// </param>
            /// <param name="maxCount">
            /// </param>
            /// <param name="count">
            /// [length: 1]
            /// </param>
            /// <param name="obj">
            /// [length: maxCount]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetAttachedObjectsARB")]
            public static void GetAttachedObjects(uint containerObj, int maxCount, [OutAttribute, CountAttribute(Count = 1)] out int count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out uint obj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="containerObj">
            /// </param>
            /// <param name="maxCount">
            /// </param>
            /// <param name="count">
            /// [length: 1]
            /// </param>
            /// <param name="obj">
            /// [length: maxCount]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetAttachedObjectsARB")]
            public static unsafe void GetAttachedObjects(uint containerObj, int maxCount, [OutAttribute, CountAttribute(Count = 1)] int* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint* obj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetHandleARB")]
            public static uint GetHandle(OpenTK.Graphics.OpenGL.ArbShaderObjects pname)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="maxLength">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="infoLog">
            /// [length: maxLength]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetInfoLogARB")]
            public static void GetInfoLog(uint obj, int maxLength, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String infoLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="maxLength">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="infoLog">
            /// [length: maxLength]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetInfoLogARB")]
            public static unsafe void GetInfoLog(uint obj, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String infoLog)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetObjectParameterfvARB")]
            public static void GetObjectParameter(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetObjectParameterfvARB")]
            public static void GetObjectParameter(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetObjectParameterfvARB")]
            public static unsafe void GetObjectParameter(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetObjectParameterivARB")]
            public static void GetObjectParameter(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetObjectParameterivARB")]
            public static void GetObjectParameter(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="obj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetObjectParameterivARB")]
            public static unsafe void GetObjectParameter(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the source code string from a shader object
            /// </summary>
            /// <param name="obj">
            /// Specifies the shader object to be queried.
            /// </param>
            /// <param name="maxLength">
            /// Specifies the size of the character buffer for storing the returned source code string.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Returns the length of the string returned in source (excluding the null terminator).
            /// </param>
            /// <param name="source">
            /// [length: maxLength]
            /// Specifies an array of characters that is used to return the source code string.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetShaderSourceARB")]
            public static void GetShaderSource(uint obj, int maxLength, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String source)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the source code string from a shader object
            /// </summary>
            /// <param name="obj">
            /// Specifies the shader object to be queried.
            /// </param>
            /// <param name="maxLength">
            /// Specifies the size of the character buffer for storing the returned source code string.
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// Returns the length of the string returned in source (excluding the null terminator).
            /// </param>
            /// <param name="source">
            /// [length: maxLength]
            /// Specifies an array of characters that is used to return the source code string.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetShaderSourceARB")]
            public static unsafe void GetShaderSource(uint obj, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "maxLength")] out String source)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the location of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="name">
            /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformLocationARB")]
            public static int GetUniformLocation(uint programObj, String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(programObj,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformfvARB")]
            public static void GetUniform(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(programObj,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformfvARB")]
            public static void GetUniform(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(programObj,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformfvARB")]
            public static unsafe void GetUniform(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(programObj,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformivARB")]
            public static void GetUniform(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(programObj,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformivARB")]
            public static void GetUniform(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="programObj">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(programObj,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glGetUniformivARB")]
            public static unsafe void GetUniform(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Links a program object
            /// </summary>
            /// <param name="programObj">
            /// Specifies the handle of the program object to be linked.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glLinkProgramARB")]
            public static void LinkProgram(uint programObj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Replaces the source code in a shader object
            /// </summary>
            /// <param name="shaderObj">
            /// Specifies the handle of the shader object whose source code is to be replaced.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements in the string and length arrays.
            /// </param>
            /// <param name="@string">
            /// [length: count]
            /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            /// </param>
            /// <param name="length">
            /// [length: count]
            /// Specifies an array of string lengths.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glShaderSourceARB")]
            public static void ShaderSource(uint shaderObj, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] int[] length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Replaces the source code in a shader object
            /// </summary>
            /// <param name="shaderObj">
            /// Specifies the handle of the shader object whose source code is to be replaced.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements in the string and length arrays.
            /// </param>
            /// <param name="@string">
            /// [length: count]
            /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            /// </param>
            /// <param name="length">
            /// [length: count]
            /// Specifies an array of string lengths.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glShaderSourceARB")]
            public static void ShaderSource(uint shaderObj, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] ref int length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Replaces the source code in a shader object
            /// </summary>
            /// <param name="shaderObj">
            /// Specifies the handle of the shader object whose source code is to be replaced.
            /// </param>
            /// <param name="count">
            /// Specifies the number of elements in the string and length arrays.
            /// </param>
            /// <param name="@string">
            /// [length: count]
            /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            /// </param>
            /// <param name="length">
            /// [length: count]
            /// Specifies an array of string lengths.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glShaderSourceARB")]
            public static unsafe void ShaderSource(uint shaderObj, int count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] int* length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1fARB")]
            public static void Uniform1(int location, float v0)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1fvARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1fvARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1fvARB")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1iARB")]
            public static void Uniform1(int location, int v0)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1ivARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1ivARB")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform1ivARB")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2fARB")]
            public static void Uniform2(int location, float v0, float v1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2fvARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2fvARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2fvARB")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2iARB")]
            public static void Uniform2(int location, int v0, int v1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2ivARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2ivARB")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform2ivARB")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3fARB")]
            public static void Uniform3(int location, float v0, float v1, float v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3fvARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3fvARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3fvARB")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3iARB")]
            public static void Uniform3(int location, int v0, int v1, int v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3ivARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3ivARB")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform3ivARB")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4fARB")]
            public static void Uniform4(int location, float v0, float v1, float v2, float v3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4fvARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4fvARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4fvARB")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4iARB")]
            public static void Uniform4(int location, int v0, int v1, int v2, int v3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4ivARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] int[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4ivARB")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniform4ivARB")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] int* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix2fvARB")]
            public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix2fvARB")]
            public static void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix2fvARB")]
            public static unsafe void UniformMatrix2(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix3fvARB")]
            public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix3fvARB")]
            public static void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix3fvARB")]
            public static unsafe void UniformMatrix3(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix4fvARB")]
            public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix4fvARB")]
            public static void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUniformMatrix4fvARB")]
            public static unsafe void UniformMatrix4(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// </summary>
            /// <param name="programObj">
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glUseProgramObjectARB")]
            public static void UseProgramObject(uint programObj)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_shader_objects]
            /// Validates a program object
            /// </summary>
            /// <param name="programObj">
            /// Specifies the handle of the program object to be validated.
            /// </param>
            [AutoGenerated(Category = "ARB_shader_objects", Version = "", EntryPoint = "glValidateProgramARB")]
            public static void ValidateProgram(uint programObj)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(25)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glAttachObjectARB(uint containerObj, uint obj);

            [Slot(276)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompileShaderARB(uint shaderObj);

            [Slot(370)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glCreateProgramObjectARB();

            [Slot(376)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glCreateShaderObjectARB(OpenTK.Graphics.OpenGL.ShaderType shaderType);

            [Slot(417)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDeleteObjectARB(uint obj);

            [Slot(455)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDetachObjectARB(uint containerObj, uint attachedObj);

            [Slot(702)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetActiveUniformARB(uint programObj, uint index, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL.AttributeType* type, [OutAttribute, CountAttribute(Parameter = "maxLength")] IntPtr name);

            [Slot(710)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetAttachedObjectsARB(uint containerObj, int maxCount, [OutAttribute, CountAttribute(Count = 1)] int* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] uint* obj);

            [Slot(792)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glGetHandleARB(OpenTK.Graphics.OpenGL.ArbShaderObjects pname);

            [Slot(804)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetInfoLogARB(uint obj, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "maxLength")] IntPtr infoLog);

            [Slot(932)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetObjectParameterfvARB(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(934)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetObjectParameterivARB(uint obj, OpenTK.Graphics.OpenGL.ArbShaderObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1036)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetShaderSourceARB(uint obj, int maxLength, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Parameter = "maxLength")] IntPtr source);

            [Slot(1103)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern int glGetUniformLocationARB(uint programObj, IntPtr name);

            [Slot(1096)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetUniformfvARB(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] float* @params);

            [Slot(1101)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetUniformivARB(uint programObj, int location, [OutAttribute, CountAttribute(Computed = "programObj,location")] int* @params);

            [Slot(1284)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glLinkProgramARB(uint programObj);

            [Slot(2105)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glShaderSourceARB(uint shaderObj, int count, [CountAttribute(Parameter = "count")] IntPtr @string, [CountAttribute(Parameter = "count")] int* length);

            [Slot(2373)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform1fARB(int location, float v0);

            [Slot(2375)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform1fvARB(int location, int count, [CountAttribute(Parameter = "count*1")] float* value);

            [Slot(2381)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform1iARB(int location, int v0);

            [Slot(2383)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform1ivARB(int location, int count, [CountAttribute(Parameter = "count*1")] int* value);

            [Slot(2395)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform2fARB(int location, float v0, float v1);

            [Slot(2397)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform2fvARB(int location, int count, [CountAttribute(Parameter = "count*2")] float* value);

            [Slot(2403)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform2iARB(int location, int v0, int v1);

            [Slot(2405)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform2ivARB(int location, int count, [CountAttribute(Parameter = "count*2")] int* value);

            [Slot(2417)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform3fARB(int location, float v0, float v1, float v2);

            [Slot(2419)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform3fvARB(int location, int count, [CountAttribute(Parameter = "count*3")] float* value);

            [Slot(2425)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform3iARB(int location, int v0, int v1, int v2);

            [Slot(2427)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform3ivARB(int location, int count, [CountAttribute(Parameter = "count*3")] int* value);

            [Slot(2439)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform4fARB(int location, float v0, float v1, float v2, float v3);

            [Slot(2441)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform4fvARB(int location, int count, [CountAttribute(Parameter = "count*4")] float* value);

            [Slot(2447)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform4iARB(int location, int v0, int v1, int v2, int v3);

            [Slot(2449)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform4ivARB(int location, int count, [CountAttribute(Parameter = "count*4")] int* value);

            [Slot(2466)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix2fvARB(int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] float* value);

            [Slot(2473)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix3fvARB(int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] float* value);

            [Slot(2480)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniformMatrix4fvARB(int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] float* value);

            [Slot(2497)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUseProgramObjectARB(uint programObj);

            [Slot(2502)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glValidateProgramARB(uint programObj);
        }
    }
}
