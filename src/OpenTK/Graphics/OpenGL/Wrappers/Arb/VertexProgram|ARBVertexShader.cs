//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexProgram|ARBVertexShader" in the extension "Arb".
        /// </summary>
        public static partial class Arb
        {
            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glDisableVertexAttribArrayARB")]
            public static void DisableVertexAttribArray(uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Enable or disable a generic vertex attribute array
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be enabled or disabled.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glEnableVertexAttribArrayARB")]
            public static void EnableVertexAttribArray(uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribPointervARB")]
            public static void GetVertexAttribPointer(uint index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterArb pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribPointervARB")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribPointervARB")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribPointervARB")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribPointervARB")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterArb pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribdvARB")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribdvARB")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribdvARB")]
            public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribfvARB")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribfvARB")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribfvARB")]
            public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribivARB")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribivARB")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glGetVertexAttribivARB")]
            public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1dARB")]
            public static void VertexAttrib1(uint index, double x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1dvARB")]
            public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1dvARB")]
            public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1fARB")]
            public static void VertexAttrib1(uint index, float x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1fvARB")]
            public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1fvARB")]
            public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1sARB")]
            public static void VertexAttrib1(uint index, short x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1svARB")]
            public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib1svARB")]
            public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2dARB")]
            public static void VertexAttrib2(uint index, double x, double y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2dvARB")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2dvARB")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2dvARB")]
            public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2fARB")]
            public static void VertexAttrib2(uint index, float x, float y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2fvARB")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2fvARB")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2fvARB")]
            public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2sARB")]
            public static void VertexAttrib2(uint index, short x, short y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2svARB")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2svARB")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib2svARB")]
            public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3dARB")]
            public static void VertexAttrib3(uint index, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3dvARB")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3dvARB")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3dvARB")]
            public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3fARB")]
            public static void VertexAttrib3(uint index, float x, float y, float z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3fvARB")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3fvARB")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3fvARB")]
            public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3sARB")]
            public static void VertexAttrib3(uint index, short x, short y, short z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3svARB")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3svARB")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib3svARB")]
            public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NbvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] SByte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NbvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref SByte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NbvARB")]
            public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] SByte* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NivARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NivARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NivARB")]
            public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NsvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NsvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NsvARB")]
            public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NubARB")]
            public static void VertexAttrib4N(uint index, Byte x, Byte y, Byte z, Byte w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NubvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] Byte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NubvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref Byte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NubvARB")]
            public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] Byte* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NuivARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] uint[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NuivARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref uint v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NuivARB")]
            public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] uint* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NusvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ushort[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NusvARB")]
            public static void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ref ushort v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4NusvARB")]
            public static unsafe void VertexAttrib4N(uint index, [CountAttribute(Count = 4)] ushort* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4bvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] SByte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4bvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref SByte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4bvARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] SByte* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4dARB")]
            public static void VertexAttrib4(uint index, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4dvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4dvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4dvARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4fARB")]
            public static void VertexAttrib4(uint index, float x, float y, float z, float w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4fvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4fvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4fvARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4ivARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4ivARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4ivARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4sARB")]
            public static void VertexAttrib4(uint index, short x, short y, short z, short w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4svARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4svARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4svARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4ubvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] Byte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4ubvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref Byte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4ubvARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] Byte* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4uivARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] uint[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4uivARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref uint v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4uivARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] uint* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4usvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ushort[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4usvARB")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref ushort v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttrib4usvARB")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ushort* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="size">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="normalized">
            /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttribPointerARB")]
            public static void VertexAttribPointer(uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeArb type, bool normalized, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="size">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="normalized">
            /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttribPointerARB")]
            public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeArb type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[] pointer)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="size">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="normalized">
            /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttribPointerARB")]
            public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeArb type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,] pointer)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="size">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="normalized">
            /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttribPointerARB")]
            public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeArb type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,,] pointer)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ARB_vertex_program|ARB_vertex_shader]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="size">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="normalized">
            /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "ARB_vertex_program|ARB_vertex_shader", Version = "", EntryPoint = "glVertexAttribPointerARB")]
            public static void VertexAttribPointer<T5>(uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeArb type, bool normalized, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T5 pointer)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(470)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableVertexAttribArrayARB(uint index);

            [Slot(534)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableVertexAttribArrayARB(uint index);

            [Slot(1147)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetVertexAttribPointervARB(uint index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameterArb pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer);

            [Slot(1129)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexAttribdvARB(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] double* @params);

            [Slot(1132)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexAttribfvARB(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] float* @params);

            [Slot(1139)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexAttribivARB(uint index, OpenTK.Graphics.OpenGL.VertexAttribParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] int* @params);

            [Slot(2598)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib1dARB(uint index, double x);

            [Slot(2601)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib1dvARB(uint index, [CountAttribute(Count = 1)] double* v);

            [Slot(2604)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib1fARB(uint index, float x);

            [Slot(2607)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib1fvARB(uint index, [CountAttribute(Count = 1)] float* v);

            [Slot(2612)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib1sARB(uint index, short x);

            [Slot(2615)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib1svARB(uint index, [CountAttribute(Count = 1)] short* v);

            [Slot(2618)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib2dARB(uint index, double x, double y);

            [Slot(2621)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib2dvARB(uint index, [CountAttribute(Count = 2)] double* v);

            [Slot(2624)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib2fARB(uint index, float x, float y);

            [Slot(2627)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib2fvARB(uint index, [CountAttribute(Count = 2)] float* v);

            [Slot(2632)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib2sARB(uint index, short x, short y);

            [Slot(2635)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib2svARB(uint index, [CountAttribute(Count = 2)] short* v);

            [Slot(2638)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib3dARB(uint index, double x, double y, double z);

            [Slot(2641)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib3dvARB(uint index, [CountAttribute(Count = 3)] double* v);

            [Slot(2644)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib3fARB(uint index, float x, float y, float z);

            [Slot(2647)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib3fvARB(uint index, [CountAttribute(Count = 3)] float* v);

            [Slot(2652)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib3sARB(uint index, short x, short y, short z);

            [Slot(2655)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib3svARB(uint index, [CountAttribute(Count = 3)] short* v);

            [Slot(2676)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4NbvARB(uint index, [CountAttribute(Count = 4)] SByte* v);

            [Slot(2678)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4NivARB(uint index, [CountAttribute(Count = 4)] int* v);

            [Slot(2680)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4NsvARB(uint index, [CountAttribute(Count = 4)] short* v);

            [Slot(2682)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4NubARB(uint index, Byte x, Byte y, Byte z, Byte w);

            [Slot(2684)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4NubvARB(uint index, [CountAttribute(Count = 4)] Byte* v);

            [Slot(2686)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4NuivARB(uint index, [CountAttribute(Count = 4)] uint* v);

            [Slot(2688)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4NusvARB(uint index, [CountAttribute(Count = 4)] ushort* v);

            [Slot(2658)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4bvARB(uint index, [CountAttribute(Count = 4)] SByte* v);

            [Slot(2660)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4dARB(uint index, double x, double y, double z, double w);

            [Slot(2663)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4dvARB(uint index, [CountAttribute(Count = 4)] double* v);

            [Slot(2666)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4fARB(uint index, float x, float y, float z, float w);

            [Slot(2669)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4fvARB(uint index, [CountAttribute(Count = 4)] float* v);

            [Slot(2674)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4ivARB(uint index, [CountAttribute(Count = 4)] int* v);

            [Slot(2690)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4sARB(uint index, short x, short y, short z, short w);

            [Slot(2693)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4svARB(uint index, [CountAttribute(Count = 4)] short* v);

            [Slot(2697)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4ubvARB(uint index, [CountAttribute(Count = 4)] Byte* v);

            [Slot(2700)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4uivARB(uint index, [CountAttribute(Count = 4)] uint* v);

            [Slot(2702)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4usvARB(uint index, [CountAttribute(Count = 4)] ushort* v);

            [Slot(2801)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttribPointerARB(uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerTypeArb type, bool normalized, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        }
    }
}
