//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "TransformFeedback2" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Bind a transform feedback object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glBindTransformFeedbackNV")]
            public static void BindTransformFeedback(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Delete transform feedback objects
            /// </summary>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of names of transform feedback objects to delete.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static void DeleteTransformFeedback([CountAttribute(Parameter = "n")] uint ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Delete transform feedback objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of transform feedback objects to delete.
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of names of transform feedback objects to delete.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static void DeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] uint[] ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Delete transform feedback objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of transform feedback objects to delete.
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of names of transform feedback objects to delete.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static void DeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] ref uint ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Delete transform feedback objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of transform feedback objects to delete.
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of names of transform feedback objects to delete.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static unsafe void DeleteTransformFeedbacks(int n, [CountAttribute(Parameter = "n")] uint* ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Render primitives using a count derived from a transform feedback object
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
            /// </param>
            /// <param name="id">
            /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glDrawTransformFeedbackNV")]
            public static void DrawTransformFeedback(OpenTK.Graphics.OpenGL.PrimitiveType mode, uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Reserve transform feedback object names
            /// </summary>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static uint GenTransformFeedback()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Reserve transform feedback object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of transform feedback object names to reserve.
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static void GenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Reserve transform feedback object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of transform feedback object names to reserve.
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static void GenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Reserve transform feedback object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of transform feedback object names to reserve.
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static unsafe void GenTransformFeedbacks(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Determine if a name corresponds to a transform feedback object
            /// </summary>
            /// <param name="id">
            /// Specifies a value that may be the name of a transform feedback object.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glIsTransformFeedbackNV")]
            public static bool IsTransformFeedback(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Pause transform feedback operations
            /// </summary>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glPauseTransformFeedbackNV")]
            public static void PauseTransformFeedback()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback2]
            /// Resume transform feedback operations
            /// </summary>
            [AutoGenerated(Category = "NV_transform_feedback2", Version = "", EntryPoint = "glResumeTransformFeedbackNV")]
            public static void ResumeTransformFeedback()
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(85)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindTransformFeedbackNV(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint id);

            [Slot(440)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteTransformFeedbacksNV(int n, [CountAttribute(Parameter = "n")] uint* ids);

            [Slot(510)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDrawTransformFeedbackNV(OpenTK.Graphics.OpenGL.PrimitiveType mode, uint id);

            [Slot(691)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenTransformFeedbacksNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);

            [Slot(1258)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsTransformFeedbackNV(uint id);

            [Slot(1670)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPauseTransformFeedbackNV();

            [Slot(2021)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glResumeTransformFeedbackNV();
        }
    }
}
