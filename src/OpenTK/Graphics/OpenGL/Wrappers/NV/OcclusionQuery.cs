//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "OcclusionQuery" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glBeginOcclusionQueryNV")]
            public static void BeginOcclusionQuery(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static void DeleteOcclusionQuery([CountAttribute(Parameter = "n")] uint ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static void DeleteOcclusionQueries(int n, [CountAttribute(Parameter = "n")] uint[] ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static void DeleteOcclusionQueries(int n, [CountAttribute(Parameter = "n")] ref uint ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static unsafe void DeleteOcclusionQueries(int n, [CountAttribute(Parameter = "n")] uint* ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glEndOcclusionQueryNV")]
            public static void EndOcclusionQuery()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGenOcclusionQueriesNV")]
            public static uint GenOcclusionQuery()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGenOcclusionQueriesNV")]
            public static void GenOcclusionQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGenOcclusionQueriesNV")]
            public static void GenOcclusionQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="ids">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGenOcclusionQueriesNV")]
            public static unsafe void GenOcclusionQueries(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGetOcclusionQueryivNV")]
            public static void GetOcclusionQuery(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGetOcclusionQueryivNV")]
            public static void GetOcclusionQuery(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGetOcclusionQueryivNV")]
            public static unsafe void GetOcclusionQuery(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGetOcclusionQueryuivNV")]
            public static void GetOcclusionQuery(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGetOcclusionQueryuivNV")]
            public static void GetOcclusionQuery(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glGetOcclusionQueryuivNV")]
            public static unsafe void GetOcclusionQuery(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_occlusion_query]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "NV_occlusion_query", Version = "", EntryPoint = "glIsOcclusionQueryNV")]
            public static bool IsOcclusionQuery(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(32)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBeginOcclusionQueryNV(uint id);

            [Slot(418)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteOcclusionQueriesNV(int n, [CountAttribute(Parameter = "n")] uint* ids);

            [Slot(541)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEndOcclusionQueryNV();

            [Slot(673)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenOcclusionQueriesNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* ids);

            [Slot(937)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetOcclusionQueryivNV(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(938)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetOcclusionQueryuivNV(uint id, OpenTK.Graphics.OpenGL.NvOcclusionQuery pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);

            [Slot(1235)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsOcclusionQueryNV(uint id);
        }
    }
}
