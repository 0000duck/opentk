//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Evaluators" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glEvalMapsNV")]
            public static void EvalMap(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static void GetMapAttribParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static void GetMapAttribParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static unsafe void GetMapAttribParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapAttribParameterivNV")]
            public static void GetMapAttribParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapAttribParameterivNV")]
            public static void GetMapAttribParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapAttribParameterivNV")]
            public static unsafe void GetMapAttribParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapControlPointsNV")]
            public static void GetMapControlPoints(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, bool packed, [OutAttribute, CountAttribute(Computed = "target")] IntPtr points)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapControlPointsNV")]
            public static void GetMapControlPoints<T6>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target")] T6[] points)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapControlPointsNV")]
            public static void GetMapControlPoints<T6>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target")] T6[,] points)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapControlPointsNV")]
            public static void GetMapControlPoints<T6>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target")] T6[,,] points)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapControlPointsNV")]
            public static void GetMapControlPoints<T6>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target")] ref T6 points)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapParameterfvNV")]
            public static void GetMapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapParameterfvNV")]
            public static void GetMapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapParameterfvNV")]
            public static unsafe void GetMapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapParameterivNV")]
            public static void GetMapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapParameterivNV")]
            public static void GetMapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glGetMapParameterivNV")]
            public static unsafe void GetMapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target,uorder,vorder)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapControlPointsNV")]
            public static void MapControlPoints(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [CountAttribute(Computed = "target,uorder,vorder")] IntPtr points)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target,uorder,vorder)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapControlPointsNV")]
            public static void MapControlPoints<T8>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target,uorder,vorder")] T8[] points)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target,uorder,vorder)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapControlPointsNV")]
            public static void MapControlPoints<T8>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target,uorder,vorder")] T8[,] points)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target,uorder,vorder)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapControlPointsNV")]
            public static void MapControlPoints<T8>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target,uorder,vorder")] T8[,,] points)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="packed">
            /// </param>
            /// <param name="points">
            /// [length: COMPSIZE(target,uorder,vorder)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapControlPointsNV")]
            public static void MapControlPoints<T8>(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [InAttribute, OutAttribute, CountAttribute(Computed = "target,uorder,vorder")] ref T8 points)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapParameterfvNV")]
            public static void MapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapParameterfvNV")]
            public static void MapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapParameterfvNV")]
            public static unsafe void MapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapParameterivNV")]
            public static void MapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapParameterivNV")]
            public static void MapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_evaluators]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(target,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_evaluators", Version = "", EntryPoint = "glMapParameterivNV")]
            public static unsafe void MapParameter(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(564)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEvalMapsNV(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators mode);

            [Slot(828)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMapAttribParameterfvNV(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(829)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMapAttribParameterivNV(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(830)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetMapControlPointsNV(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, bool packed, [OutAttribute, CountAttribute(Computed = "target")] IntPtr points);

            [Slot(834)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMapParameterfvNV(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] float* @params);

            [Slot(835)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMapParameterivNV(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [OutAttribute, CountAttribute(Computed = "target,pname")] int* @params);

            [Slot(1326)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMapControlPointsNV(OpenTK.Graphics.OpenGL.NvEvaluators target, uint index, OpenTK.Graphics.OpenGL.NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [CountAttribute(Computed = "target,uorder,vorder")] IntPtr points);

            [Slot(1338)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMapParameterfvNV(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] float* @params);

            [Slot(1339)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMapParameterivNV(OpenTK.Graphics.OpenGL.NvEvaluators target, OpenTK.Graphics.OpenGL.NvEvaluators pname, [CountAttribute(Computed = "target,pname")] int* @params);
        }
    }
}
