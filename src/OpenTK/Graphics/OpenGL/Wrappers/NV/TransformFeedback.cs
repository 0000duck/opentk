//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "TransformFeedback" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="name">
            /// [length: COMPSIZE(name)]
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glActiveVaryingNV")]
            public static void ActiveVarying(uint program, [CountAttribute(Computed = "name")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Start transform feedback operation
            /// </summary>
            /// <param name="primitiveMode">
            /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glBeginTransformFeedbackNV")]
            public static void BeginTransformFeedback(OpenTK.Graphics.OpenGL.PrimitiveType primitiveMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Bind a buffer object to an indexed buffer target
            /// </summary>
            /// <param name="target">
            /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
            /// </param>
            /// <param name="index">
            /// Specify the index of the binding point within the array specified by target.
            /// </param>
            /// <param name="buffer">
            /// The name of a buffer object to bind to the specified binding point.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glBindBufferBaseNV")]
            public static void BindBufferBase(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glBindBufferOffsetNV")]
            public static void BindBufferOffset(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Bind a range within a buffer object to an indexed buffer target
            /// </summary>
            /// <param name="target">
            /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
            /// </param>
            /// <param name="index">
            /// Specify the index of the binding point within the array specified by target.
            /// </param>
            /// <param name="buffer">
            /// The name of a buffer object to bind to the specified binding point.
            /// </param>
            /// <param name="offset">
            /// The starting offset in basic machine units into the buffer object buffer.
            /// </param>
            /// <param name="size">
            /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glBindBufferRangeNV")]
            public static void BindBufferRange(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer, IntPtr offset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Bind a range within a buffer object to an indexed buffer target
            /// </summary>
            /// <param name="target">
            /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
            /// </param>
            /// <param name="index">
            /// Specify the index of the binding point within the array specified by target.
            /// </param>
            /// <param name="buffer">
            /// The name of a buffer object to bind to the specified binding point.
            /// </param>
            /// <param name="offset">
            /// The starting offset in basic machine units into the buffer object buffer.
            /// </param>
            /// <param name="size">
            /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glBindBufferRangeNV")]
            public static void BindBufferRange(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer, IntPtr offset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glEndTransformFeedbackNV")]
            public static void EndTransformFeedback()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="size">
            /// [length: 1]
            /// </param>
            /// <param name="type">
            /// [length: 1]
            /// </param>
            /// <param name="name">
            /// [length: COMPSIZE(program,index,bufSize)]
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glGetActiveVaryingNV")]
            public static void GetActiveVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] out int length, [OutAttribute, CountAttribute(Count = 1)] out int size, [OutAttribute, CountAttribute(Count = 1)] out OpenTK.Graphics.OpenGL.NvTransformFeedback type, [OutAttribute, CountAttribute(Computed = "program,index,bufSize")] out String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// [length: 1]
            /// </param>
            /// <param name="size">
            /// [length: 1]
            /// </param>
            /// <param name="type">
            /// [length: 1]
            /// </param>
            /// <param name="name">
            /// [length: COMPSIZE(program,index,bufSize)]
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glGetActiveVaryingNV")]
            public static unsafe void GetActiveVarying(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL.NvTransformFeedback* type, [OutAttribute, CountAttribute(Computed = "program,index,bufSize")] out String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Retrieve information about varying variables selected for transform feedback
            /// </summary>
            /// <param name="program">
            /// The name of the target program object.
            /// </param>
            /// <param name="index">
            /// The index of the varying variable whose information to retrieve.
            /// </param>
            /// <param name="location">
            /// [length: 1]
            /// The maximum number of characters, including the null terminator, that may be written into name.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static void GetTransformFeedbackVarying(uint program, uint index, [OutAttribute, CountAttribute(Count = 1)] out int location)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Retrieve information about varying variables selected for transform feedback
            /// </summary>
            /// <param name="program">
            /// The name of the target program object.
            /// </param>
            /// <param name="index">
            /// The index of the varying variable whose information to retrieve.
            /// </param>
            /// <param name="location">
            /// [length: 1]
            /// The maximum number of characters, including the null terminator, that may be written into name.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static unsafe void GetTransformFeedbackVarying(uint program, uint index, [OutAttribute, CountAttribute(Count = 1)] int* location)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="name">
            /// [length: COMPSIZE(name)]
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glGetVaryingLocationNV")]
            public static int GetVaryingLocation(uint program, [CountAttribute(Computed = "name")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="count">
            /// </param>
            /// <param name="attribs">
            /// [length: COMPSIZE(count)]
            /// </param>
            /// <param name="bufferMode">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static void TransformFeedbackAttrib(int count, [CountAttribute(Computed = "count")] int[] attribs, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="count">
            /// </param>
            /// <param name="attribs">
            /// [length: COMPSIZE(count)]
            /// </param>
            /// <param name="bufferMode">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static void TransformFeedbackAttrib(int count, [CountAttribute(Computed = "count")] ref int attribs, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="count">
            /// </param>
            /// <param name="attribs">
            /// [length: COMPSIZE(count)]
            /// </param>
            /// <param name="bufferMode">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static unsafe void TransformFeedbackAttrib(int count, [CountAttribute(Computed = "count")] int* attribs, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="count">
            /// </param>
            /// <param name="attribs">
            /// [length: count]
            /// </param>
            /// <param name="nbuffers">
            /// </param>
            /// <param name="bufstreams">
            /// [length: nbuffers]
            /// </param>
            /// <param name="bufferMode">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackStreamAttribsNV")]
            public static void TransformFeedbackStreamAttrib(int count, [CountAttribute(Parameter = "count")] int[] attribs, int nbuffers, [CountAttribute(Parameter = "nbuffers")] int[] bufstreams, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="count">
            /// </param>
            /// <param name="attribs">
            /// [length: count]
            /// </param>
            /// <param name="nbuffers">
            /// </param>
            /// <param name="bufstreams">
            /// [length: nbuffers]
            /// </param>
            /// <param name="bufferMode">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackStreamAttribsNV")]
            public static void TransformFeedbackStreamAttrib(int count, [CountAttribute(Parameter = "count")] ref int attribs, int nbuffers, [CountAttribute(Parameter = "nbuffers")] ref int bufstreams, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// </summary>
            /// <param name="count">
            /// </param>
            /// <param name="attribs">
            /// [length: count]
            /// </param>
            /// <param name="nbuffers">
            /// </param>
            /// <param name="bufstreams">
            /// [length: nbuffers]
            /// </param>
            /// <param name="bufferMode">
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackStreamAttribsNV")]
            public static unsafe void TransformFeedbackStreamAttrib(int count, [CountAttribute(Parameter = "count")] int* attribs, int nbuffers, [CountAttribute(Parameter = "nbuffers")] int* bufstreams, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Specify values to record in transform feedback buffers
            /// </summary>
            /// <param name="program">
            /// The name of the target program object.
            /// </param>
            /// <param name="count">
            /// The number of varying variables used for transform feedback.
            /// </param>
            /// <param name="locations">
            /// [length: count]
            /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
            /// </param>
            /// <param name="bufferMode">
            /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static void TransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] int[] locations, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Specify values to record in transform feedback buffers
            /// </summary>
            /// <param name="program">
            /// The name of the target program object.
            /// </param>
            /// <param name="count">
            /// The number of varying variables used for transform feedback.
            /// </param>
            /// <param name="locations">
            /// [length: count]
            /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
            /// </param>
            /// <param name="bufferMode">
            /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static void TransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] ref int locations, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_transform_feedback]
            /// Specify values to record in transform feedback buffers
            /// </summary>
            /// <param name="program">
            /// The name of the target program object.
            /// </param>
            /// <param name="count">
            /// The number of varying variables used for transform feedback.
            /// </param>
            /// <param name="locations">
            /// [length: count]
            /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
            /// </param>
            /// <param name="bufferMode">
            /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
            /// </param>
            [AutoGenerated(Category = "NV_transform_feedback", Version = "", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static unsafe void TransformFeedbackVaryings(uint program, int count, [CountAttribute(Parameter = "count")] int* locations, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(9)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glActiveVaryingNV(uint program, [CountAttribute(Computed = "name")] IntPtr name);

            [Slot(40)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBeginTransformFeedbackNV(OpenTK.Graphics.OpenGL.PrimitiveType primitiveMode);

            [Slot(49)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindBufferBaseNV(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer);

            [Slot(51)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindBufferOffsetNV(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer, IntPtr offset);

            [Slot(54)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindBufferRangeNV(OpenTK.Graphics.OpenGL.BufferTargetArb target, uint index, uint buffer, IntPtr offset, IntPtr size);

            [Slot(549)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEndTransformFeedbackNV();

            [Slot(707)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetActiveVaryingNV(uint program, uint index, int bufSize, [OutAttribute, CountAttribute(Count = 1)] int* length, [OutAttribute, CountAttribute(Count = 1)] int* size, [OutAttribute, CountAttribute(Count = 1)] OpenTK.Graphics.OpenGL.NvTransformFeedback* type, [OutAttribute, CountAttribute(Computed = "program,index,bufSize")] IntPtr name);

            [Slot(1091)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTransformFeedbackVaryingNV(uint program, uint index, [OutAttribute, CountAttribute(Count = 1)] int* location);

            [Slot(1118)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern int glGetVaryingLocationNV(uint program, [CountAttribute(Computed = "name")] IntPtr name);

            [Slot(2359)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTransformFeedbackAttribsNV(int count, [CountAttribute(Computed = "count")] int* attribs, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode);

            [Slot(2362)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTransformFeedbackStreamAttribsNV(int count, [CountAttribute(Parameter = "count")] int* attribs, int nbuffers, [CountAttribute(Parameter = "nbuffers")] int* bufstreams, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode);

            [Slot(2365)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTransformFeedbackVaryingsNV(uint program, int count, [CountAttribute(Parameter = "count")] int* locations, OpenTK.Graphics.OpenGL.NvTransformFeedback bufferMode);
        }
    }
}
