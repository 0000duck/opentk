//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexProgram" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            /// <param name="residences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glAreProgramsResidentNV")]
            public static bool AreProgramsResident(int n, [CountAttribute(Parameter = "n")] uint[] programs, [OutAttribute, CountAttribute(Parameter = "n")] bool[] residences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            /// <param name="residences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glAreProgramsResidentNV")]
            public static bool AreProgramsResident(int n, [CountAttribute(Parameter = "n")] ref uint programs, [OutAttribute, CountAttribute(Parameter = "n")] out bool residences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            /// <param name="residences">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glAreProgramsResidentNV")]
            public static unsafe bool AreProgramsResident(int n, [CountAttribute(Parameter = "n")] uint* programs, [OutAttribute, CountAttribute(Parameter = "n")] bool* residences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glBindProgramNV")]
            public static void BindProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Deletes a program object
            /// </summary>
            /// <param name="programs">
            /// [length: n]
            /// Specifies the program object to be deleted.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glDeleteProgramsNV")]
            public static void DeleteProgram([CountAttribute(Parameter = "n")] uint programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Deletes a program object
            /// </summary>
            /// <param name="n">
            /// Specifies the program object to be deleted.
            /// </param>
            /// <param name="programs">[length: n]</param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glDeleteProgramsNV")]
            public static void DeleteProgram(int n, [CountAttribute(Parameter = "n")] uint[] programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Deletes a program object
            /// </summary>
            /// <param name="n">
            /// Specifies the program object to be deleted.
            /// </param>
            /// <param name="programs">[length: n]</param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glDeleteProgramsNV")]
            public static void DeleteProgram(int n, [CountAttribute(Parameter = "n")] ref uint programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Deletes a program object
            /// </summary>
            /// <param name="n">
            /// Specifies the program object to be deleted.
            /// </param>
            /// <param name="programs">[length: n]</param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glDeleteProgramsNV")]
            public static unsafe void DeleteProgram(int n, [CountAttribute(Parameter = "n")] uint* programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glExecuteProgramNV")]
            public static void ExecuteProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, [CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glExecuteProgramNV")]
            public static void ExecuteProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, [CountAttribute(Count = 4)] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glExecuteProgramNV")]
            public static unsafe void ExecuteProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, [CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGenProgramsNV")]
            public static uint GenProgram()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGenProgramsNV")]
            public static void GenProgram(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGenProgramsNV")]
            public static void GenProgram(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGenProgramsNV")]
            public static unsafe void GenProgram(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramParameterdvNV")]
            public static void GetProgramParameter(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramParameterdvNV")]
            public static void GetProgramParameter(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramParameterdvNV")]
            public static unsafe void GetProgramParameter(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramParameterfvNV")]
            public static void GetProgramParameter(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramParameterfvNV")]
            public static void GetProgramParameter(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramParameterfvNV")]
            public static unsafe void GetProgramParameter(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="program">
            /// [length: COMPSIZE(id,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramStringNV")]
            public static void GetProgramString(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Computed = "id,pname")] Byte[] program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="program">
            /// [length: COMPSIZE(id,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramStringNV")]
            public static void GetProgramString(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Computed = "id,pname")] out Byte program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="program">
            /// [length: COMPSIZE(id,pname)]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramStringNV")]
            public static unsafe void GetProgramString(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Computed = "id,pname")] Byte* program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Returns a parameter from a program object
            /// </summary>
            /// <param name="id">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested object parameter.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramivNV")]
            public static void GetProgram(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 4)] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Returns a parameter from a program object
            /// </summary>
            /// <param name="id">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested object parameter.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramivNV")]
            public static void GetProgram(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 4)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Returns a parameter from a program object
            /// </summary>
            /// <param name="id">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// Returns the requested object parameter.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetProgramivNV")]
            public static unsafe void GetProgram(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 4)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="address">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetTrackMatrixivNV")]
            public static void GetTrackMatrix(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint address, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 1)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="address">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetTrackMatrixivNV")]
            public static unsafe void GetTrackMatrix(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint address, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 1)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribPointervNV")]
            public static void GetVertexAttribPointer(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribPointervNV")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribPointervNV")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribPointervNV")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="pointer">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribPointervNV")]
            public static void GetVertexAttribPointer<T2>(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribdvNV")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribdvNV")]
            public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribfvNV")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribfvNV")]
            public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribivNV")]
            public static void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Return a generic vertex attribute parameter
            /// </summary>
            /// <param name="index">
            /// Specifies the generic vertex attribute parameter to be queried.
            /// </param>
            /// <param name="pname">
            /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// Returns the requested data.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glGetVertexAttribivNV")]
            public static unsafe void GetVertexAttrib(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Determines if a name corresponds to a program object
            /// </summary>
            /// <param name="id">
            /// Specifies a potential program object.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glIsProgramNV")]
            public static bool IsProgram(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="program">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glLoadProgramNV")]
            public static void LoadProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, int len, [CountAttribute(Parameter = "len")] Byte[] program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="program">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glLoadProgramNV")]
            public static void LoadProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, int len, [CountAttribute(Parameter = "len")] ref Byte program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="id">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="program">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glLoadProgramNV")]
            public static unsafe void LoadProgram(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, int len, [CountAttribute(Parameter = "len")] Byte* program)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="x">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="w"></param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4dNV")]
            public static void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4dvNV")]
            public static void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4dvNV")]
            public static void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4dvNV")]
            public static unsafe void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="x">
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            /// <param name="y"></param>
            /// <param name="z"></param>
            /// <param name="w"></param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4fNV")]
            public static void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4fvNV")]
            public static void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4fvNV")]
            public static void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="target">
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="index">
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameter4fvNV")]
            public static unsafe void ProgramParameter4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameters4dvNV")]
            public static void ProgramParameters4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameters4dvNV")]
            public static void ProgramParameters4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameters4dvNV")]
            public static unsafe void ProgramParameters4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameters4fvNV")]
            public static void ProgramParameters4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameters4fvNV")]
            public static void ProgramParameters4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glProgramParameters4fvNV")]
            public static unsafe void ProgramParameters4(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glRequestResidentProgramsNV")]
            public static void RequestResidentProgram(int n, [CountAttribute(Parameter = "n")] uint[] programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glRequestResidentProgramsNV")]
            public static void RequestResidentProgram(int n, [CountAttribute(Parameter = "n")] ref uint programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="programs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glRequestResidentProgramsNV")]
            public static unsafe void RequestResidentProgram(int n, [CountAttribute(Parameter = "n")] uint* programs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="address">
            /// </param>
            /// <param name="matrix">
            /// </param>
            /// <param name="transform">
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glTrackMatrixNV")]
            public static void TrackMatrix(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint address, OpenTK.Graphics.OpenGL.NvVertexProgram matrix, OpenTK.Graphics.OpenGL.NvVertexProgram transform)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1dNV")]
            public static void VertexAttrib1(uint index, double x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1dvNV")]
            public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1dvNV")]
            public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1fNV")]
            public static void VertexAttrib1(uint index, float x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1fvNV")]
            public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1fvNV")]
            public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1sNV")]
            public static void VertexAttrib1(uint index, short x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1svNV")]
            public static void VertexAttrib1(uint index, [CountAttribute(Count = 1)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 1]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib1svNV")]
            public static unsafe void VertexAttrib1(uint index, [CountAttribute(Count = 1)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2dNV")]
            public static void VertexAttrib2(uint index, double x, double y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2dvNV")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2dvNV")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2dvNV")]
            public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2fNV")]
            public static void VertexAttrib2(uint index, float x, float y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2fvNV")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2fvNV")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2fvNV")]
            public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2sNV")]
            public static void VertexAttrib2(uint index, short x, short y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2svNV")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2svNV")]
            public static void VertexAttrib2(uint index, [CountAttribute(Count = 2)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 2]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib2svNV")]
            public static unsafe void VertexAttrib2(uint index, [CountAttribute(Count = 2)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3dNV")]
            public static void VertexAttrib3(uint index, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3dvNV")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3dvNV")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3dvNV")]
            public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3fNV")]
            public static void VertexAttrib3(uint index, float x, float y, float z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3fvNV")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3fvNV")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3fvNV")]
            public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3sNV")]
            public static void VertexAttrib3(uint index, short x, short y, short z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3svNV")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3svNV")]
            public static void VertexAttrib3(uint index, [CountAttribute(Count = 3)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 3]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib3svNV")]
            public static unsafe void VertexAttrib3(uint index, [CountAttribute(Count = 3)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4dNV")]
            public static void VertexAttrib4(uint index, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4dvNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4dvNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4dvNV")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4fNV")]
            public static void VertexAttrib4(uint index, float x, float y, float z, float w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4fvNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4fvNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4fvNV")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4sNV")]
            public static void VertexAttrib4(uint index, short x, short y, short z, short w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4svNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4svNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4svNV")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="x">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="y">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4ubNV")]
            public static void VertexAttrib4(uint index, Byte x, Byte y, Byte z, Byte w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4ubvNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] Byte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4ubvNV")]
            public static void VertexAttrib4(uint index, [CountAttribute(Count = 4)] ref Byte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Specifies the value of a generic vertex attribute
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="v">
            /// [length: 4]
            /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttrib4ubvNV")]
            public static unsafe void VertexAttrib4(uint index, [CountAttribute(Count = 4)] Byte* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="fsize">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(fsize,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribPointerNV")]
            public static void VertexAttribPointer(uint index, int fsize, OpenTK.Graphics.OpenGL.VertexAttribParameterArb type, int stride, [CountAttribute(Computed = "fsize,type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="fsize">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(fsize,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribPointerNV")]
            public static void VertexAttribPointer<T4>(uint index, int fsize, OpenTK.Graphics.OpenGL.VertexAttribParameterArb type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "fsize,type,stride")] T4[] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="fsize">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(fsize,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribPointerNV")]
            public static void VertexAttribPointer<T4>(uint index, int fsize, OpenTK.Graphics.OpenGL.VertexAttribParameterArb type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "fsize,type,stride")] T4[,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="fsize">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(fsize,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribPointerNV")]
            public static void VertexAttribPointer<T4>(uint index, int fsize, OpenTK.Graphics.OpenGL.VertexAttribParameterArb type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "fsize,type,stride")] T4[,,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// Define an array of generic vertex attribute data
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the generic vertex attribute to be modified.
            /// </param>
            /// <param name="fsize">
            /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(fsize,type,stride)]
            /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribPointerNV")]
            public static void VertexAttribPointer<T4>(uint index, int fsize, OpenTK.Graphics.OpenGL.VertexAttribParameterArb type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "fsize,type,stride")] ref T4 pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1dvNV")]
            public static void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1dvNV")]
            public static void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1dvNV")]
            public static unsafe void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1fvNV")]
            public static void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1fvNV")]
            public static void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1fvNV")]
            public static unsafe void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1svNV")]
            public static void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1svNV")]
            public static void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs1svNV")]
            public static unsafe void VertexAttribs1(uint index, int count, [CountAttribute(Parameter = "count")] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2dvNV")]
            public static void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2dvNV")]
            public static void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2dvNV")]
            public static unsafe void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2fvNV")]
            public static void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2fvNV")]
            public static void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2fvNV")]
            public static unsafe void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2svNV")]
            public static void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2svNV")]
            public static void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*2]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs2svNV")]
            public static unsafe void VertexAttribs2(uint index, int count, [CountAttribute(Parameter = "count*2")] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3dvNV")]
            public static void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3dvNV")]
            public static void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3dvNV")]
            public static unsafe void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3fvNV")]
            public static void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3fvNV")]
            public static void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3fvNV")]
            public static unsafe void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3svNV")]
            public static void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3svNV")]
            public static void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*3]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs3svNV")]
            public static unsafe void VertexAttribs3(uint index, int count, [CountAttribute(Parameter = "count*3")] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4dvNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4dvNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4dvNV")]
            public static unsafe void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] double* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4fvNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4fvNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4fvNV")]
            public static unsafe void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] float* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4svNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4svNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4svNV")]
            public static unsafe void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] short* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4ubvNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] Byte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4ubvNV")]
            public static void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] ref Byte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vertex_program]
            /// </summary>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="v">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "NV_vertex_program", Version = "", EntryPoint = "glVertexAttribs4ubvNV")]
            public static unsafe void VertexAttribs4(uint index, int count, [CountAttribute(Parameter = "count*4")] Byte* v)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(18)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe byte glAreProgramsResidentNV(int n, [CountAttribute(Parameter = "n")] uint* programs, [OutAttribute, CountAttribute(Parameter = "n")] bool* residences);

            [Slot(71)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindProgramNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id);

            [Slot(426)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteProgramsNV(int n, [CountAttribute(Parameter = "n")] uint* programs);

            [Slot(570)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glExecuteProgramNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, [CountAttribute(Count = 4)] float* @params);

            [Slot(679)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenProgramsNV(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* programs);

            [Slot(992)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetProgramParameterdvNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] double* @params);

            [Slot(993)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetProgramParameterfvNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 4)] float* @params);

            [Slot(1006)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetProgramStringNV(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Computed = "id,pname")] Byte* program);

            [Slot(985)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetProgramivNV(uint id, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 4)] int* @params);

            [Slot(1085)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTrackMatrixivNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint address, OpenTK.Graphics.OpenGL.AssemblyProgramParameterArb pname, [OutAttribute, CountAttribute(Count = 1)] int* @params);

            [Slot(1148)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetVertexAttribPointervNV(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer);

            [Slot(1130)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexAttribdvNV(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] double* @params);

            [Slot(1133)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexAttribfvNV(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] float* @params);

            [Slot(1140)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexAttribivNV(uint index, OpenTK.Graphics.OpenGL.NvVertexProgram pname, [OutAttribute, CountAttribute(Count = 1)] int* @params);

            [Slot(1241)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsProgramNV(uint id);

            [Slot(1297)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glLoadProgramNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint id, int len, [CountAttribute(Parameter = "len")] Byte* program);

            [Slot(1767)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramParameter4dNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

            [Slot(1768)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramParameter4dvNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] double* v);

            [Slot(1769)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramParameter4fNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

            [Slot(1770)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramParameter4fvNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, [CountAttribute(Count = 4)] float* v);

            [Slot(1774)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramParameters4dvNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] double* v);

            [Slot(1775)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramParameters4fvNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint index, int count, [CountAttribute(Parameter = "count*4")] float* v);

            [Slot(2013)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glRequestResidentProgramsNV(int n, [CountAttribute(Parameter = "n")] uint* programs);

            [Slot(2358)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTrackMatrixNV(OpenTK.Graphics.OpenGL.AssemblyProgramTargetArb target, uint address, OpenTK.Graphics.OpenGL.NvVertexProgram matrix, OpenTK.Graphics.OpenGL.NvVertexProgram transform);

            [Slot(2599)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib1dNV(uint index, double x);

            [Slot(2602)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib1dvNV(uint index, [CountAttribute(Count = 1)] double* v);

            [Slot(2605)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib1fNV(uint index, float x);

            [Slot(2608)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib1fvNV(uint index, [CountAttribute(Count = 1)] float* v);

            [Slot(2613)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib1sNV(uint index, short x);

            [Slot(2616)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib1svNV(uint index, [CountAttribute(Count = 1)] short* v);

            [Slot(2619)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib2dNV(uint index, double x, double y);

            [Slot(2622)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib2dvNV(uint index, [CountAttribute(Count = 2)] double* v);

            [Slot(2625)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib2fNV(uint index, float x, float y);

            [Slot(2628)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib2fvNV(uint index, [CountAttribute(Count = 2)] float* v);

            [Slot(2633)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib2sNV(uint index, short x, short y);

            [Slot(2636)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib2svNV(uint index, [CountAttribute(Count = 2)] short* v);

            [Slot(2639)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib3dNV(uint index, double x, double y, double z);

            [Slot(2642)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib3dvNV(uint index, [CountAttribute(Count = 3)] double* v);

            [Slot(2645)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib3fNV(uint index, float x, float y, float z);

            [Slot(2648)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib3fvNV(uint index, [CountAttribute(Count = 3)] float* v);

            [Slot(2653)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib3sNV(uint index, short x, short y, short z);

            [Slot(2656)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib3svNV(uint index, [CountAttribute(Count = 3)] short* v);

            [Slot(2661)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4dNV(uint index, double x, double y, double z, double w);

            [Slot(2664)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4dvNV(uint index, [CountAttribute(Count = 4)] double* v);

            [Slot(2667)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4fNV(uint index, float x, float y, float z, float w);

            [Slot(2670)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4fvNV(uint index, [CountAttribute(Count = 4)] float* v);

            [Slot(2691)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4sNV(uint index, short x, short y, short z, short w);

            [Slot(2694)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4svNV(uint index, [CountAttribute(Count = 4)] short* v);

            [Slot(2695)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttrib4ubNV(uint index, Byte x, Byte y, Byte z, Byte w);

            [Slot(2698)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttrib4ubvNV(uint index, [CountAttribute(Count = 4)] Byte* v);

            [Slot(2802)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexAttribPointerNV(uint index, int fsize, OpenTK.Graphics.OpenGL.VertexAttribParameterArb type, int stride, [CountAttribute(Computed = "fsize,type,stride")] IntPtr pointer);

            [Slot(2803)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs1dvNV(uint index, int count, [CountAttribute(Parameter = "count")] double* v);

            [Slot(2804)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs1fvNV(uint index, int count, [CountAttribute(Parameter = "count")] float* v);

            [Slot(2806)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs1svNV(uint index, int count, [CountAttribute(Parameter = "count")] short* v);

            [Slot(2807)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs2dvNV(uint index, int count, [CountAttribute(Parameter = "count*2")] double* v);

            [Slot(2808)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs2fvNV(uint index, int count, [CountAttribute(Parameter = "count*2")] float* v);

            [Slot(2810)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs2svNV(uint index, int count, [CountAttribute(Parameter = "count*2")] short* v);

            [Slot(2811)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs3dvNV(uint index, int count, [CountAttribute(Parameter = "count*3")] double* v);

            [Slot(2812)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs3fvNV(uint index, int count, [CountAttribute(Parameter = "count*3")] float* v);

            [Slot(2814)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs3svNV(uint index, int count, [CountAttribute(Parameter = "count*3")] short* v);

            [Slot(2815)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs4dvNV(uint index, int count, [CountAttribute(Parameter = "count*4")] double* v);

            [Slot(2816)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs4fvNV(uint index, int count, [CountAttribute(Parameter = "count*4")] float* v);

            [Slot(2818)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs4svNV(uint index, int count, [CountAttribute(Parameter = "count*4")] short* v);

            [Slot(2819)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertexAttribs4ubvNV(uint index, int count, [CountAttribute(Parameter = "count*4")] Byte* v);
        }
    }
}
