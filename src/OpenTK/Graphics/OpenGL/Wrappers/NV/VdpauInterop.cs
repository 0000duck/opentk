//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VdpauInterop" in the extension "NV".
        /// </summary>
        public static partial class NV
        {
            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUFiniNV")]
            public static void VDPAUFin()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="surface">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUGetSurfaceivNV")]
            public static void VDPAUGetSurface(IntPtr surface, OpenTK.Graphics.OpenGL.NvVdpauInterop pname, int bufSize, [OutAttribute] int[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int[] values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="surface">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUGetSurfaceivNV")]
            public static void VDPAUGetSurface(IntPtr surface, OpenTK.Graphics.OpenGL.NvVdpauInterop pname, int bufSize, [OutAttribute] out int length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out int values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="surface">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="bufSize">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="values">
            /// [length: bufSize]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUGetSurfaceivNV")]
            public static unsafe void VDPAUGetSurface(IntPtr surface, OpenTK.Graphics.OpenGL.NvVdpauInterop pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpDevice">
            /// </param>
            /// <param name="getProcAddress">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUInitNV")]
            public static void VDPAUInit(IntPtr vdpDevice, IntPtr getProcAddress)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpDevice">
            /// </param>
            /// <param name="getProcAddress">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUInitNV")]
            public static void VDPAUInit<T0, T1>([InAttribute, OutAttribute] T0[] vdpDevice, [InAttribute, OutAttribute] T1[] getProcAddress)
                where T0 : struct
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpDevice">
            /// </param>
            /// <param name="getProcAddress">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUInitNV")]
            public static void VDPAUInit<T0, T1>([InAttribute, OutAttribute] T0[,] vdpDevice, [InAttribute, OutAttribute] T1[,] getProcAddress)
                where T0 : struct
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpDevice">
            /// </param>
            /// <param name="getProcAddress">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUInitNV")]
            public static void VDPAUInit<T0, T1>([InAttribute, OutAttribute] T0[,,] vdpDevice, [InAttribute, OutAttribute] T1[,,] getProcAddress)
                where T0 : struct
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpDevice">
            /// </param>
            /// <param name="getProcAddress">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUInitNV")]
            public static void VDPAUInit<T0, T1>([InAttribute, OutAttribute] ref T0 vdpDevice, [InAttribute, OutAttribute] ref T1 getProcAddress)
                where T0 : struct
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="surface">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUIsSurfaceNV")]
            public static bool VDPAUIsSurface(IntPtr surface)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="numSurfaces">
            /// </param>
            /// <param name="surfaces">
            /// [length: numSurfaces]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUMapSurfacesNV")]
            public static void VDPAUMapSurfaces(int numSurfaces, [CountAttribute(Parameter = "numSurfaces")] IntPtr[] surfaces)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="numSurfaces">
            /// </param>
            /// <param name="surfaces">
            /// [length: numSurfaces]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUMapSurfacesNV")]
            public static void VDPAUMapSurfaces(int numSurfaces, [CountAttribute(Parameter = "numSurfaces")] ref IntPtr surfaces)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="numSurfaces">
            /// </param>
            /// <param name="surfaces">
            /// [length: numSurfaces]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUMapSurfacesNV")]
            public static unsafe void VDPAUMapSurfaces(int numSurfaces, [CountAttribute(Parameter = "numSurfaces")] IntPtr* surfaces)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[,,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[,,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] T0[,,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] ref T0 vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] ref T0 vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([InAttribute, OutAttribute] ref T0 vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[,,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[,,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] T0[,,] vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] ref T0 vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint[] textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] ref T0 vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] ref uint textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="vdpSurface">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="numTextureNames">
            /// </param>
            /// <param name="textureNames">
            /// [length: numTextureNames]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
            public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([InAttribute, OutAttribute] ref T0 vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames)
                where T0 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="surface">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUSurfaceAccessNV")]
            public static void VDPAUSurfaceAccess(IntPtr surface, OpenTK.Graphics.OpenGL.NvVdpauInterop access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="numSurface">
            /// </param>
            /// <param name="surfaces">
            /// [length: numSurface]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUUnmapSurfacesNV")]
            public static void VDPAUUnmapSurfaces(int numSurface, [CountAttribute(Parameter = "numSurface")] IntPtr[] surfaces)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="numSurface">
            /// </param>
            /// <param name="surfaces">
            /// [length: numSurface]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUUnmapSurfacesNV")]
            public static void VDPAUUnmapSurfaces(int numSurface, [CountAttribute(Parameter = "numSurface")] ref IntPtr surfaces)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="numSurface">
            /// </param>
            /// <param name="surfaces">
            /// [length: numSurface]
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUUnmapSurfacesNV")]
            public static unsafe void VDPAUUnmapSurfaces(int numSurface, [CountAttribute(Parameter = "numSurface")] IntPtr* surfaces)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: NV_vdpau_interop]
            /// </summary>
            /// <param name="surface">
            /// </param>
            [AutoGenerated(Category = "NV_vdpau_interop", Version = "", EntryPoint = "glVDPAUUnregisterSurfaceNV")]
            public static void VDPAUUnregisterSurface(IntPtr surface)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(2515)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVDPAUFiniNV();

            [Slot(2516)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVDPAUGetSurfaceivNV(IntPtr surface, OpenTK.Graphics.OpenGL.NvVdpauInterop pname, int bufSize, [OutAttribute] int* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] int* values);

            [Slot(2517)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress);

            [Slot(2518)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glVDPAUIsSurfaceNV(IntPtr surface);

            [Slot(2519)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVDPAUMapSurfacesNV(int numSurfaces, [CountAttribute(Parameter = "numSurfaces")] IntPtr* surfaces);

            [Slot(2520)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe IntPtr glVDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames);

            [Slot(2521)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe IntPtr glVDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, OpenTK.Graphics.OpenGL.NvVdpauInterop target, int numTextureNames, [CountAttribute(Parameter = "numTextureNames")] uint* textureNames);

            [Slot(2522)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVDPAUSurfaceAccessNV(IntPtr surface, OpenTK.Graphics.OpenGL.NvVdpauInterop access);

            [Slot(2523)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVDPAUUnmapSurfacesNV(int numSurface, [CountAttribute(Parameter = "numSurface")] IntPtr* surfaces);

            [Slot(2524)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVDPAUUnregisterSurfaceNV(IntPtr surface);
        }
    }
}
