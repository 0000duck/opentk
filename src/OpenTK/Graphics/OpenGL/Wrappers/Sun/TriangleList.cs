//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "TriangleList" in the extension "Sun".
        /// </summary>
        public static partial class Sun
        {
            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodePointerSUN")]
            public static void ReplacementCodePointer(OpenTK.Graphics.OpenGL.SunTriangleList type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodePointerSUN")]
            public static void ReplacementCodePointer<T2>(OpenTK.Graphics.OpenGL.SunTriangleList type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodePointerSUN")]
            public static void ReplacementCodePointer<T2>(OpenTK.Graphics.OpenGL.SunTriangleList type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodePointerSUN")]
            public static void ReplacementCodePointer<T2>(OpenTK.Graphics.OpenGL.SunTriangleList type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodePointerSUN")]
            public static void ReplacementCodePointer<T2>(OpenTK.Graphics.OpenGL.SunTriangleList type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeubSUN")]
            public static void ReplacementCode(Byte code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// [length: COMPSIZE()]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeubvSUN")]
            public static void ReplacementCode([CountAttribute(Computed = "")] Byte[] code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// [length: COMPSIZE()]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeubvSUN")]
            public static void ReplacementCode([CountAttribute(Computed = "")] ref Byte code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeuiSUN")]
            public static void ReplacementCode(uint code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// [length: COMPSIZE()]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeuivSUN")]
            public static void ReplacementCode([CountAttribute(Computed = "")] uint[] code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// [length: COMPSIZE()]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeuivSUN")]
            public static void ReplacementCode([CountAttribute(Computed = "")] ref uint code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeusSUN")]
            public static void ReplacementCode(ushort code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// [length: COMPSIZE()]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeusvSUN")]
            public static void ReplacementCode([CountAttribute(Computed = "")] ushort[] code)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SUN_triangle_list]
            /// </summary>
            /// <param name="code">
            /// [length: COMPSIZE()]
            /// </param>
            [AutoGenerated(Category = "SUN_triangle_list", Version = "", EntryPoint = "glReplacementCodeusvSUN")]
            public static void ReplacementCode([CountAttribute(Computed = "")] ref ushort code)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(1990)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glReplacementCodePointerSUN(OpenTK.Graphics.OpenGL.SunTriangleList type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

            [Slot(1991)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glReplacementCodeubSUN(Byte code);

            [Slot(1992)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glReplacementCodeubvSUN([CountAttribute(Computed = "")] Byte* code);

            [Slot(2001)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glReplacementCodeuiSUN(uint code);

            [Slot(2010)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glReplacementCodeuivSUN([CountAttribute(Computed = "")] uint* code);

            [Slot(2011)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glReplacementCodeusSUN(ushort code);

            [Slot(2012)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glReplacementCodeusvSUN([CountAttribute(Computed = "")] ushort* code);
        }
    }
}
