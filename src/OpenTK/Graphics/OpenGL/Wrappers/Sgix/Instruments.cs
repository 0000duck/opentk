//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Instruments" in the extension "Sgix".
        /// </summary>
        public static partial class Sgix
        {
            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glGetInstrumentsSGIX")]
            public static int GetInstruments()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="buffer">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glInstrumentsBufferSGIX")]
            public static void InstrumentsBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] int[] buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="buffer">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glInstrumentsBufferSGIX")]
            public static void InstrumentsBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] out int buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            /// <param name="size">
            /// </param>
            /// <param name="buffer">
            /// [length: size]
            /// </param>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glInstrumentsBufferSGIX")]
            public static unsafe void InstrumentsBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] int* buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            /// <param name="marker_p">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glPollInstrumentsSGIX")]
            public static int PollInstruments([OutAttribute, CountAttribute(Count = 1)] out int marker_p)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            /// <param name="marker">
            /// </param>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glReadInstrumentsSGIX")]
            public static void ReadInstruments(int marker)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glStartInstrumentsSGIX")]
            public static void StartInstruments()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: SGIX_instruments]
            /// </summary>
            /// <param name="marker">
            /// </param>
            [AutoGenerated(Category = "SGIX_instruments", Version = "", EntryPoint = "glStopInstrumentsSGIX")]
            public static void StopInstruments(int marker)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(805)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern int glGetInstrumentsSGIX();

            [Slot(1204)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glInstrumentsBufferSGIX(int size, [OutAttribute, CountAttribute(Parameter = "size")] int* buffer);

            [Slot(1713)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe int glPollInstrumentsSGIX([OutAttribute, CountAttribute(Count = 1)] int* marker_p);

            [Slot(1965)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glReadInstrumentsSGIX(int marker);

            [Slot(2117)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glStartInstrumentsSGIX();

            [Slot(2137)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glStopInstrumentsSGIX(int marker);
        }
    }
}
