//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "DrawBuffersBlend" in the extension "Amd".
        /// </summary>
        public static partial class Amd
        {
            /// <summary>
            /// [requires: AMD_draw_buffers_blend]
            /// </summary>
            /// <param name="buf">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "AMD_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationIndexedAMD")]
            public static void BlendEquationIndexed(uint buf, OpenTK.Graphics.OpenGL.BlendEquationModeExt mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_draw_buffers_blend]
            /// </summary>
            /// <param name="buf">
            /// </param>
            /// <param name="modeRGB">
            /// </param>
            /// <param name="modeAlpha">
            /// </param>
            [AutoGenerated(Category = "AMD_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationSeparateIndexedAMD")]
            public static void BlendEquationSeparateIndexed(uint buf, OpenTK.Graphics.OpenGL.BlendEquationModeExt modeRGB, OpenTK.Graphics.OpenGL.BlendEquationModeExt modeAlpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_draw_buffers_blend]
            /// </summary>
            /// <param name="buf">
            /// </param>
            /// <param name="src">
            /// </param>
            /// <param name="dst">
            /// </param>
            [AutoGenerated(Category = "AMD_draw_buffers_blend", Version = "", EntryPoint = "glBlendFuncIndexedAMD")]
            public static void BlendFuncIndexed(uint buf, OpenTK.Graphics.OpenGL.AmdDrawBuffersBlend src, OpenTK.Graphics.OpenGL.AmdDrawBuffersBlend dst)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: AMD_draw_buffers_blend]
            /// </summary>
            /// <param name="buf">
            /// </param>
            /// <param name="srcRGB">
            /// </param>
            /// <param name="dstRGB">
            /// </param>
            /// <param name="srcAlpha">
            /// </param>
            /// <param name="dstAlpha">
            /// </param>
            [AutoGenerated(Category = "AMD_draw_buffers_blend", Version = "", EntryPoint = "glBlendFuncSeparateIndexedAMD")]
            public static void BlendFuncSeparateIndexed(uint buf, OpenTK.Graphics.OpenGL.BlendingFactor srcRGB, OpenTK.Graphics.OpenGL.BlendingFactor dstRGB, OpenTK.Graphics.OpenGL.BlendingFactor srcAlpha, OpenTK.Graphics.OpenGL.BlendingFactor dstAlpha)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(115)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendEquationIndexedAMD(uint buf, OpenTK.Graphics.OpenGL.BlendEquationModeExt mode);

            [Slot(120)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendEquationSeparateIndexedAMD(uint buf, OpenTK.Graphics.OpenGL.BlendEquationModeExt modeRGB, OpenTK.Graphics.OpenGL.BlendEquationModeExt modeAlpha);

            [Slot(124)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendFuncIndexedAMD(uint buf, OpenTK.Graphics.OpenGL.AmdDrawBuffersBlend src, OpenTK.Graphics.OpenGL.AmdDrawBuffersBlend dst);

            [Slot(129)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendFuncSeparateIndexedAMD(uint buf, OpenTK.Graphics.OpenGL.BlendingFactor srcRGB, OpenTK.Graphics.OpenGL.BlendingFactor dstRGB, OpenTK.Graphics.OpenGL.BlendingFactor srcAlpha, OpenTK.Graphics.OpenGL.BlendingFactor dstAlpha);
        }
    }
}
