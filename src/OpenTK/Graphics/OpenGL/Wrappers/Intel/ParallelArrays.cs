//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "ParallelArrays" in the extension "Intel".
        /// </summary>
        public static partial class Intel
        {
            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glColorPointervINTEL")]
            public static void ColorPointer(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [CountAttribute(Count = 4)] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glColorPointervINTEL")]
            public static void ColorPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glColorPointervINTEL")]
            public static void ColorPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glColorPointervINTEL")]
            public static void ColorPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glColorPointervINTEL")]
            public static void ColorPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glNormalPointervINTEL")]
            public static void NormalPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, [CountAttribute(Count = 4)] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glNormalPointervINTEL")]
            public static void NormalPointer<T1>(OpenTK.Graphics.OpenGL.NormalPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T1[] pointer)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glNormalPointervINTEL")]
            public static void NormalPointer<T1>(OpenTK.Graphics.OpenGL.NormalPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T1[,] pointer)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glNormalPointervINTEL")]
            public static void NormalPointer<T1>(OpenTK.Graphics.OpenGL.NormalPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T1[,,] pointer)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glNormalPointervINTEL")]
            public static void NormalPointer<T1>(OpenTK.Graphics.OpenGL.NormalPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] ref T1 pointer)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glTexCoordPointervINTEL")]
            public static void TexCoordPointer(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [CountAttribute(Count = 4)] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glTexCoordPointervINTEL")]
            public static void TexCoordPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glTexCoordPointervINTEL")]
            public static void TexCoordPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glTexCoordPointervINTEL")]
            public static void TexCoordPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glTexCoordPointervINTEL")]
            public static void TexCoordPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glVertexPointervINTEL")]
            public static void VertexPointer(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [CountAttribute(Count = 4)] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glVertexPointervINTEL")]
            public static void VertexPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glVertexPointervINTEL")]
            public static void VertexPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glVertexPointervINTEL")]
            public static void VertexPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: INTEL_parallel_arrays]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="pointer">
            /// [length: 4]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "INTEL_parallel_arrays", Version = "", EntryPoint = "glVertexPointervINTEL")]
            public static void VertexPointer<T2>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [InAttribute, OutAttribute, CountAttribute(Count = 4)] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(256)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColorPointervINTEL(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [CountAttribute(Count = 4)] IntPtr pointer);

            [Slot(1623)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNormalPointervINTEL(OpenTK.Graphics.OpenGL.NormalPointerType type, [CountAttribute(Count = 4)] IntPtr pointer);

            [Slot(2248)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexCoordPointervINTEL(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [CountAttribute(Count = 4)] IntPtr pointer);

            [Slot(2834)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexPointervINTEL(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, [CountAttribute(Count = 4)] IntPtr pointer);
        }
    }
}
