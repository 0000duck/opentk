//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "FragmentShader" in the extension "Ati".
        /// </summary>
        public static partial class Ati
        {
            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="dst">
            /// </param>
            /// <param name="dstMod">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg1Rep">
            /// </param>
            /// <param name="arg1Mod">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glAlphaFragmentOp1ATI")]
            public static void AlphaFragmentOp1(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="dst">
            /// </param>
            /// <param name="dstMod">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg1Rep">
            /// </param>
            /// <param name="arg1Mod">
            /// </param>
            /// <param name="arg2">
            /// </param>
            /// <param name="arg2Rep">
            /// </param>
            /// <param name="arg2Mod">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glAlphaFragmentOp2ATI")]
            public static void AlphaFragmentOp2(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="dst">
            /// </param>
            /// <param name="dstMod">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg1Rep">
            /// </param>
            /// <param name="arg1Mod">
            /// </param>
            /// <param name="arg2">
            /// </param>
            /// <param name="arg2Rep">
            /// </param>
            /// <param name="arg2Mod">
            /// </param>
            /// <param name="arg3">
            /// </param>
            /// <param name="arg3Rep">
            /// </param>
            /// <param name="arg3Mod">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glAlphaFragmentOp3ATI")]
            public static void AlphaFragmentOp3(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glBeginFragmentShaderATI")]
            public static void BeginFragmentShader()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glBindFragmentShaderATI")]
            public static void BindFragmentShader(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="dst">
            /// </param>
            /// <param name="dstMask">
            /// </param>
            /// <param name="dstMod">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg1Rep">
            /// </param>
            /// <param name="arg1Mod">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glColorFragmentOp1ATI")]
            public static void ColorFragmentOp1(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="dst">
            /// </param>
            /// <param name="dstMask">
            /// </param>
            /// <param name="dstMod">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg1Rep">
            /// </param>
            /// <param name="arg1Mod">
            /// </param>
            /// <param name="arg2">
            /// </param>
            /// <param name="arg2Rep">
            /// </param>
            /// <param name="arg2Mod">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glColorFragmentOp2ATI")]
            public static void ColorFragmentOp2(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="dst">
            /// </param>
            /// <param name="dstMask">
            /// </param>
            /// <param name="dstMod">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg1Rep">
            /// </param>
            /// <param name="arg1Mod">
            /// </param>
            /// <param name="arg2">
            /// </param>
            /// <param name="arg2Rep">
            /// </param>
            /// <param name="arg2Mod">
            /// </param>
            /// <param name="arg3">
            /// </param>
            /// <param name="arg3Rep">
            /// </param>
            /// <param name="arg3Mod">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glColorFragmentOp3ATI")]
            public static void ColorFragmentOp3(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glDeleteFragmentShaderATI")]
            public static void DeleteFragmentShader(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glEndFragmentShaderATI")]
            public static void EndFragmentShader()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="range">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glGenFragmentShadersATI")]
            public static uint GenFragmentShaders(uint range)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="dst">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="swizzle">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glPassTexCoordATI")]
            public static void PassTexCoord(uint dst, uint coord, OpenTK.Graphics.OpenGL.AtiFragmentShader swizzle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="dst">
            /// </param>
            /// <param name="interp">
            /// </param>
            /// <param name="swizzle">
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glSampleMapATI")]
            public static void SampleMap(uint dst, uint interp, OpenTK.Graphics.OpenGL.AtiFragmentShader swizzle)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="dst">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static void SetFragmentShaderConstant(uint dst, [CountAttribute(Count = 4)] float[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="dst">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static void SetFragmentShaderConstant(uint dst, [CountAttribute(Count = 4)] ref float value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: ATI_fragment_shader]
            /// </summary>
            /// <param name="dst">
            /// </param>
            /// <param name="value">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "ATI_fragment_shader", Version = "", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static unsafe void SetFragmentShaderConstant(uint dst, [CountAttribute(Count = 4)] float* value)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(10)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glAlphaFragmentOp1ATI(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

            [Slot(11)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glAlphaFragmentOp2ATI(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

            [Slot(12)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glAlphaFragmentOp3ATI(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

            [Slot(31)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBeginFragmentShaderATI();

            [Slot(60)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindFragmentShaderATI(uint id);

            [Slot(242)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColorFragmentOp1ATI(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

            [Slot(243)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColorFragmentOp2ATI(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

            [Slot(244)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColorFragmentOp3ATI(OpenTK.Graphics.OpenGL.FragmentOpAti op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

            [Slot(410)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDeleteFragmentShaderATI(uint id);

            [Slot(539)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEndFragmentShaderATI();

            [Slot(668)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glGenFragmentShadersATI(uint range);

            [Slot(1643)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPassTexCoordATI(uint dst, uint coord, OpenTK.Graphics.OpenGL.AtiFragmentShader swizzle);

            [Slot(2028)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSampleMapATI(uint dst, uint interp, OpenTK.Graphics.OpenGL.AtiFragmentShader swizzle);

            [Slot(2095)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glSetFragmentShaderConstantATI(uint dst, [CountAttribute(Count = 4)] float* value);
        }
    }
}
