//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "GpuShader4" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Bind a user-defined varying out variable to a fragment shader color number
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to modify
            /// </param>
            /// <param name="color">
            /// The color number to bind the user-defined varying out variable to
            /// </param>
            /// <param name="name">
            /// [length: COMPSIZE(name)]
            /// The name of the user-defined varying out variable whose binding to modify
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glBindFragDataLocationEXT")]
            public static void BindFragDataLocation(uint program, uint color, [CountAttribute(Computed = "name")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Query the bindings of color numbers to user-defined varying out variables
            /// </summary>
            /// <param name="program">
            /// The name of the program containing varying out variable whose binding to query
            /// </param>
            /// <param name="name">
            /// [length: COMPSIZE(name)]
            /// The name of the user-defined varying out variable whose binding to query
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glGetFragDataLocationEXT")]
            public static int GetFragDataLocation(uint program, [CountAttribute(Computed = "name")] String name)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glGetUniformuivEXT")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glGetUniformuivEXT")]
            public static void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Returns the value of a uniform variable
            /// </summary>
            /// <param name="program">
            /// Specifies the program object to be queried.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be queried.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(program,location)]
            /// Returns the value of the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glGetUniformuivEXT")]
            public static unsafe void GetUniform(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform1uiEXT")]
            public static void Uniform1(int location, uint v0)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform1uivEXT")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform1uivEXT")]
            public static void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*1]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform1uivEXT")]
            public static unsafe void Uniform1(int location, int count, [CountAttribute(Parameter = "count*1")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform2uiEXT")]
            public static void Uniform2(int location, uint v0, uint v1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform2uivEXT")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform2uivEXT")]
            public static void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform2uivEXT")]
            public static unsafe void Uniform2(int location, int count, [CountAttribute(Parameter = "count*2")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform3uiEXT")]
            public static void Uniform3(int location, uint v0, uint v1, uint v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform3uivEXT")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform3uivEXT")]
            public static void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform3uivEXT")]
            public static unsafe void Uniform3(int location, int count, [CountAttribute(Parameter = "count*3")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform4uiEXT")]
            public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform4uivEXT")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] uint[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform4uivEXT")]
            public static void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] ref uint value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_gpu_shader4]
            /// Specify the value of a uniform variable for the current program object
            /// </summary>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_gpu_shader4", Version = "", EntryPoint = "glUniform4uivEXT")]
            public static unsafe void Uniform4(int location, int count, [CountAttribute(Parameter = "count*4")] uint* value)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(58)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindFragDataLocationEXT(uint program, uint color, [CountAttribute(Computed = "name")] IntPtr name);

            [Slot(779)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern int glGetFragDataLocationEXT(uint program, [CountAttribute(Computed = "name")] IntPtr name);

            [Slot(1109)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetUniformuivEXT(uint program, int location, [OutAttribute, CountAttribute(Computed = "program,location")] uint* @params);

            [Slot(2389)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform1uiEXT(int location, uint v0);

            [Slot(2391)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform1uivEXT(int location, int count, [CountAttribute(Parameter = "count*1")] uint* value);

            [Slot(2411)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform2uiEXT(int location, uint v0, uint v1);

            [Slot(2413)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform2uivEXT(int location, int count, [CountAttribute(Parameter = "count*2")] uint* value);

            [Slot(2433)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform3uiEXT(int location, uint v0, uint v1, uint v2);

            [Slot(2435)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform3uivEXT(int location, int count, [CountAttribute(Parameter = "count*3")] uint* value);

            [Slot(2455)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3);

            [Slot(2457)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glUniform4uivEXT(int location, int count, [CountAttribute(Parameter = "count*4")] uint* value);
        }
    }
}
