//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexArray" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Render a vertex using the specified vertex array element
            /// </summary>
            /// <param name="i">
            /// Specifies an index into the enabled vertex data arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glArrayElementEXT")]
            public static void ArrayElement(int i)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glColorPointerEXT")]
            public static void ColorPointer(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, int count, [CountAttribute(Computed = "size,type,stride,count")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glColorPointerEXT")]
            public static void ColorPointer<T4>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glColorPointerEXT")]
            public static void ColorPointer<T4>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glColorPointerEXT")]
            public static void ColorPointer<T4>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[,,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of colors
            /// </summary>
            /// <param name="size">
            /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glColorPointerEXT")]
            public static void ColorPointer<T4>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] ref T4 pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Render primitives from array data
            /// </summary>
            /// <param name="mode">
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count">
            /// Specifies the number of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glDrawArraysEXT")]
            public static void DrawArrays(OpenTK.Graphics.OpenGL.PrimitiveType mode, int first, int count)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of edge flags
            /// </summary>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(stride,count)]
            /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glEdgeFlagPointerEXT")]
            public static void EdgeFlagPointer(int stride, int count, [CountAttribute(Computed = "stride,count")] bool[] pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of edge flags
            /// </summary>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(stride,count)]
            /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glEdgeFlagPointerEXT")]
            public static void EdgeFlagPointer(int stride, int count, [CountAttribute(Computed = "stride,count")] ref bool pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of edge flags
            /// </summary>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(stride,count)]
            /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glEdgeFlagPointerEXT")]
            public static unsafe void EdgeFlagPointer(int stride, int count, [CountAttribute(Computed = "stride,count")] bool* pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glGetPointervEXT")]
            public static void GetPointer(OpenTK.Graphics.OpenGL.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glGetPointervEXT")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glGetPointervEXT")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glGetPointervEXT")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,,] @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glGetPointervEXT")]
            public static void GetPointer<T1>(OpenTK.Graphics.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T1 @params)
                where T1 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of color indexes
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glIndexPointerEXT")]
            public static void IndexPointer(OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, int count, [CountAttribute(Computed = "type,stride,count")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of color indexes
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glIndexPointerEXT")]
            public static void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] T3[] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of color indexes
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glIndexPointerEXT")]
            public static void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] T3[,] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of color indexes
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glIndexPointerEXT")]
            public static void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] T3[,,] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of color indexes
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first index in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glIndexPointerEXT")]
            public static void IndexPointer<T3>(OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] ref T3 pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glNormalPointerEXT")]
            public static void NormalPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, int count, [CountAttribute(Computed = "type,stride,count")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glNormalPointerEXT")]
            public static void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] T3[] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glNormalPointerEXT")]
            public static void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] T3[,] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glNormalPointerEXT")]
            public static void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] T3[,,] pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of normals
            /// </summary>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glNormalPointerEXT")]
            public static void NormalPointer<T3>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride,count")] ref T3 pointer)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glTexCoordPointerEXT")]
            public static void TexCoordPointer(int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, int count, [CountAttribute(Computed = "size,type,stride,count")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glTexCoordPointerEXT")]
            public static void TexCoordPointer<T4>(int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glTexCoordPointerEXT")]
            public static void TexCoordPointer<T4>(int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glTexCoordPointerEXT")]
            public static void TexCoordPointer<T4>(int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[,,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of texture coordinates
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glTexCoordPointerEXT")]
            public static void TexCoordPointer<T4>(int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] ref T4 pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glVertexPointerEXT")]
            public static void VertexPointer(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, int count, [CountAttribute(Computed = "size,type,stride,count")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glVertexPointerEXT")]
            public static void VertexPointer<T4>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glVertexPointerEXT")]
            public static void VertexPointer<T4>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glVertexPointerEXT")]
            public static void VertexPointer<T4>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] T4[,,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_array]
            /// Define an array of vertex data
            /// </summary>
            /// <param name="size">
            /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
            /// </param>
            /// <param name="type">
            /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
            /// </param>
            /// <param name="stride">
            /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
            /// </param>
            /// <param name="count">
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride,count)]
            /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_array", Version = "", EntryPoint = "glVertexPointerEXT")]
            public static void VertexPointer<T4>(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, int count, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride,count")] ref T4 pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(22)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glArrayElementEXT(int i);

            [Slot(254)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColorPointerEXT(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, int count, [CountAttribute(Computed = "size,type,stride,count")] IntPtr pointer);

            [Slot(475)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDrawArraysEXT(OpenTK.Graphics.OpenGL.PrimitiveType mode, int first, int count);

            [Slot(517)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glEdgeFlagPointerEXT(int stride, int count, [CountAttribute(Computed = "stride,count")] bool* pointer);

            [Slot(973)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetPointervEXT(OpenTK.Graphics.OpenGL.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);

            [Slot(1193)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glIndexPointerEXT(OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, int count, [CountAttribute(Computed = "type,stride,count")] IntPtr pointer);

            [Slot(1621)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNormalPointerEXT(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, int count, [CountAttribute(Computed = "type,stride,count")] IntPtr pointer);

            [Slot(2246)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexCoordPointerEXT(int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, int count, [CountAttribute(Computed = "size,type,stride,count")] IntPtr pointer);

            [Slot(2832)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexPointerEXT(int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, int count, [CountAttribute(Computed = "size,type,stride,count")] IntPtr pointer);
        }
    }
}
