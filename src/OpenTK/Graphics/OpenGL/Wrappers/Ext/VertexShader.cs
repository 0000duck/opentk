//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "VertexShader" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBeginVertexShaderEXT")]
            public static void BeginVertexShader()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBindLightParameterEXT")]
            public static uint BindLightParameter(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBindMaterialParameterEXT")]
            public static uint BindMaterialParameter(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBindParameterEXT")]
            public static uint BindParameter(OpenTK.Graphics.OpenGL.ExtVertexShader value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="unit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBindTexGenParameterEXT")]
            public static uint BindTexGenParameter(OpenTK.Graphics.OpenGL.TextureUnit unit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="unit">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBindTextureUnitParameterEXT")]
            public static uint BindTextureUnitParameter(OpenTK.Graphics.OpenGL.TextureUnit unit, OpenTK.Graphics.OpenGL.ExtVertexShader value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glBindVertexShaderEXT")]
            public static void BindVertexShader(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glDeleteVertexShaderEXT")]
            public static void DeleteVertexShader(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glDisableVariantClientStateEXT")]
            public static void DisableVariantClientState(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glEnableVariantClientStateEXT")]
            public static void EnableVariantClientState(uint id)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glEndVertexShaderEXT")]
            public static void EndVertexShader()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="res">
            /// </param>
            /// <param name="src">
            /// </param>
            /// <param name="num">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glExtractComponentEXT")]
            public static void ExtractComponent(uint res, uint src, uint num)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="datatype">
            /// </param>
            /// <param name="storagetype">
            /// </param>
            /// <param name="range">
            /// </param>
            /// <param name="components">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGenSymbolsEXT")]
            public static uint GenSymbol(OpenTK.Graphics.OpenGL.ExtVertexShader datatype, OpenTK.Graphics.OpenGL.ExtVertexShader storagetype, OpenTK.Graphics.OpenGL.ExtVertexShader range, uint components)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="range">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGenVertexShadersEXT")]
            public static uint GenVertexShaders(uint range)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static void GetInvariantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static void GetInvariantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out bool data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static unsafe void GetInvariantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantFloatvEXT")]
            public static void GetInvariantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantFloatvEXT")]
            public static void GetInvariantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out float data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantFloatvEXT")]
            public static unsafe void GetInvariantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantIntegervEXT")]
            public static void GetInvariantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantIntegervEXT")]
            public static void GetInvariantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out int data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetInvariantIntegervEXT")]
            public static unsafe void GetInvariantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static void GetLocalConstantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static void GetLocalConstantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out bool data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static unsafe void GetLocalConstantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static void GetLocalConstantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static void GetLocalConstantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out float data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static unsafe void GetLocalConstantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static void GetLocalConstantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static void GetLocalConstantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out int data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static unsafe void GetLocalConstantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantBooleanvEXT")]
            public static void GetVariantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantBooleanvEXT")]
            public static void GetVariantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out bool data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantBooleanvEXT")]
            public static unsafe void GetVariantBoolean(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantFloatvEXT")]
            public static void GetVariantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantFloatvEXT")]
            public static void GetVariantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out float data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantFloatvEXT")]
            public static unsafe void GetVariantFloat(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantIntegervEXT")]
            public static void GetVariantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantIntegervEXT")]
            public static void GetVariantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] out int data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantIntegervEXT")]
            public static unsafe void GetVariantInteger(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantPointervEXT")]
            public static void GetVariantPointer(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantPointervEXT")]
            public static void GetVariantPointer<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [InAttribute, OutAttribute, CountAttribute(Computed = "id")] T2[] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantPointervEXT")]
            public static void GetVariantPointer<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [InAttribute, OutAttribute, CountAttribute(Computed = "id")] T2[,] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantPointervEXT")]
            public static void GetVariantPointer<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [InAttribute, OutAttribute, CountAttribute(Computed = "id")] T2[,,] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="value">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glGetVariantPointervEXT")]
            public static void GetVariantPointer<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [InAttribute, OutAttribute, CountAttribute(Computed = "id")] ref T2 data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="res">
            /// </param>
            /// <param name="src">
            /// </param>
            /// <param name="num">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glInsertComponentEXT")]
            public static void InsertComponent(uint res, uint src, uint num)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="cap">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glIsVariantEnabledEXT")]
            public static bool IsVariantEnabled(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader cap)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetInvariantEXT")]
            public static void SetInvariant(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [CountAttribute(Computed = "id,type")] IntPtr addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetInvariantEXT")]
            public static void SetInvariant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] T2[] addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetInvariantEXT")]
            public static void SetInvariant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] T2[,] addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetInvariantEXT")]
            public static void SetInvariant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] T2[,,] addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetInvariantEXT")]
            public static void SetInvariant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] ref T2 addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetLocalConstantEXT")]
            public static void SetLocalConstant(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [CountAttribute(Computed = "id,type")] IntPtr addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetLocalConstantEXT")]
            public static void SetLocalConstant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] T2[] addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetLocalConstantEXT")]
            public static void SetLocalConstant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] T2[,] addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetLocalConstantEXT")]
            public static void SetLocalConstant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] T2[,,] addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSetLocalConstantEXT")]
            public static void SetLocalConstant<T2>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type")] ref T2 addr)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="res">
            /// </param>
            /// <param name="arg1">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glShaderOp1EXT")]
            public static void ShaderOp1(OpenTK.Graphics.OpenGL.ExtVertexShader op, uint res, uint arg1)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="res">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg2">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glShaderOp2EXT")]
            public static void ShaderOp2(OpenTK.Graphics.OpenGL.ExtVertexShader op, uint res, uint arg1, uint arg2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="res">
            /// </param>
            /// <param name="arg1">
            /// </param>
            /// <param name="arg2">
            /// </param>
            /// <param name="arg3">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glShaderOp3EXT")]
            public static void ShaderOp3(OpenTK.Graphics.OpenGL.ExtVertexShader op, uint res, uint arg1, uint arg2, uint arg3)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="res">
            /// </param>
            /// <param name="@in">
            /// </param>
            /// <param name="outX">
            /// </param>
            /// <param name="outY">
            /// </param>
            /// <param name="outZ">
            /// </param>
            /// <param name="outW">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glSwizzleEXT")]
            public static void Swizzle(uint res, uint @in, OpenTK.Graphics.OpenGL.ExtVertexShader outX, OpenTK.Graphics.OpenGL.ExtVertexShader outY, OpenTK.Graphics.OpenGL.ExtVertexShader outZ, OpenTK.Graphics.OpenGL.ExtVertexShader outW)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantPointerEXT")]
            public static void VariantPointer(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, uint stride, [CountAttribute(Computed = "id,type,stride")] IntPtr addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantPointerEXT")]
            public static void VariantPointer<T3>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, uint stride, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type,stride")] T3[] addr)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantPointerEXT")]
            public static void VariantPointer<T3>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, uint stride, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type,stride")] T3[,] addr)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantPointerEXT")]
            public static void VariantPointer<T3>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, uint stride, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type,stride")] T3[,,] addr)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantPointerEXT")]
            public static void VariantPointer<T3>(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, uint stride, [InAttribute, OutAttribute, CountAttribute(Computed = "id,type,stride")] ref T3 addr)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantbvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] SByte[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantbvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref SByte addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantbvEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] SByte* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantdvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] double[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantdvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref double addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantdvEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] double* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantfvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] float[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantfvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref float addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantfvEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] float* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantivEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] int[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantivEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref int addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantivEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] int* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantsvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] short[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantsvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref short addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantsvEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] short* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantubvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] Byte[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantubvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref Byte addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantubvEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] Byte* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantuivEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] uint[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantuivEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref uint addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantuivEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] uint* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantusvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ushort[] addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantusvEXT")]
            public static void Variant(uint id, [CountAttribute(Computed = "id")] ref ushort addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="id">
            /// </param>
            /// <param name="addr">
            /// [length: COMPSIZE(id)]
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glVariantusvEXT")]
            public static unsafe void Variant(uint id, [CountAttribute(Computed = "id")] ushort* addr)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_vertex_shader]
            /// </summary>
            /// <param name="res">
            /// </param>
            /// <param name="@in">
            /// </param>
            /// <param name="outX">
            /// </param>
            /// <param name="outY">
            /// </param>
            /// <param name="outZ">
            /// </param>
            /// <param name="outW">
            /// </param>
            [AutoGenerated(Category = "EXT_vertex_shader", Version = "", EntryPoint = "glWriteMaskEXT")]
            public static void WriteMask(uint res, uint @in, OpenTK.Graphics.OpenGL.ExtVertexShader outX, OpenTK.Graphics.OpenGL.ExtVertexShader outY, OpenTK.Graphics.OpenGL.ExtVertexShader outZ, OpenTK.Graphics.OpenGL.ExtVertexShader outW)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(41)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBeginVertexShaderEXT();

            [Slot(66)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glBindLightParameterEXT(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter value);

            [Slot(67)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glBindMaterialParameterEXT(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter value);

            [Slot(69)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glBindParameterEXT(OpenTK.Graphics.OpenGL.ExtVertexShader value);

            [Slot(78)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glBindTexGenParameterEXT(OpenTK.Graphics.OpenGL.TextureUnit unit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter value);

            [Slot(83)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glBindTextureUnitParameterEXT(OpenTK.Graphics.OpenGL.TextureUnit unit, OpenTK.Graphics.OpenGL.ExtVertexShader value);

            [Slot(90)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindVertexShaderEXT(uint id);

            [Slot(443)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDeleteVertexShaderEXT(uint id);

            [Slot(464)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableVariantClientStateEXT(uint id);

            [Slot(528)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableVariantClientStateEXT(uint id);

            [Slot(550)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEndVertexShaderEXT();

            [Slot(571)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glExtractComponentEXT(uint res, uint src, uint num);

            [Slot(687)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glGenSymbolsEXT(OpenTK.Graphics.OpenGL.ExtVertexShader datatype, OpenTK.Graphics.OpenGL.ExtVertexShader storagetype, OpenTK.Graphics.OpenGL.ExtVertexShader range, uint components);

            [Slot(694)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern uint glGenVertexShadersEXT(uint range);

            [Slot(816)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetInvariantBooleanvEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool* data);

            [Slot(817)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetInvariantFloatvEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float* data);

            [Slot(818)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetInvariantIntegervEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int* data);

            [Slot(825)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetLocalConstantBooleanvEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool* data);

            [Slot(826)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetLocalConstantFloatvEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float* data);

            [Slot(827)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetLocalConstantIntegervEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int* data);

            [Slot(1114)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVariantBooleanvEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] bool* data);

            [Slot(1115)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVariantFloatvEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] float* data);

            [Slot(1116)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVariantIntegervEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] int* data);

            [Slot(1117)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetVariantPointervEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute, CountAttribute(Computed = "id")] IntPtr data);

            [Slot(1202)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glInsertComponentEXT(uint res, uint src, uint num);

            [Slot(1259)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsVariantEnabledEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader cap);

            [Slot(2096)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSetInvariantEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [CountAttribute(Computed = "id,type")] IntPtr addr);

            [Slot(2097)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSetLocalConstantEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, [CountAttribute(Computed = "id,type")] IntPtr addr);

            [Slot(2101)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glShaderOp1EXT(OpenTK.Graphics.OpenGL.ExtVertexShader op, uint res, uint arg1);

            [Slot(2102)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glShaderOp2EXT(OpenTK.Graphics.OpenGL.ExtVertexShader op, uint res, uint arg1, uint arg2);

            [Slot(2103)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glShaderOp3EXT(OpenTK.Graphics.OpenGL.ExtVertexShader op, uint res, uint arg1, uint arg2, uint arg3);

            [Slot(2140)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSwizzleEXT(uint res, uint @in, OpenTK.Graphics.OpenGL.ExtVertexShader outX, OpenTK.Graphics.OpenGL.ExtVertexShader outY, OpenTK.Graphics.OpenGL.ExtVertexShader outZ, OpenTK.Graphics.OpenGL.ExtVertexShader outW);

            [Slot(2510)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVariantPointerEXT(uint id, OpenTK.Graphics.OpenGL.ExtVertexShader type, uint stride, [CountAttribute(Computed = "id,type,stride")] IntPtr addr);

            [Slot(2506)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantbvEXT(uint id, [CountAttribute(Computed = "id")] SByte* addr);

            [Slot(2507)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantdvEXT(uint id, [CountAttribute(Computed = "id")] double* addr);

            [Slot(2508)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantfvEXT(uint id, [CountAttribute(Computed = "id")] float* addr);

            [Slot(2509)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantivEXT(uint id, [CountAttribute(Computed = "id")] int* addr);

            [Slot(2511)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantsvEXT(uint id, [CountAttribute(Computed = "id")] short* addr);

            [Slot(2512)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantubvEXT(uint id, [CountAttribute(Computed = "id")] Byte* addr);

            [Slot(2513)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantuivEXT(uint id, [CountAttribute(Computed = "id")] uint* addr);

            [Slot(2514)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVariantusvEXT(uint id, [CountAttribute(Computed = "id")] ushort* addr);

            [Slot(2952)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glWriteMaskEXT(uint res, uint @in, OpenTK.Graphics.OpenGL.ExtVertexShader outX, OpenTK.Graphics.OpenGL.ExtVertexShader outY, OpenTK.Graphics.OpenGL.ExtVertexShader outZ, OpenTK.Graphics.OpenGL.ExtVertexShader outW);
        }
    }
}
