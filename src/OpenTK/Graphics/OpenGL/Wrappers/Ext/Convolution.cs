//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Convolution" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a one-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution1D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter1DEXT")]
            public static void ConvolutionFilter1D(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a one-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution1D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter1DEXT")]
            public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] image)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a one-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution1D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter1DEXT")]
            public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] image)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a one-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution1D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter1DEXT")]
            public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] image)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a one-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution1D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter1DEXT")]
            public static void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 image)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="height">
            /// The height of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width,height)]
            /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter2DEXT")]
            public static void ConvolutionFilter2D(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="height">
            /// The height of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width,height)]
            /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter2DEXT")]
            public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] image)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="height">
            /// The height of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width,height)]
            /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter2DEXT")]
            public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] image)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="height">
            /// The height of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width,height)]
            /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter2DEXT")]
            public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] image)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array referenced by data.
            /// </param>
            /// <param name="height">
            /// The height of the pixel array referenced by data.
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(format,type,width,height)]
            /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionFilter2DEXT")]
            public static void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 image)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterfEXT")]
            public static void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterfvEXT")]
            public static void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterfvEXT")]
            public static void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterfvEXT")]
            public static unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameteriEXT")]
            public static void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterivEXT")]
            public static void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterivEXT")]
            public static void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Set convolution parameters
            /// </summary>
            /// <param name="target">
            /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be set. Must be ConvolutionBorderMode.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glConvolutionParameterivEXT")]
            public static unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Copy pixels into a one-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution1D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="x">
            /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
            /// </param>
            /// <param name="y">
            /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array to copy.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glCopyConvolutionFilter1DEXT")]
            public static void CopyConvolutionFilter1D(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Copy pixels into a two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Convolution2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="x">
            /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
            /// </param>
            /// <param name="y">
            /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
            /// </param>
            /// <param name="width">
            /// The width of the pixel array to copy.
            /// </param>
            /// <param name="height">
            /// The height of the pixel array to copy.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glCopyConvolutionFilter2DEXT")]
            public static void CopyConvolutionFilter2D(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get current 1D or 2D convolution filter kernel
            /// </summary>
            /// <param name="target">
            /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
            /// </param>
            /// <param name="format">
            /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the output image.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionFilterEXT")]
            public static void GetConvolutionFilter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get current 1D or 2D convolution filter kernel
            /// </summary>
            /// <param name="target">
            /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
            /// </param>
            /// <param name="format">
            /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the output image.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionFilterEXT")]
            public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] image)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get current 1D or 2D convolution filter kernel
            /// </summary>
            /// <param name="target">
            /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
            /// </param>
            /// <param name="format">
            /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the output image.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionFilterEXT")]
            public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] image)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get current 1D or 2D convolution filter kernel
            /// </summary>
            /// <param name="target">
            /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
            /// </param>
            /// <param name="format">
            /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the output image.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionFilterEXT")]
            public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] image)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get current 1D or 2D convolution filter kernel
            /// </summary>
            /// <param name="target">
            /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
            /// </param>
            /// <param name="format">
            /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="image">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the output image.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionFilterEXT")]
            public static void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 image)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get convolution parameters
            /// </summary>
            /// <param name="target">
            /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the parameters to be retrieved.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get convolution parameters
            /// </summary>
            /// <param name="target">
            /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the parameters to be retrieved.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get convolution parameters
            /// </summary>
            /// <param name="target">
            /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the parameters to be retrieved.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get convolution parameters
            /// </summary>
            /// <param name="target">
            /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the parameters to be retrieved.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get convolution parameters
            /// </summary>
            /// <param name="target">
            /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the parameters to be retrieved.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get convolution parameters
            /// </summary>
            /// <param name="target">
            /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the parameters to be retrieved.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            /// The separable filter to be retrieved. Must be Separable2D.
            /// </param>
            /// <param name="format">
            /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the row filter image.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the column filter image.
            /// </param>
            /// <param name="span">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the span filter image (currently unused).
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetSeparableFilterEXT")]
            public static void GetSeparableFilter(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            /// The separable filter to be retrieved. Must be Separable2D.
            /// </param>
            /// <param name="format">
            /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the row filter image.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the column filter image.
            /// </param>
            /// <param name="span">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the span filter image (currently unused).
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetSeparableFilterEXT")]
            public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            /// The separable filter to be retrieved. Must be Separable2D.
            /// </param>
            /// <param name="format">
            /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the row filter image.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the column filter image.
            /// </param>
            /// <param name="span">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the span filter image (currently unused).
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetSeparableFilterEXT")]
            public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            /// The separable filter to be retrieved. Must be Separable2D.
            /// </param>
            /// <param name="format">
            /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the row filter image.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the column filter image.
            /// </param>
            /// <param name="span">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the span filter image (currently unused).
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetSeparableFilterEXT")]
            public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Get separable convolution filter kernel images
            /// </summary>
            /// <param name="target">
            /// The separable filter to be retrieved. Must be Separable2D.
            /// </param>
            /// <param name="format">
            /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the row filter image.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the column filter image.
            /// </param>
            /// <param name="span">
            /// [length: COMPSIZE(target,format,type)]
            /// Pointer to storage for the span filter image (currently unused).
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glGetSeparableFilterEXT")]
            public static void GetSeparableFilter<T3, T4, T5>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T5 span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Separable2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            /// </param>
            /// <param name="height">
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type,height)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glSeparableFilter2DEXT")]
            public static void SeparableFilter2D(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Separable2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            /// </param>
            /// <param name="height">
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type,height)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glSeparableFilter2DEXT")]
            public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Separable2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            /// </param>
            /// <param name="height">
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type,height)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glSeparableFilter2DEXT")]
            public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Separable2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            /// </param>
            /// <param name="height">
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type,height)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glSeparableFilter2DEXT")]
            public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_convolution]
            /// Define a separable two-dimensional convolution filter
            /// </summary>
            /// <param name="target">
            /// Must be Separable2D.
            /// </param>
            /// <param name="internalformat">
            /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="width">
            /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            /// </param>
            /// <param name="height">
            /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
            /// </param>
            /// <param name="format">
            /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="row">
            /// [length: COMPSIZE(target,format,type,width)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
            /// </param>
            /// <param name="column">
            /// [length: COMPSIZE(target,format,type,height)]
            /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
            /// </param>
            [AutoGenerated(Category = "EXT_convolution", Version = "", EntryPoint = "glSeparableFilter2DEXT")]
            public static void SeparableFilter2D<T6, T7>(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] ref T6 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] ref T7 column)
                where T6 : struct
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(308)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glConvolutionFilter1DEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image);

            [Slot(310)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glConvolutionFilter2DEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image);

            [Slot(312)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glConvolutionParameterfEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, float @params);

            [Slot(314)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glConvolutionParameterfvEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] float* @params);

            [Slot(316)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glConvolutionParameteriEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, int @params);

            [Slot(318)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glConvolutionParameterivEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(327)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyConvolutionFilter1DEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width);

            [Slot(329)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyConvolutionFilter2DEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height);

            [Slot(750)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetConvolutionFilterEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image);

            [Slot(752)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetConvolutionParameterfvEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(754)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetConvolutionParameterivEXT(OpenTK.Graphics.OpenGL.ConvolutionTargetExt target, OpenTK.Graphics.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1031)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetSeparableFilterEXT(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span);

            [Slot(2092)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSeparableFilter2DEXT(OpenTK.Graphics.OpenGL.SeparableTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column);
        }
    }
}
