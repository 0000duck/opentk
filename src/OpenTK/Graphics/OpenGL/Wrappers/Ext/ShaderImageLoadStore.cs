//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "ShaderImageLoadStore" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_shader_image_load_store]
            /// Bind a level of a texture to an image unit
            /// </summary>
            /// <param name="index">
            /// Specifies the index of the image unit to which to bind the texture
            /// </param>
            /// <param name="texture">
            /// Specifies the name of the texture to bind to the image unit.
            /// </param>
            /// <param name="level">
            /// Specifies the level of the texture that is to be bound.
            /// </param>
            /// <param name="layered">
            /// Specifies whether a layered texture binding is to be established.
            /// </param>
            /// <param name="layer">
            /// If layered is False, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
            /// </param>
            /// <param name="access">
            /// Specifies a token indicating the type of access that will be performed on the image.
            /// </param>
            /// <param name="format">
            /// Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.
            /// </param>
            [AutoGenerated(Category = "EXT_shader_image_load_store", Version = "", EntryPoint = "glBindImageTextureEXT")]
            public static void BindImageTexture(uint index, uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL.BufferAccessArb access, int format)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_shader_image_load_store]
            /// Defines a barrier ordering memory transactions
            /// </summary>
            /// <param name="barriers">
            /// Specifies the barriers to insert. Must be a bitwise combination of VertexAttribArrayBarrierBit, ElementArrayBarrierBit, UniformBarrierBit, TextureFetchBarrierBit, ShaderImageAccessBarrierBit, CommandBarrierBit, PixelBufferBarrierBit, TextureUpdateBarrierBit, BufferUpdateBarrierBit, FramebufferBarrierBit, TransformFeedbackBarrierBit, AtomicCounterBarrierBit, or ShaderStorageBarrierBit. If the special value AllBarrierBits is specified, all supported barriers will be inserted.
            /// </param>
            [AutoGenerated(Category = "EXT_shader_image_load_store", Version = "", EntryPoint = "glMemoryBarrierEXT")]
            public static void MemoryBarrier(OpenTK.Graphics.OpenGL.MemoryBarrierMask barriers)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(64)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, OpenTK.Graphics.OpenGL.BufferAccessArb access, int format);

            [Slot(1385)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMemoryBarrierEXT(OpenTK.Graphics.OpenGL.MemoryBarrierMask barriers);
        }
    }
}
