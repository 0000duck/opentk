//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "TextureObject" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_texture_object]
            /// Determine if textures are loaded in texture memory
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be queried.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array containing the names of the textures to be queried.
            /// </param>
            /// <param name="residences">
            /// [length: n]
            /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glAreTexturesResidentEXT")]
            public static bool AreTexturesResident(int n, [CountAttribute(Parameter = "n")] uint[] textures, [OutAttribute, CountAttribute(Parameter = "n")] bool[] residences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Determine if textures are loaded in texture memory
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be queried.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array containing the names of the textures to be queried.
            /// </param>
            /// <param name="residences">
            /// [length: n]
            /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glAreTexturesResidentEXT")]
            public static bool AreTexturesResident(int n, [CountAttribute(Parameter = "n")] ref uint textures, [OutAttribute, CountAttribute(Parameter = "n")] out bool residences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Determine if textures are loaded in texture memory
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be queried.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array containing the names of the textures to be queried.
            /// </param>
            /// <param name="residences">
            /// [length: n]
            /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glAreTexturesResidentEXT")]
            public static unsafe bool AreTexturesResident(int n, [CountAttribute(Parameter = "n")] uint* textures, [OutAttribute, CountAttribute(Parameter = "n")] bool* residences)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Bind a named texture to a texturing target
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the texture is bound. Must be one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMap, TextureCubeMapArray, TextureBuffer, Texture2DMultisample or Texture2DMultisampleArray.
            /// </param>
            /// <param name="texture">
            /// Specifies the name of a texture.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glBindTextureEXT")]
            public static void BindTexture(OpenTK.Graphics.OpenGL.TextureTarget target, uint texture)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Delete named textures
            /// </summary>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array of textures to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glDeleteTexturesEXT")]
            public static void DeleteTexture([CountAttribute(Parameter = "n")] uint textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Delete named textures
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be deleted.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array of textures to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glDeleteTexturesEXT")]
            public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint[] textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Delete named textures
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be deleted.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array of textures to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glDeleteTexturesEXT")]
            public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] ref uint textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Delete named textures
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be deleted.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array of textures to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glDeleteTexturesEXT")]
            public static unsafe void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Generate texture names
            /// </summary>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glGenTexturesEXT")]
            public static uint GenTexture()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Generate texture names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of texture names to be generated.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array in which the generated texture names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glGenTexturesEXT")]
            public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Generate texture names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of texture names to be generated.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array in which the generated texture names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glGenTexturesEXT")]
            public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Generate texture names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of texture names to be generated.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array in which the generated texture names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glGenTexturesEXT")]
            public static unsafe void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Determine if a name corresponds to a texture
            /// </summary>
            /// <param name="texture">
            /// Specifies a value that may be the name of a texture.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glIsTextureEXT")]
            public static bool IsTexture(uint texture)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Set texture residence priority
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be prioritized.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array containing the names of the textures to be prioritized.
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glPrioritizeTexturesEXT")]
            public static void PrioritizeTextures(int n, [CountAttribute(Parameter = "n")] uint[] textures, [CountAttribute(Parameter = "n")] float[] priorities)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Set texture residence priority
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be prioritized.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array containing the names of the textures to be prioritized.
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glPrioritizeTexturesEXT")]
            public static void PrioritizeTextures(int n, [CountAttribute(Parameter = "n")] ref uint textures, [CountAttribute(Parameter = "n")] ref float priorities)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_texture_object]
            /// Set texture residence priority
            /// </summary>
            /// <param name="n">
            /// Specifies the number of textures to be prioritized.
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// Specifies an array containing the names of the textures to be prioritized.
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_object", Version = "", EntryPoint = "glPrioritizeTexturesEXT")]
            public static unsafe void PrioritizeTextures(int n, [CountAttribute(Parameter = "n")] uint* textures, [CountAttribute(Parameter = "n")] float* priorities)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(20)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe byte glAreTexturesResidentEXT(int n, [CountAttribute(Parameter = "n")] uint* textures, [OutAttribute, CountAttribute(Parameter = "n")] bool* residences);

            [Slot(80)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindTextureEXT(OpenTK.Graphics.OpenGL.TextureTarget target, uint texture);

            [Slot(438)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteTexturesEXT(int n, [CountAttribute(Parameter = "n")] uint* textures);

            [Slot(689)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenTexturesEXT(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures);

            [Slot(1254)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsTextureEXT(uint texture);

            [Slot(1735)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glPrioritizeTexturesEXT(int n, [CountAttribute(Parameter = "n")] uint* textures, [CountAttribute(Parameter = "n")] float* priorities);
        }
    }
}
