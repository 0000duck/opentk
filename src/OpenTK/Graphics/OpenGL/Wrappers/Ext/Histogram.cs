//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "Histogram" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram table
            /// </summary>
            /// <param name="target">
            /// Must be Histogram.
            /// </param>
            /// <param name="reset">
            /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
            /// </param>
            /// <param name="format">
            /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned histogram table.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramEXT")]
            public static void GetHistogram(OpenTK.Graphics.OpenGL.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram table
            /// </summary>
            /// <param name="target">
            /// Must be Histogram.
            /// </param>
            /// <param name="reset">
            /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
            /// </param>
            /// <param name="format">
            /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned histogram table.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramEXT")]
            public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram table
            /// </summary>
            /// <param name="target">
            /// Must be Histogram.
            /// </param>
            /// <param name="reset">
            /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
            /// </param>
            /// <param name="format">
            /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned histogram table.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramEXT")]
            public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram table
            /// </summary>
            /// <param name="target">
            /// Must be Histogram.
            /// </param>
            /// <param name="reset">
            /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
            /// </param>
            /// <param name="format">
            /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned histogram table.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramEXT")]
            public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram table
            /// </summary>
            /// <param name="target">
            /// Must be Histogram.
            /// </param>
            /// <param name="reset">
            /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
            /// </param>
            /// <param name="format">
            /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned histogram table.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramEXT")]
            public static void GetHistogram<T4>(OpenTK.Graphics.OpenGL.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram parameters
            /// </summary>
            /// <param name="target">
            /// Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="pname">
            /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram parameters
            /// </summary>
            /// <param name="target">
            /// Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="pname">
            /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram parameters
            /// </summary>
            /// <param name="target">
            /// Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="pname">
            /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram parameters
            /// </summary>
            /// <param name="target">
            /// Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="pname">
            /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramParameterivEXT")]
            public static void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram parameters
            /// </summary>
            /// <param name="target">
            /// Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="pname">
            /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramParameterivEXT")]
            public static void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get histogram parameters
            /// </summary>
            /// <param name="target">
            /// Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="pname">
            /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetHistogramParameterivEXT")]
            public static unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minimum and maximum pixel values
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="reset">
            /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
            /// </param>
            /// <param name="format">
            /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxEXT")]
            public static void GetMinmax(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minimum and maximum pixel values
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="reset">
            /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
            /// </param>
            /// <param name="format">
            /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxEXT")]
            public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minimum and maximum pixel values
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="reset">
            /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
            /// </param>
            /// <param name="format">
            /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxEXT")]
            public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minimum and maximum pixel values
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="reset">
            /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
            /// </param>
            /// <param name="format">
            /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxEXT")]
            public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minimum and maximum pixel values
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="reset">
            /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
            /// </param>
            /// <param name="format">
            /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
            /// </param>
            /// <param name="type">
            /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
            /// </param>
            /// <param name="values">
            /// [length: COMPSIZE(target,format,type)]
            /// A pointer to storage for the returned values.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxEXT")]
            public static void GetMinmax<T4>(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minmax parameters
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// A pointer to storage for the retrieved parameters.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minmax parameters
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// A pointer to storage for the retrieved parameters.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minmax parameters
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// A pointer to storage for the retrieved parameters.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minmax parameters
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// A pointer to storage for the retrieved parameters.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minmax parameters
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// A pointer to storage for the retrieved parameters.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Get minmax parameters
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            /// <param name="pname">
            /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// A pointer to storage for the retrieved parameters.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Define histogram table
            /// </summary>
            /// <param name="target">
            /// The histogram whose parameters are to be set. Must be one of Histogram or ProxyHistogram.
            /// </param>
            /// <param name="width">
            /// The number of entries in the histogram table.  Must be a power of 2.
            /// </param>
            /// <param name="internalformat">
            /// The format of entries in the histogram table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="sink">
            /// If True, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If False, pixels will proceed to the minmax process after histogramming.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glHistogramEXT")]
            public static void Histogram(OpenTK.Graphics.OpenGL.HistogramTargetExt target, int width, OpenTK.Graphics.OpenGL.InternalFormat internalformat, bool sink)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Define minmax table
            /// </summary>
            /// <param name="target">
            /// The minmax table whose parameters are to be set. Must be Minmax.
            /// </param>
            /// <param name="internalformat">
            /// The format of entries in the minmax table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
            /// </param>
            /// <param name="sink">
            /// If True, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If False, pixels will proceed to the final conversion process after minmax.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glMinmaxEXT")]
            public static void Minmax(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, bool sink)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Reset histogram table entries to zero
            /// </summary>
            /// <param name="target">
            /// Must be Histogram.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glResetHistogramEXT")]
            public static void ResetHistogram(OpenTK.Graphics.OpenGL.HistogramTargetExt target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_histogram]
            /// Reset minmax table entries to initial values
            /// </summary>
            /// <param name="target">
            /// Must be Minmax.
            /// </param>
            [AutoGenerated(Category = "EXT_histogram", Version = "", EntryPoint = "glResetMinmaxEXT")]
            public static void ResetMinmax(OpenTK.Graphics.OpenGL.MinmaxTargetExt target)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(794)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetHistogramEXT(OpenTK.Graphics.OpenGL.HistogramTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);

            [Slot(796)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetHistogramParameterfvEXT(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(798)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetHistogramParameterivEXT(OpenTK.Graphics.OpenGL.HistogramTargetExt target, OpenTK.Graphics.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(843)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetMinmaxEXT(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, bool reset, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);

            [Slot(845)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMinmaxParameterfvEXT(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(847)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMinmaxParameterivEXT(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1169)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glHistogramEXT(OpenTK.Graphics.OpenGL.HistogramTargetExt target, int width, OpenTK.Graphics.OpenGL.InternalFormat internalformat, bool sink);

            [Slot(1388)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMinmaxEXT(OpenTK.Graphics.OpenGL.MinmaxTargetExt target, OpenTK.Graphics.OpenGL.InternalFormat internalformat, bool sink);

            [Slot(2015)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glResetHistogramEXT(OpenTK.Graphics.OpenGL.HistogramTargetExt target);

            [Slot(2017)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glResetMinmaxEXT(OpenTK.Graphics.OpenGL.MinmaxTargetExt target);
        }
    }
}
