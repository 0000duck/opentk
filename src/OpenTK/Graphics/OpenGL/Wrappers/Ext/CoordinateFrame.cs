//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "CoordinateFrame" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="bx">
            /// </param>
            /// <param name="by">
            /// </param>
            /// <param name="bz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3bEXT")]
            public static void Binormal3(SByte bx, SByte by, SByte bz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3bvEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] SByte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3bvEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] ref SByte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="bx">
            /// </param>
            /// <param name="by">
            /// </param>
            /// <param name="bz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3dEXT")]
            public static void Binormal3(double bx, double by, double bz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3dvEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3dvEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="bx">
            /// </param>
            /// <param name="by">
            /// </param>
            /// <param name="bz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3fEXT")]
            public static void Binormal3(float bx, float by, float bz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3fvEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3fvEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="bx">
            /// </param>
            /// <param name="by">
            /// </param>
            /// <param name="bz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3iEXT")]
            public static void Binormal3(int bx, int by, int bz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3ivEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3ivEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] ref int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="bx">
            /// </param>
            /// <param name="by">
            /// </param>
            /// <param name="bz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3sEXT")]
            public static void Binormal3(short bx, short by, short bz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3svEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormal3svEXT")]
            public static void Binormal3([CountAttribute(Count = 3)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormalPointerEXT")]
            public static void BinormalPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormalPointerEXT")]
            public static void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormalPointerEXT")]
            public static void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormalPointerEXT")]
            public static void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glBinormalPointerEXT")]
            public static void BinormalPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="tx">
            /// </param>
            /// <param name="ty">
            /// </param>
            /// <param name="tz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3bEXT")]
            public static void Tangent3(SByte tx, SByte ty, SByte tz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3bvEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] SByte[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3bvEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] ref SByte v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="tx">
            /// </param>
            /// <param name="ty">
            /// </param>
            /// <param name="tz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3dEXT")]
            public static void Tangent3(double tx, double ty, double tz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3dvEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] double[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3dvEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] ref double v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="tx">
            /// </param>
            /// <param name="ty">
            /// </param>
            /// <param name="tz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3fEXT")]
            public static void Tangent3(float tx, float ty, float tz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3fvEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] float[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3fvEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] ref float v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="tx">
            /// </param>
            /// <param name="ty">
            /// </param>
            /// <param name="tz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3iEXT")]
            public static void Tangent3(int tx, int ty, int tz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3ivEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3ivEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] ref int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="tx">
            /// </param>
            /// <param name="ty">
            /// </param>
            /// <param name="tz">
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3sEXT")]
            public static void Tangent3(short tx, short ty, short tz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3svEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] short[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="v">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangent3svEXT")]
            public static void Tangent3([CountAttribute(Count = 3)] ref short v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangentPointerEXT")]
            public static void TangentPointer(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangentPointerEXT")]
            public static void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangentPointerEXT")]
            public static void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangentPointerEXT")]
            public static void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_coordinate_frame]
            /// </summary>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_coordinate_frame", Version = "", EntryPoint = "glTangentPointerEXT")]
            public static void TangentPointer<T2>(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(93)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBinormal3bEXT(SByte bx, SByte by, SByte bz);

            [Slot(94)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glBinormal3bvEXT([CountAttribute(Count = 3)] SByte* v);

            [Slot(95)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBinormal3dEXT(double bx, double by, double bz);

            [Slot(96)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glBinormal3dvEXT([CountAttribute(Count = 3)] double* v);

            [Slot(97)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBinormal3fEXT(float bx, float by, float bz);

            [Slot(98)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glBinormal3fvEXT([CountAttribute(Count = 3)] float* v);

            [Slot(99)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBinormal3iEXT(int bx, int by, int bz);

            [Slot(100)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glBinormal3ivEXT([CountAttribute(Count = 3)] int* v);

            [Slot(101)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBinormal3sEXT(short bx, short by, short bz);

            [Slot(102)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glBinormal3svEXT([CountAttribute(Count = 3)] short* v);

            [Slot(103)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBinormalPointerEXT(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

            [Slot(2143)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTangent3bEXT(SByte tx, SByte ty, SByte tz);

            [Slot(2144)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTangent3bvEXT([CountAttribute(Count = 3)] SByte* v);

            [Slot(2145)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTangent3dEXT(double tx, double ty, double tz);

            [Slot(2146)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTangent3dvEXT([CountAttribute(Count = 3)] double* v);

            [Slot(2147)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTangent3fEXT(float tx, float ty, float tz);

            [Slot(2148)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTangent3fvEXT([CountAttribute(Count = 3)] float* v);

            [Slot(2149)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTangent3iEXT(int tx, int ty, int tz);

            [Slot(2150)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTangent3ivEXT([CountAttribute(Count = 3)] int* v);

            [Slot(2151)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTangent3sEXT(short tx, short ty, short tz);

            [Slot(2152)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTangent3svEXT([CountAttribute(Count = 3)] short* v);

            [Slot(2153)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTangentPointerEXT(OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);
        }
    }
}
