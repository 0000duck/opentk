//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "FramebufferObject" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Bind a framebuffer to a framebuffer target
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target of the binding operation.
            /// </param>
            /// <param name="framebuffer">
            /// Specifies the name of the framebuffer object to bind.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glBindFramebufferEXT")]
            public static void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, uint framebuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Bind a renderbuffer to a renderbuffer target
            /// </summary>
            /// <param name="target">
            /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of the renderbuffer object to bind.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glBindRenderbufferEXT")]
            public static void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Check the completeness status of a framebuffer
            /// </summary>
            /// <param name="target">
            /// Specify the target of the framebuffer completeness check.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glCheckFramebufferStatusEXT")]
            public static OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL.FramebufferTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete framebuffer objects
            /// </summary>
            /// <param name="framebuffers">
            /// [length: n]
            /// A pointer to an array containing n framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersEXT")]
            public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] uint framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// A pointer to an array containing n framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersEXT")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint[] framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// A pointer to an array containing n framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersEXT")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] ref uint framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// A pointer to an array containing n framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersEXT")]
            public static unsafe void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete renderbuffer objects
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: n]
            /// A pointer to an array containing n renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] uint renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// A pointer to an array containing n renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint[] renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// A pointer to an array containing n renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] ref uint renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Delete renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// A pointer to an array containing n renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static unsafe void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point of the framebuffer.
            /// </param>
            /// <param name="renderbuffertarget">
            /// Specifies the renderbuffer target and must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture1DEXT")]
            public static void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture2DEXT")]
            public static void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture3DEXT")]
            public static void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level, int zoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersEXT")]
            public static uint GenFramebuffer()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to generate.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersEXT")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to generate.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersEXT")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to generate.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersEXT")]
            public static unsafe void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersEXT")]
            public static uint GenRenderbuffer()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to generate.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersEXT")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to generate.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersEXT")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to generate.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersEXT")]
            public static unsafe void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Generate mipmaps for a specified texture target
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray or TextureCubeMap.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGenerateMipmapEXT")]
            public static void GenerateMipmap(OpenTK.Graphics.OpenGL.GenerateMipmapTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Retrieve information about attachments of a bound framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment within target
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter of attachment to query.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of a variable receive the value of pname for attachment.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Retrieve information about a bound renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target of the query operation. target must be Renderbuffer.
            /// </param>
            /// <param name="pname">
            /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// Specifies the address of an array to receive the value of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Determine if a name corresponds to a framebuffer object
            /// </summary>
            /// <param name="framebuffer">
            /// Specifies a value that may be the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glIsFramebufferEXT")]
            public static bool IsFramebuffer(uint framebuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Determine if a name corresponds to a renderbuffer object
            /// </summary>
            /// <param name="renderbuffer">
            /// Specifies a value that may be the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glIsRenderbufferEXT")]
            public static bool IsRenderbuffer(uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_framebuffer_object]
            /// Establish data storage, format and dimensions of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "EXT_framebuffer_object", Version = "", EntryPoint = "glRenderbufferStorageEXT")]
            public static void RenderbufferStorage(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(62)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindFramebufferEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target, uint framebuffer);

            [Slot(75)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindRenderbufferEXT(OpenTK.Graphics.OpenGL.RenderbufferTarget target, uint renderbuffer);

            [Slot(149)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern OpenTK.Graphics.OpenGL.FramebufferErrorCode glCheckFramebufferStatusEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target);

            [Slot(412)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteFramebuffersEXT(int n, [CountAttribute(Parameter = "n")] uint* framebuffers);

            [Slot(431)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteRenderbuffersEXT(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers);

            [Slot(632)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferRenderbufferEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, uint renderbuffer);

            [Slot(638)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferTexture1DEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level);

            [Slot(640)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferTexture2DEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level);

            [Slot(642)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferTexture3DEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level, int zoffset);

            [Slot(670)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenFramebuffersEXT(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers);

            [Slot(684)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenRenderbuffersEXT(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers);

            [Slot(662)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGenerateMipmapEXT(OpenTK.Graphics.OpenGL.GenerateMipmapTarget target);

            [Slot(785)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFramebufferAttachmentParameterivEXT(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1024)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetRenderbufferParameterivEXT(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1226)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsFramebufferEXT(uint framebuffer);

            [Slot(1247)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsRenderbufferEXT(uint renderbuffer);

            [Slot(1984)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRenderbufferStorageEXT(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, int width, int height);
        }
    }
}
