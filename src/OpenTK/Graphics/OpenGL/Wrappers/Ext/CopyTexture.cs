//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "CopyTexture" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_copy_texture]
            /// Copy pixels into a 1D texture image
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the left corner of the row of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the left corner of the row of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image. The height of the texture image is 1.
            /// </param>
            /// <param name="border">
            /// Must be 0.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_texture", Version = "", EntryPoint = "glCopyTexImage1DEXT")]
            public static void CopyTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_copy_texture]
            /// Copy pixels into a 2D texture image
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture image.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture image.
            /// </param>
            /// <param name="border">
            /// Must be 0.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_texture", Version = "", EntryPoint = "glCopyTexImage2DEXT")]
            public static void CopyTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_copy_texture]
            /// Copy a one-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture1D.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies the texel offset within the texture array.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the left corner of the row of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the left corner of the row of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_texture", Version = "", EntryPoint = "glCopyTexSubImage1DEXT")]
            public static void CopyTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int x, int y, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_copy_texture]
            /// Copy a two-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_texture", Version = "", EntryPoint = "glCopyTexSubImage2DEXT")]
            public static void CopyTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_copy_texture]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level">
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset">
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset">
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset">
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="x">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y">
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the texture subimage.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_texture", Version = "", EntryPoint = "glCopyTexSubImage3DEXT")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(341)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTexImage1DEXT(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int border);

            [Slot(343)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTexImage2DEXT(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height, int border);

            [Slot(345)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTexSubImage1DEXT(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int x, int y, int width);

            [Slot(347)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTexSubImage2DEXT(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

            [Slot(349)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTexSubImage3DEXT(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        }
    }
}
