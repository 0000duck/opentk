//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "DirectStateAccess" in the extension "Ext".
        /// </summary>
        public static partial class Ext
        {
            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="texture">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static void BindMultiTexture(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, uint texture)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static OpenTK.Graphics.OpenGL.FramebufferStatus CheckNamedFramebufferStatus(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferDataEXT")]
            public static void ClearNamedBufferData<T4>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, int format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int offset, int size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClearNamedBufferSubDataEXT")]
            public static void ClearNamedBufferSubData<T6>(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
                where T6 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glClientAttribDefaultEXT")]
            public static void ClientAttribDefault(OpenTK.Graphics.OpenGL.ClientAttribMask mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static void CompressedMultiTexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static void CompressedMultiTexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static void CompressedMultiTexImage3D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static void CompressedMultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static void CompressedMultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static void CompressedMultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T11 bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static void CompressedTextureImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static void CompressedTextureImage2D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 bits)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static void CompressedTextureImage3D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static void CompressedTextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 bits)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T9[,,] bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static void CompressedTextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T9 bits)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T11[,,] bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="imageSize">
            /// </param>
            /// <param name="bits">
            /// [length: imageSize]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static void CompressedTextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T11 bits)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage1DEXT")]
            public static void CopyMultiTexImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexImage2DEXT")]
            public static void CopyMultiTexImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage1DEXT")]
            public static void CopyMultiTexSubImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int x, int y, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage2DEXT")]
            public static void CopyMultiTexSubImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyMultiTexSubImage3DEXT")]
            public static void CopyMultiTexSubImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static void CopyTextureImage1D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static void CopyTextureImage2D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height, int border)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static void CopyTextureSubImage1D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int x, int y, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static void CopyTextureSubImage2D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static void CopyTextureSubImage3D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="array">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static void DisableClientStateIndexed(OpenTK.Graphics.OpenGL.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="array">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableClientStateiEXT")]
            public static void DisableClientState(OpenTK.Graphics.OpenGL.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableVertexArrayAttribEXT")]
            public static void DisableVertexArrayAttrib(uint vaobj, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="array">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glDisableVertexArrayEXT")]
            public static void DisableVertexArray(uint vaobj, OpenTK.Graphics.OpenGL.EnableCap array)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="array">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static void EnableClientStateIndexed(OpenTK.Graphics.OpenGL.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Enable or disable client-side capability
            /// </summary>
            /// <param name="array">
            /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableClientStateiEXT")]
            public static void EnableClientState(OpenTK.Graphics.OpenGL.ArrayCap array, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableVertexArrayAttribEXT")]
            public static void EnableVertexArrayAttrib(uint vaobj, uint index)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="array">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glEnableVertexArrayEXT")]
            public static void EnableVertexArray(uint vaobj, OpenTK.Graphics.OpenGL.EnableCap array)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFlushMappedNamedBufferRangeEXT")]
            public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, int length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFlushMappedNamedBufferRangeEXT")]
            public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, IntPtr length)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static void FramebufferDrawBuffer(uint framebuffer, OpenTK.Graphics.OpenGL.DrawBufferMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="bufs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static void FramebufferDrawBuffers(uint framebuffer, int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL.DrawBufferMode[] bufs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="bufs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static void FramebufferDrawBuffers(uint framebuffer, int n, [CountAttribute(Parameter = "n")] ref OpenTK.Graphics.OpenGL.DrawBufferMode bufs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="bufs">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static unsafe void FramebufferDrawBuffers(uint framebuffer, int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL.DrawBufferMode* bufs)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="mode">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static void FramebufferReadBuffer(uint framebuffer, OpenTK.Graphics.OpenGL.ReadBufferMode mode)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateMultiTexMipmapEXT")]
            public static void GenerateMultiTexMipmap(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static void GenerateTextureMipmap(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static void GetCompressedMultiTexImage<T3>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] ref T3 img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] T3[,,] img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="lod">
            /// </param>
            /// <param name="img">
            /// [length: COMPSIZE(target,lod)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static void GetCompressedTextureImage<T3>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [InAttribute, OutAttribute, CountAttribute(Computed = "target,lod")] ref T3 img)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static void GetDoubleIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static void GetDoubleIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out double data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static unsafe void GetDoubleIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoublei_vEXT")]
            public static void GetDouble(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoublei_vEXT")]
            public static void GetDouble(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetDoublei_vEXT")]
            public static unsafe void GetDouble(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static void GetFloatIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float[] data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static void GetFloatIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] out float data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(target)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static unsafe void GetFloatIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloati_vEXT")]
            public static void GetFloat(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloati_vEXT")]
            public static void GetFloat(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFloati_vEXT")]
            public static unsafe void GetFloat(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Retrieve a named parameter from a framebuffer
            /// </summary>
            /// <param name="framebuffer">
            /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
            /// </param>
            /// <param name="pname">
            /// A token indicating the parameter to be retrieved.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The address of a variable to receive the value of the parameter named pname.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static void GetFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Retrieve a named parameter from a framebuffer
            /// </summary>
            /// <param name="framebuffer">
            /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
            /// </param>
            /// <param name="pname">
            /// A token indicating the parameter to be retrieved.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The address of a variable to receive the value of the parameter named pname.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static void GetFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Retrieve a named parameter from a framebuffer
            /// </summary>
            /// <param name="framebuffer">
            /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
            /// </param>
            /// <param name="pname">
            /// A token indicating the parameter to be retrieved.
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// The address of a variable to receive the value of the parameter named pname.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static unsafe void GetFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static unsafe void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static unsafe void GetMultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static unsafe void GetMultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static void GetMultiTexImage<T5>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T5 pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static unsafe void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static unsafe void GetMultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static unsafe void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static unsafe void GetMultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static unsafe void GetNamedBufferParameter(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer(uint buffer, OpenTK.Graphics.OpenGL.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static void GetNamedBufferPointer<T2>(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData(uint buffer, IntPtr offset, int size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static unsafe void GetNamedFramebufferAttachmentParameter(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferParameterivEXT")]
            public static void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferParameterivEXT")]
            public static void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedFramebufferParameterivEXT")]
            public static unsafe void GetNamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static unsafe void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static unsafe void GetNamedProgramLocalParameterI(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static unsafe void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static unsafe void GetNamedProgramLocalParameter(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "program,pname")] IntPtr @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] T3[] @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] T3[,] @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] T3[,,] @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@string">
            /// [length: COMPSIZE(program,pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static void GetNamedProgramString<T3>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [InAttribute, OutAttribute, CountAttribute(Computed = "program,pname")] ref T3 @string)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static void GetNamedProgram(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ProgramPropertyArb pname, [OutAttribute, CountAttribute(Count = 1)] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static unsafe void GetNamedProgram(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ProgramPropertyArb pname, [OutAttribute, CountAttribute(Count = 1)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static unsafe void GetNamedRenderbufferParameter(uint renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="data">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static void GetPointerIndexed<T2>(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 data)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetPointeri_vEXT")]
            public static void GetPointer<T2>(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T5[,,] pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(target,level,format,type)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static void GetTextureImage<T5>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T5 pixels)
                where T5 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static unsafe void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static unsafe void GetTextureLevelParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static unsafe void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static unsafe void GetTextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static unsafe void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static unsafe void GetTextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
            public static void GetVertexArrayInteger(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
            public static void GetVertexArrayInteger(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] out int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegeri_vEXT")]
            public static unsafe void GetVertexArrayInteger(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegervEXT")]
            public static void GetVertexArrayInteger(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegervEXT")]
            public static void GetVertexArrayInteger(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] out int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayIntegervEXT")]
            public static unsafe void GetVertexArrayInteger(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] IntPtr param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute] T3[] param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute] T3[,] param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute] T3[,,] param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointeri_vEXT")]
            public static void GetVertexArrayPointer<T3>(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute] ref T3 param)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glGetVertexArrayPointervEXT")]
            public static void GetVertexArrayPointer<T2>(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 param)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static IntPtr MapNamedBuffer(uint buffer, OpenTK.Graphics.OpenGL.BufferAccess access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="access">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static IntPtr MapNamedBuffer(uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferRangeEXT")]
            public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, int length, OpenTK.Graphics.OpenGL.BufferAccessMask access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="length">
            /// </param>
            /// <param name="access">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMapNamedBufferRangeEXT")]
            public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL.BufferAccessMask access)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static void MultiTexBuffer(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TypeEnum internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer(OpenTK.Graphics.OpenGL.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="pointer">
            /// [length: COMPSIZE(size,type,stride)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static void MultiTexCoordPointer<T4>(OpenTK.Graphics.OpenGL.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static unsafe void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnviEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static unsafe void MultiTexEnv(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendEXT")]
            public static void MultiTexGend(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, double param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static unsafe void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static unsafe void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGeniEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="coord">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static unsafe void MultiTexGen(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static void MultiTexImage1D<T8>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T8 pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static void MultiTexImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static void MultiTexImage3D<T10>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T10 pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static unsafe void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static unsafe void MultiTexParameterI(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static unsafe void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameteriEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static unsafe void MultiTexParameter(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="renderbuffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static void MultiTexRenderbuffer(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static void MultiTexSubImage1D<T7>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static void MultiTexSubImage2D<T9>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texunit">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static void MultiTexSubImage3D<T11>(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T11 pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, int size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, int size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData(uint buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            /// <param name="usage">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static void NamedBufferData<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T2 data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess usage)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, int size, [CountAttribute(Parameter = "size")] IntPtr data, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, uint flags)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.OpenGL.ExtDirectStateAccess flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: size]
            /// </param>
            /// <param name="flags">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferStorageEXT")]
            public static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, uint flags)
                where T2 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData(uint buffer, IntPtr offset, int size, [CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="data">
            /// [length: COMPSIZE(size)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
                where T3 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="readBuffer">
            /// </param>
            /// <param name="writeBuffer">
            /// </param>
            /// <param name="readOffset">
            /// </param>
            /// <param name="writeOffset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedCopyBufferSubDataEXT")]
            public static void NamedCopyBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="readBuffer">
            /// </param>
            /// <param name="writeBuffer">
            /// </param>
            /// <param name="readOffset">
            /// </param>
            /// <param name="writeOffset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedCopyBufferSubDataEXT")]
            public static void NamedCopyBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferParameteriEXT")]
            public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferParameteriEXT")]
            public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferDefaultParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferParameteriEXT")]
            public static void NamedFramebufferParameter(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="renderbuffertarget">
            /// </param>
            /// <param name="renderbuffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static void NamedFramebufferRenderbuffer(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static void NamedFramebufferTexture1D(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static void NamedFramebufferTexture2D(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="textarget">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static void NamedFramebufferTexture3D(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level, int zoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static void NamedFramebufferTexture(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="face">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static void NamedFramebufferTextureFace(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, uint texture, int level, OpenTK.Graphics.OpenGL.TextureTarget face)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="framebuffer">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="layer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static void NamedFramebufferTextureLayer(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, uint texture, int level, int layer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] double[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref double @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static unsafe void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] double* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, float x, float y, float z, float w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static unsafe void NamedProgramLocalParameter4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int x, int y, int z, int w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static unsafe void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="@params">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static unsafe void NamedProgramLocalParameterI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static void NamedProgramLocalParameters4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static void NamedProgramLocalParameters4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static unsafe void NamedProgramLocalParameters4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static unsafe void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="@params">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static unsafe void NamedProgramLocalParametersI4(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess format, int len, [CountAttribute(Parameter = "len")] IntPtr @string)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] T4[] @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] T4[,] @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] T4[,,] @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="len">
            /// </param>
            /// <param name="@string">
            /// [length: len]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static void NamedProgramString<T4>(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess format, int len, [InAttribute, OutAttribute, CountAttribute(Parameter = "len")] ref T4 @string)
                where T4 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static void NamedRenderbufferStorage(uint renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="coverageSamples">
            /// </param>
            /// <param name="colorSamples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static void NamedRenderbufferStorageMultisampleCoverage(uint renderbuffer, int coverageSamples, int colorSamples, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="renderbuffer">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dEXT")]
            public static void ProgramUniform1(uint program, int location, double x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dvEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dvEXT")]
            public static void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform1dvEXT")]
            public static unsafe void ProgramUniform1(uint program, int location, int count, [CountAttribute(Parameter = "count")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dEXT")]
            public static void ProgramUniform2(uint program, int location, double x, double y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dvEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dvEXT")]
            public static void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*2]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform2dvEXT")]
            public static unsafe void ProgramUniform2(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dEXT")]
            public static void ProgramUniform3(uint program, int location, double x, double y, double z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dvEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dvEXT")]
            public static void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*3]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform3dvEXT")]
            public static unsafe void ProgramUniform3(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="x">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="y">
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </param>
            /// <param name="z">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="w">
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dEXT")]
            public static void ProgramUniform4(uint program, int location, double x, double y, double z, double w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dvEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dvEXT")]
            public static void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location">
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count">
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniform4dvEXT")]
            public static unsafe void ProgramUniform4(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2dvEXT")]
            public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2dvEXT")]
            public static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*4]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2dvEXT")]
            public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
            public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
            public static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
            public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
            public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
            public static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
            public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3dvEXT")]
            public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3dvEXT")]
            public static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*9]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3dvEXT")]
            public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
            public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
            public static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*6]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
            public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
            public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
            public static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
            public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4dvEXT")]
            public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4dvEXT")]
            public static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*16]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4dvEXT")]
            public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
            public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
            public static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*8]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
            public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
            public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double[] value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
            public static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] ref double value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="program">
            /// </param>
            /// <param name="location">
            /// </param>
            /// <param name="count">
            /// </param>
            /// <param name="transpose">
            /// </param>
            /// <param name="value">
            /// [length: count*12]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
            public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="mask">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glPushClientAttribDefaultEXT")]
            public static void PushClientAttribDefault(OpenTK.Graphics.OpenGL.ClientAttribMask mask)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static void TextureBuffer(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static void TextureBuffer(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, uint buffer, IntPtr offset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, uint buffer, IntPtr offset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, uint buffer, IntPtr offset, int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureBufferRangeEXT")]
            public static void TextureBufferRange(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T8[,,] pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static void TextureImage1D<T8>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T8 pixels)
                where T8 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static void TextureImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,,] pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="border">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static void TextureImage3D<T10>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T10 pixels)
                where T10 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="commit">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTexturePageCommitmentEXT")]
            public static void TexturePageCommitment(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static unsafe void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref uint @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static unsafe void TextureParameterI(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, float param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static unsafe void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static unsafe void TextureParameter(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="renderbuffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static void TextureRenderbuffer(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            public static void TextureStorage1D(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            public static void TextureStorage2D(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DMultisampleEXT")]
            public static void TextureStorage2DMultisample(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int samples, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width, int height, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage2DMultisampleEXT")]
            public static void TextureStorage2DMultisample(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int samples, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width, int height, int depth)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="levels">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            public static void TextureStorage3D(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height, int depth)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [Obsolete("Use strongly typed overload instead")]
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DMultisampleEXT")]
            public static void TextureStorage3DMultisample(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int samples, OpenTK.Graphics.OpenGL.ExtDirectStateAccess internalformat, int width, int height, int depth, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="samples">
            /// </param>
            /// <param name="internalformat">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="fixedsamplelocations">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureStorage3DMultisampleEXT")]
            public static void TextureStorage3DMultisample(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int samples, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static void TextureSubImage1D<T7>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
                where T7 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T9[,,] pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static void TextureSubImage2D<T9>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T9 pixels)
                where T9 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T11[,,] pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="xoffset">
            /// </param>
            /// <param name="yoffset">
            /// </param>
            /// <param name="zoffset">
            /// </param>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="depth">
            /// </param>
            /// <param name="format">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="pixels">
            /// [length: COMPSIZE(format,type,width,height,depth)]
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static void TextureSubImage3D<T11>(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T11 pixels)
                where T11 : struct
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="buffer">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glUnmapNamedBufferEXT")]
            public static bool UnmapNamedBuffer(uint buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="bindingindex">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="offset">
            /// </param>
            /// <param name="stride">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayBindVertexBufferEXT")]
            public static void VertexArrayBindVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayColorOffsetEXT")]
            public static void VertexArrayColorOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayEdgeFlagOffsetEXT")]
            public static void VertexArrayEdgeFlagOffset(uint vaobj, uint buffer, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayFogCoordOffsetEXT")]
            public static void VertexArrayFogCoordOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.FogPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayIndexOffsetEXT")]
            public static void VertexArrayIndexOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="texunit">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayMultiTexCoordOffsetEXT")]
            public static void VertexArrayMultiTexCoordOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayNormalOffsetEXT")]
            public static void VertexArrayNormalOffset(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArraySecondaryColorOffsetEXT")]
            public static void VertexArraySecondaryColorOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayTexCoordOffsetEXT")]
            public static void VertexArrayTexCoordOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="bindingindex">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribBindingEXT")]
            public static void VertexArrayVertexAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="divisor">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribDivisorEXT")]
            public static void VertexArrayVertexAttribDivisor(uint vaobj, uint index, uint divisor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="normalized">
            /// </param>
            /// <param name="relativeoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribFormatEXT")]
            public static void VertexArrayVertexAttribFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, bool normalized, uint relativeoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="relativeoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribIFormatEXT")]
            public static void VertexArrayVertexAttribIFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, uint relativeoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribIOffsetEXT")]
            public static void VertexArrayVertexAttribIOffset(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribEnum type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="attribindex">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="relativeoffset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribLFormatEXT")]
            public static void VertexArrayVertexAttribLFormat(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, uint relativeoffset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribLOffsetEXT")]
            public static void VertexArrayVertexAttribLOffset(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="index">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="normalized">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexAttribOffsetEXT")]
            public static void VertexArrayVertexAttribOffset(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="bindingindex">
            /// </param>
            /// <param name="divisor">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexBindingDivisorEXT")]
            public static void VertexArrayVertexBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: EXT_direct_state_access]
            /// </summary>
            /// <param name="vaobj">
            /// </param>
            /// <param name="buffer">
            /// </param>
            /// <param name="size">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="offset">
            /// </param>
            [AutoGenerated(Category = "EXT_direct_state_access", Version = "", EntryPoint = "glVertexArrayVertexOffsetEXT")]
            public static void VertexArrayVertexOffset(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, IntPtr offset)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(68)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindMultiTextureEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, uint texture);

            [Slot(151)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern OpenTK.Graphics.OpenGL.FramebufferStatus glCheckNamedFramebufferStatusEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferTarget target);

            [Slot(174)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glClearNamedBufferDataEXT(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);

            [Slot(176)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glClearNamedBufferSubDataEXT(uint buffer, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data);

            [Slot(187)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glClientAttribDefaultEXT(OpenTK.Graphics.OpenGL.ClientAttribMask mask);

            [Slot(278)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedMultiTexImage1DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(279)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedMultiTexImage2DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(280)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedMultiTexImage3DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(281)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedMultiTexSubImage1DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(282)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedMultiTexSubImage2DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(283)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedMultiTexSubImage3DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(296)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTextureImage1DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(297)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTextureImage2DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(298)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTextureImage3DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(300)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTextureSubImage1DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(302)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTextureSubImage2DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(304)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCompressedTextureSubImage3DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);

            [Slot(332)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyMultiTexImage1DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int border);

            [Slot(333)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyMultiTexImage2DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height, int border);

            [Slot(334)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyMultiTexSubImage1DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int x, int y, int width);

            [Slot(335)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyMultiTexSubImage2DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

            [Slot(336)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyMultiTexSubImage3DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

            [Slot(350)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTextureImage1DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int border);

            [Slot(351)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTextureImage2DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int x, int y, int width, int height, int border);

            [Slot(353)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTextureSubImage1DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int x, int y, int width);

            [Slot(355)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTextureSubImage2DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

            [Slot(357)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glCopyTextureSubImage3DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

            [Slot(461)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableClientStateIndexedEXT(OpenTK.Graphics.OpenGL.ArrayCap array, uint index);

            [Slot(460)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableClientStateiEXT(OpenTK.Graphics.OpenGL.ArrayCap array, uint index);

            [Slot(466)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableVertexArrayAttribEXT(uint vaobj, uint index);

            [Slot(467)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDisableVertexArrayEXT(uint vaobj, OpenTK.Graphics.OpenGL.EnableCap array);

            [Slot(525)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableClientStateIndexedEXT(OpenTK.Graphics.OpenGL.ArrayCap array, uint index);

            [Slot(524)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableClientStateiEXT(OpenTK.Graphics.OpenGL.ArrayCap array, uint index);

            [Slot(530)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableVertexArrayAttribEXT(uint vaobj, uint index);

            [Slot(531)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEnableVertexArrayEXT(uint vaobj, OpenTK.Graphics.OpenGL.EnableCap array);

            [Slot(586)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFlushMappedNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length);

            [Slot(627)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferDrawBufferEXT(uint framebuffer, OpenTK.Graphics.OpenGL.DrawBufferMode mode);

            [Slot(628)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glFramebufferDrawBuffersEXT(uint framebuffer, int n, [CountAttribute(Parameter = "n")] OpenTK.Graphics.OpenGL.DrawBufferMode* bufs);

            [Slot(630)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferReadBufferEXT(uint framebuffer, OpenTK.Graphics.OpenGL.ReadBufferMode mode);

            [Slot(663)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGenerateMultiTexMipmapEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target);

            [Slot(665)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGenerateTextureMipmapEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target);

            [Slot(743)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetCompressedMultiTexImageEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img);

            [Slot(747)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetCompressedTextureImageEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img);

            [Slot(764)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetDoubleIndexedvEXT(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] double* data);

            [Slot(763)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetDoublei_vEXT(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] double* @params);

            [Slot(774)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFloatIndexedvEXT(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Computed = "target")] float* data);

            [Slot(773)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFloati_vEXT(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(788)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFramebufferParameterivEXT(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(850)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexEnvfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(851)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexEnvivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(852)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexGendvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params);

            [Slot(853)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexGenfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(854)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexGenivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(855)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetMultiTexImageEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);

            [Slot(856)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexLevelParameterfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(857)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexLevelParameterivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(859)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexParameterIivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(860)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexParameterIuivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);

            [Slot(858)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexParameterfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(861)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMultiTexParameterivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(864)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedBufferParameterivEXT(uint buffer, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(867)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetNamedBufferPointervEXT(uint buffer, OpenTK.Graphics.OpenGL.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);

            [Slot(869)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetNamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data);

            [Slot(871)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(874)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedFramebufferParameterivEXT(uint framebuffer, OpenTK.Graphics.OpenGL.GetFramebufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(878)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedProgramLocalParameterIivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] int* @params);

            [Slot(879)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedProgramLocalParameterIuivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] uint* @params);

            [Slot(876)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedProgramLocalParameterdvEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] double* @params);

            [Slot(877)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedProgramLocalParameterfvEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [OutAttribute, CountAttribute(Count = 4)] float* @params);

            [Slot(880)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetNamedProgramStringEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess pname, [OutAttribute, CountAttribute(Computed = "program,pname")] IntPtr @string);

            [Slot(875)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedProgramivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ProgramPropertyArb pname, [OutAttribute, CountAttribute(Count = 1)] int* @params);

            [Slot(882)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(971)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetPointerIndexedvEXT(OpenTK.Graphics.OpenGL.TypeEnum target, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr data);

            [Slot(970)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetPointeri_vEXT(OpenTK.Graphics.OpenGL.TypeEnum pname, uint index, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);

            [Slot(1069)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetTextureImageEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);

            [Slot(1071)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTextureLevelParameterfvEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(1073)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTextureLevelParameterivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1077)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTextureParameterIivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1079)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTextureParameterIuivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] uint* @params);

            [Slot(1075)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTextureParameterfvEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

            [Slot(1081)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTextureParameterivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(1121)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] int* param);

            [Slot(1122)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetVertexArrayIntegervEXT(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] int* param);

            [Slot(1124)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute] IntPtr param);

            [Slot(1125)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetVertexArrayPointervEXT(uint vaobj, OpenTK.Graphics.OpenGL.VertexArrayPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr param);

            [Slot(1334)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern IntPtr glMapNamedBufferEXT(uint buffer, OpenTK.Graphics.OpenGL.BufferAccess access);

            [Slot(1336)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern IntPtr glMapNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL.BufferAccessMask access);

            [Slot(1423)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexBufferEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TypeEnum internalformat, uint buffer);

            [Slot(1520)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexCoordPointerEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

            [Slot(1521)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexEnvfEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, float param);

            [Slot(1522)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexEnvfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params);

            [Slot(1523)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexEnviEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, int param);

            [Slot(1524)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexEnvivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(1525)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexGendEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, double param);

            [Slot(1526)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexGendvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double* @params);

            [Slot(1527)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexGenfEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, float param);

            [Slot(1528)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexGenfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params);

            [Slot(1529)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexGeniEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, int param);

            [Slot(1530)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexGenivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(1531)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexImage1DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);

            [Slot(1532)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexImage2DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

            [Slot(1533)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexImage3DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);

            [Slot(1537)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexParameterIivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(1538)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexParameterIuivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params);

            [Slot(1534)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexParameterfEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, float param);

            [Slot(1535)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexParameterfvEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

            [Slot(1536)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexParameteriEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, int param);

            [Slot(1539)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexParameterivEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(1540)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexRenderbufferEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, uint renderbuffer);

            [Slot(1541)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexSubImage1DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);

            [Slot(1542)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexSubImage2DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

            [Slot(1543)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexSubImage3DEXT(OpenTK.Graphics.OpenGL.TextureUnit texunit, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);

            [Slot(1553)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedBufferDataEXT(uint buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageHint usage);

            [Slot(1557)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedBufferStorageEXT(uint buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.OpenGL.BufferStorageFlags flags);

            [Slot(1561)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data);

            [Slot(1562)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);

            [Slot(1566)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferParameteriEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferDefaultParameter pname, int param);

            [Slot(1569)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferRenderbufferEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, uint renderbuffer);

            [Slot(1574)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferTexture1DEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level);

            [Slot(1575)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferTexture2DEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level);

            [Slot(1576)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferTexture3DEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, uint texture, int level, int zoffset);

            [Slot(1577)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferTextureEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, uint texture, int level);

            [Slot(1578)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferTextureFaceEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, uint texture, int level, OpenTK.Graphics.OpenGL.TextureTarget face);

            [Slot(1580)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedFramebufferTextureLayerEXT(uint framebuffer, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, uint texture, int level, int layer);

            [Slot(1581)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedProgramLocalParameter4dEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, double x, double y, double z, double w);

            [Slot(1582)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParameter4dvEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] double* @params);

            [Slot(1583)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedProgramLocalParameter4fEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, float x, float y, float z, float w);

            [Slot(1584)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParameter4fvEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] float* @params);

            [Slot(1585)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedProgramLocalParameterI4iEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int x, int y, int z, int w);

            [Slot(1586)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParameterI4ivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] int* @params);

            [Slot(1587)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedProgramLocalParameterI4uiEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w);

            [Slot(1588)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParameterI4uivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, [CountAttribute(Count = 4)] uint* @params);

            [Slot(1589)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParameters4fvEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] float* @params);

            [Slot(1590)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParametersI4ivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] int* @params);

            [Slot(1591)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNamedProgramLocalParametersI4uivEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, uint index, int count, [CountAttribute(Parameter = "count*4")] uint* @params);

            [Slot(1592)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedProgramStringEXT(uint program, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, OpenTK.Graphics.OpenGL.ExtDirectStateAccess format, int len, [CountAttribute(Parameter = "len")] IntPtr @string);

            [Slot(1594)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedRenderbufferStorageEXT(uint renderbuffer, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, int width, int height);

            [Slot(1596)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height);

            [Slot(1597)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, int width, int height);

            [Slot(1780)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform1dEXT(uint program, int location, double x);

            [Slot(1782)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform1dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count")] double* value);

            [Slot(1804)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform2dEXT(uint program, int location, double x, double y);

            [Slot(1806)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform2dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*2")] double* value);

            [Slot(1828)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform3dEXT(uint program, int location, double x, double y, double z);

            [Slot(1830)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform3dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*3")] double* value);

            [Slot(1852)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);

            [Slot(1854)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniform4dvEXT(uint program, int location, int count, [CountAttribute(Parameter = "count*4")] double* value);

            [Slot(1880)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*4")] double* value);

            [Slot(1884)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);

            [Slot(1888)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);

            [Slot(1892)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*9")] double* value);

            [Slot(1896)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*6")] double* value);

            [Slot(1900)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);

            [Slot(1904)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*16")] double* value);

            [Slot(1908)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*8")] double* value);

            [Slot(1912)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, [CountAttribute(Parameter = "count*12")] double* value);

            [Slot(1922)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPushClientAttribDefaultEXT(OpenTK.Graphics.OpenGL.ClientAttribMask mask);

            [Slot(2306)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureBufferEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, uint buffer);

            [Slot(2308)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureBufferRangeEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size);

            [Slot(2310)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureImage1DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);

            [Slot(2311)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureImage2DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

            [Slot(2314)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureImage3DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);

            [Slot(2320)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);

            [Slot(2328)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTextureParameterIivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(2330)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTextureParameterIuivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] uint* @params);

            [Slot(2322)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureParameterfEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, float param);

            [Slot(2324)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTextureParameterfvEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

            [Slot(2326)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureParameteriEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, int param);

            [Slot(2332)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTextureParameterivEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(2334)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureRenderbufferEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, uint renderbuffer);

            [Slot(2336)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureStorage1DEXT(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width);

            [Slot(2338)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureStorage2DEXT(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height);

            [Slot(2340)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureStorage2DMultisampleEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int samples, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);

            [Slot(2342)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureStorage3DEXT(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int levels, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height, int depth);

            [Slot(2344)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureStorage3DMultisampleEXT(uint texture, OpenTK.Graphics.OpenGL.ExtDirectStateAccess target, int samples, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);

            [Slot(2352)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureSubImage1DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);

            [Slot(2354)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureSubImage2DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

            [Slot(2356)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTextureSubImage3DEXT(uint texture, OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);

            [Slot(2492)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glUnmapNamedBufferEXT(uint buffer);

            [Slot(2572)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride);

            [Slot(2573)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, IntPtr offset);

            [Slot(2574)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, IntPtr offset);

            [Slot(2576)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.FogPointerType type, int stride, IntPtr offset);

            [Slot(2577)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.IndexPointerType type, int stride, IntPtr offset);

            [Slot(2578)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.ExtDirectStateAccess texunit, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, IntPtr offset);

            [Slot(2579)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, OpenTK.Graphics.OpenGL.NormalPointerType type, int stride, IntPtr offset);

            [Slot(2583)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, IntPtr offset);

            [Slot(2584)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, int stride, IntPtr offset);

            [Slot(2585)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);

            [Slot(2586)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);

            [Slot(2587)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, bool normalized, uint relativeoffset);

            [Slot(2588)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, uint relativeoffset);

            [Slot(2589)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribEnum type, int stride, IntPtr offset);

            [Slot(2590)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, uint relativeoffset);

            [Slot(2591)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL.ExtDirectStateAccess type, int stride, IntPtr offset);

            [Slot(2592)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, int stride, IntPtr offset);

            [Slot(2593)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);

            [Slot(2596)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, OpenTK.Graphics.OpenGL.VertexPointerType type, int stride, IntPtr offset);
        }
    }
}
