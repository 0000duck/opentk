//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static void GetPixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static void GetPixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] out int values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        public static unsafe void GetPixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static void PixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [CountAttribute(Parameter = "size")] int[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static void PixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [CountAttribute(Parameter = "size")] ref int values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// </summary>
        /// <param name="map">
        /// </param>
        /// <param name="size">
        /// </param>
        /// <param name="values">
        /// [length: size]
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        public static unsafe void PixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [CountAttribute(Parameter = "size")] int* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelStorex")]
        public static void PixelStorex(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(965)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPixelMapxv(OpenTK.Graphics.OpenGL.PixelMap map, int size, [OutAttribute, CountAttribute(Parameter = "size")] int* values);

        [Slot(1675)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPixelMapx(OpenTK.Graphics.OpenGL.PixelMap map, int size, [CountAttribute(Parameter = "size")] int* values);

        [Slot(1678)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorex(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, int param);
    }
}
