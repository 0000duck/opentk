//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v1.3]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glClientActiveTexture")]
        public static void ClientActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,,] data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T10 data)
            where T10 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[] img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,] img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,,] img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">
        /// [length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] ref T2 img)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] double[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] ref double m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] float[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] ref float m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] double[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] ref double m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] float[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] ref float m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, double s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, float s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, int s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, short s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, double s, double t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, float s, float t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, int s, int t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, short s, short t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, double s, double t, double r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, float s, float t, float r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, int s, int t, int r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, short s, short t, short r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, double s, double t, double r, double q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, float s, float t, float r, float q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, int s, int t, int r, int q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, short s, short t, short r, short q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] short* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.3]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(float value, bool invert)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(7)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture);

        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClientActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture);

        [Slot(284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int width, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, OpenTK.Graphics.OpenGL.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(744)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetCompressedTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, int level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img);

        [Slot(1298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadTransposeMatrixd([CountAttribute(Count = 16)] double* m);

        [Slot(1300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadTransposeMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(1547)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultTransposeMatrixd([CountAttribute(Count = 16)] double* m);

        [Slot(1549)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultTransposeMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(1426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord1d(OpenTK.Graphics.OpenGL.TextureUnit target, double s);

        [Slot(1428)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord1dv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] double* v);

        [Slot(1430)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord1f(OpenTK.Graphics.OpenGL.TextureUnit target, float s);

        [Slot(1432)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord1fv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] float* v);

        [Slot(1436)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord1i(OpenTK.Graphics.OpenGL.TextureUnit target, int s);

        [Slot(1438)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord1iv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] int* v);

        [Slot(1440)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord1s(OpenTK.Graphics.OpenGL.TextureUnit target, short s);

        [Slot(1442)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord1sv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] short* v);

        [Slot(1448)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord2d(OpenTK.Graphics.OpenGL.TextureUnit target, double s, double t);

        [Slot(1450)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord2dv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] double* v);

        [Slot(1452)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord2f(OpenTK.Graphics.OpenGL.TextureUnit target, float s, float t);

        [Slot(1454)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord2fv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] float* v);

        [Slot(1458)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord2i(OpenTK.Graphics.OpenGL.TextureUnit target, int s, int t);

        [Slot(1460)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord2iv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] int* v);

        [Slot(1462)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord2s(OpenTK.Graphics.OpenGL.TextureUnit target, short s, short t);

        [Slot(1464)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord2sv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] short* v);

        [Slot(1470)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord3d(OpenTK.Graphics.OpenGL.TextureUnit target, double s, double t, double r);

        [Slot(1472)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord3dv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] double* v);

        [Slot(1474)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord3f(OpenTK.Graphics.OpenGL.TextureUnit target, float s, float t, float r);

        [Slot(1476)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord3fv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] float* v);

        [Slot(1480)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord3i(OpenTK.Graphics.OpenGL.TextureUnit target, int s, int t, int r);

        [Slot(1482)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord3iv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] int* v);

        [Slot(1484)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord3s(OpenTK.Graphics.OpenGL.TextureUnit target, short s, short t, short r);

        [Slot(1486)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord3sv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] short* v);

        [Slot(1492)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4d(OpenTK.Graphics.OpenGL.TextureUnit target, double s, double t, double r, double q);

        [Slot(1494)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord4dv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] double* v);

        [Slot(1496)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4f(OpenTK.Graphics.OpenGL.TextureUnit target, float s, float t, float r, float q);

        [Slot(1498)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord4fv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] float* v);

        [Slot(1502)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4i(OpenTK.Graphics.OpenGL.TextureUnit target, int s, int t, int r, int q);

        [Slot(1504)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord4iv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] int* v);

        [Slot(1506)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4s(OpenTK.Graphics.OpenGL.TextureUnit target, short s, short t, short r, short q);

        [Slot(1508)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiTexCoord4sv(OpenTK.Graphics.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] short* v);

        [Slot(2025)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoverage(float value, bool invert);
    }
}
