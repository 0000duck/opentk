//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Operate on the accumulation buffer
        /// </summary>
        /// <param name="op">
        /// Specifies the accumulation buffer operation. Symbolic constants Accum, Load, Add, Mult, and Return are accepted.
        /// </param>
        /// <param name="value">
        /// Specifies a floating-point value used in the accumulation buffer operation. op determines how value is used.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glAccum")]
        public static void Accum(OpenTK.Graphics.OpenGL.AccumOp op, float value)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func">
        /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static void AlphaFunc(OpenTK.Graphics.OpenGL.AlphaFunction func, float @ref)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Delimit the vertices of a primitive or a group of like primitives
        /// </summary>
        /// <param name="mode">
        /// Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: Points, Lines, LineStrip, LineLoop, Triangles, TriangleStrip, TriangleFan, Quads, QuadStrip, and Polygon.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBegin")]
        public static void Begin(OpenTK.Graphics.OpenGL.PrimitiveType mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="height">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="xorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="yorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="xmove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="ymove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="bitmap">
        /// [length: COMPSIZE(width,height)]
        /// Specifies the address of the bitmap image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBitmap")]
        public static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, [CountAttribute(Computed = "width,height")] Byte[] bitmap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="height">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="xorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="yorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="xmove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="ymove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="bitmap">
        /// [length: COMPSIZE(width,height)]
        /// Specifies the address of the bitmap image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBitmap")]
        public static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, [CountAttribute(Computed = "width,height")] ref Byte bitmap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="height">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="xorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="yorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="xmove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="ymove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="bitmap">
        /// [length: COMPSIZE(width,height)]
        /// Specifies the address of the bitmap image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBitmap")]
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.OpenGL.BlendingFactor sfactor, OpenTK.Graphics.OpenGL.BlendingFactor dfactor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Execute a display list
        /// </summary>
        /// <param name="list">
        /// Specifies the integer name of the display list to be executed.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallList")]
        public static void CallList(uint list)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">
        /// [length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists(int n, OpenTK.Graphics.OpenGL.ListNameType type, [CountAttribute(Computed = "n,type")] IntPtr lists)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">
        /// [length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists<T2>(int n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] T2[] lists)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">
        /// [length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists<T2>(int n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] T2[,] lists)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">
        /// [length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists<T2>(int n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] T2[,,] lists)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">
        /// [length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists<T2>(int n, OpenTK.Graphics.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] ref T2 lists)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.OpenGL.ClearBufferMask mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify clear values for the accumulation buffer
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearAccum")]
        public static void ClearAccum(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static void ClearColor(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearDepth")]
        public static void ClearDepth(double depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the clear value for the color index buffers
        /// </summary>
        /// <param name="c">
        /// Specifies the index used when the color index buffers are cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearIndex")]
        public static void ClearIndex(float c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(int s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClipPlane")]
        public static void ClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] double[] equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClipPlane")]
        public static void ClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] ref double equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClipPlane")]
        public static unsafe void ClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] double* equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3b")]
        public static void Color3(SByte red, SByte green, SByte blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3bv")]
        public static void Color3([CountAttribute(Count = 3)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3bv")]
        public static void Color3([CountAttribute(Count = 3)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3d")]
        public static void Color3(double red, double green, double blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3dv")]
        public static void Color3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3dv")]
        public static void Color3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3f")]
        public static void Color3(float red, float green, float blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3fv")]
        public static void Color3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3fv")]
        public static void Color3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3i")]
        public static void Color3(int red, int green, int blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3iv")]
        public static void Color3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3iv")]
        public static void Color3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3s")]
        public static void Color3(short red, short green, short blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3sv")]
        public static void Color3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3sv")]
        public static void Color3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ub")]
        public static void Color3(Byte red, Byte green, Byte blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static void Color3([CountAttribute(Count = 3)] Byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static void Color3([CountAttribute(Count = 3)] ref Byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ui")]
        public static void Color3(uint red, uint green, uint blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static void Color3([CountAttribute(Count = 3)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static void Color3([CountAttribute(Count = 3)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3us")]
        public static void Color3(ushort red, ushort green, ushort blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3usv")]
        public static void Color3([CountAttribute(Count = 3)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3usv")]
        public static void Color3([CountAttribute(Count = 3)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4b")]
        public static void Color4(SByte red, SByte green, SByte blue, SByte alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4bv")]
        public static void Color4([CountAttribute(Count = 4)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4bv")]
        public static void Color4([CountAttribute(Count = 4)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4d")]
        public static void Color4(double red, double green, double blue, double alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4dv")]
        public static void Color4([CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4dv")]
        public static void Color4([CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4f")]
        public static void Color4(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4fv")]
        public static void Color4([CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4fv")]
        public static void Color4([CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4i")]
        public static void Color4(int red, int green, int blue, int alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4iv")]
        public static void Color4([CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4iv")]
        public static void Color4([CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4s")]
        public static void Color4(short red, short green, short blue, short alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4sv")]
        public static void Color4([CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4sv")]
        public static void Color4([CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ub")]
        public static void Color4(Byte red, Byte green, Byte blue, Byte alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static void Color4([CountAttribute(Count = 4)] Byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static void Color4([CountAttribute(Count = 4)] ref Byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ui")]
        public static void Color4(uint red, uint green, uint blue, uint alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static void Color4([CountAttribute(Count = 4)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static void Color4([CountAttribute(Count = 4)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4us")]
        public static void Color4(ushort red, ushort green, ushort blue, ushort alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4usv")]
        public static void Color4([CountAttribute(Count = 4)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4usv")]
        public static void Color4([CountAttribute(Count = 4)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Cause a material color to track the current color
        /// </summary>
        /// <param name="face">
        /// Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are Front, Back, and FrontAndBack. The initial value is FrontAndBack.
        /// </param>
        /// <param name="mode">
        /// Specifies which of several material parameters track the current color. Accepted values are Emission, Ambient, Diffuse, Specular, and AmbientAndDiffuse. The initial value is AmbientAndDiffuse.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMaterial")]
        public static void ColorMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.ColorMaterialParameter mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Copy pixels in the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.
        /// </param>
        /// <param name="type">
        /// Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants Color, Depth, and Stencil are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCopyPixels")]
        public static void CopyPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelCopyType type)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.OpenGL.CullFaceMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Delete a contiguous group of display lists
        /// </summary>
        /// <param name="list">
        /// Specifies the integer name of the first display list to delete.
        /// </param>
        /// <param name="range">
        /// Specifies the number of display lists to delete.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDeleteLists")]
        public static void DeleteLists(uint list, int range)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.OpenGL.DepthFunction func)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="near">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="far">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthRange")]
        public static void DepthRange(double near, double far)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="cap">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.OpenGL.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify which color buffers are to be drawn into
        /// </summary>
        /// <param name="buf">
        /// Specifies up to four color buffers to be drawn into. Symbolic constants None, FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and FrontAndBack are accepted. The initial value is Front for single-buffered contexts, and Back for double-buffered contexts.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static void DrawBuffer(OpenTK.Graphics.OpenGL.DrawBufferMode buf)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels(int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels<T4>(int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T4[] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels<T4>(int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T4[,] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels<T4>(int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T4[,,] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels<T4>(int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T4 pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Flag edges as either boundary or nonboundary
        /// </summary>
        /// <param name="flag">
        /// Specifies the current edge flag value, either True or False. The initial value is True.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEdgeFlag")]
        public static void EdgeFlag(bool flag)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Flag edges as either boundary or nonboundary
        /// </summary>
        /// <param name="flag">
        /// [length: 1]
        /// Specifies the current edge flag value, either True or False. The initial value is True.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        public static void EdgeFlag([CountAttribute(Count = 1)] ref bool flag)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.OpenGL.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnd")]
        public static void End()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEndList")]
        public static void EndList()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1d")]
        public static void EvalCoord1(double u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// [length: 1]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
        public static void EvalCoord1([CountAttribute(Count = 1)] ref double u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1f")]
        public static void EvalCoord1(float u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// [length: 1]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
        public static void EvalCoord1([CountAttribute(Count = 1)] ref float u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        /// <param name="v">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2d")]
        public static void EvalCoord2(double u, double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// [length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static void EvalCoord2([CountAttribute(Count = 2)] double[] u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// [length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static void EvalCoord2([CountAttribute(Count = 2)] ref double u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        /// <param name="v">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2f")]
        public static void EvalCoord2(float u, float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// [length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static void EvalCoord2([CountAttribute(Count = 2)] float[] u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// [length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static void EvalCoord2([CountAttribute(Count = 2)] ref float u)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Compute a one- or two-dimensional grid of points or lines
        /// </summary>
        /// <param name="mode">
        /// In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants Point and Line are accepted.
        /// </param>
        /// <param name="i1">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        /// <param name="i2">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalMesh1")]
        public static void EvalMesh1(OpenTK.Graphics.OpenGL.MeshMode1 mode, int i1, int i2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Compute a one- or two-dimensional grid of points or lines
        /// </summary>
        /// <param name="mode">
        /// In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants Point and Line are accepted.
        /// </param>
        /// <param name="i1">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        /// <param name="i2">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        /// <param name="j1"></param>
        /// <param name="j2"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalMesh2")]
        public static void EvalMesh2(OpenTK.Graphics.OpenGL.MeshMode2 mode, int i1, int i2, int j1, int j2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Generate and evaluate a single point in a mesh
        /// </summary>
        /// <param name="i">
        /// Specifies the integer value for grid domain variable .
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalPoint1")]
        public static void EvalPoint1(int i)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Generate and evaluate a single point in a mesh
        /// </summary>
        /// <param name="i">
        /// Specifies the integer value for grid domain variable .
        /// </param>
        /// <param name="j">
        /// Specifies the integer value for grid domain variable  (glEvalPoint2 only).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalPoint2")]
        public static void EvalPoint2(int i, int j)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// Specifies the maximum number of values that can be written into buffer.
        /// </param>
        /// <param name="type">
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.
        /// </param>
        /// <param name="buffer">
        /// [length: size]
        /// Returns the feedback data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static void FeedbackBuffer(int size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] float[] buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// Specifies the maximum number of values that can be written into buffer.
        /// </param>
        /// <param name="type">
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.
        /// </param>
        /// <param name="buffer">
        /// [length: size]
        /// Returns the feedback data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static void FeedbackBuffer(int size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] out float buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// Specifies the maximum number of values that can be written into buffer.
        /// </param>
        /// <param name="type">
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.
        /// </param>
        /// <param name="buffer">
        /// [length: size]
        /// Returns the feedback data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static unsafe void FeedbackBuffer(int size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] float* buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static void Finish()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static void Flush()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogf")]
        public static void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static unsafe void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogi")]
        public static void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogiv")]
        public static void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogiv")]
        public static void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogiv")]
        public static unsafe void Fog(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.OpenGL.FrontFaceDirection mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a perspective matrix
        /// </summary>
        /// <param name="left">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="right">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="top">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="zNear">
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        /// <param name="zFar">
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrustum")]
        public static void Frustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Generate a contiguous set of empty display lists
        /// </summary>
        /// <param name="range">
        /// Specifies the number of contiguous empty display lists to be generated.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGenLists")]
        public static uint GenLists(int range)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static bool GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static unsafe void GetBoolean(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static void GetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] double[] equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static void GetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out double equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static unsafe void GetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] double* equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static double GetDouble(OpenTK.Graphics.OpenGL.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static void GetDouble(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] double[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static void GetDouble(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out double data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static unsafe void GetDouble(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] double* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.OpenGL.ErrorCode GetError()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static float GetFloat(OpenTK.Graphics.OpenGL.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static unsafe void GetFloat(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static int GetInteger(OpenTK.Graphics.OpenGL.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static unsafe void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static unsafe void GetLight(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] out double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static unsafe void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] double* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] out float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static unsafe void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] float* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] out int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">
        /// [length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static unsafe void GetMap(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] int* v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static unsafe void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static unsafe void GetMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static float GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] float[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out float values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] float* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] uint[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out uint values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] uint* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] ushort[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out ushort values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">
        /// [length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static unsafe void GetPixelMap(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] ushort* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="mask">
        /// [length: COMPSIZE()]
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static void GetPolygonStipple([OutAttribute, CountAttribute(Computed = "")] Byte[] mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="mask">
        /// [length: COMPSIZE()]
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static void GetPolygonStipple([OutAttribute, CountAttribute(Computed = "")] out Byte mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.OpenGL.StringName name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out double @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static unsafe void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static unsafe void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static unsafe void GetTexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[,] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[,,] pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T4 pixels)
            where T4 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. LineSmoothHint, PolygonSmoothHint, TextureCompressionHint, and FragmentShaderDerivativeHint are accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.OpenGL.HintTarget target, OpenTK.Graphics.OpenGL.HintMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the writing of individual bits in the color index buffers
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexMask")]
        public static void IndexMask(uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexd")]
        public static void Index(double c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// [length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexdv")]
        public static void Index([CountAttribute(Count = 1)] ref double c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexf")]
        public static void Index(float c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// [length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexfv")]
        public static void Index([CountAttribute(Count = 1)] ref float c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexi")]
        public static void Index(int c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// [length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexiv")]
        public static void Index([CountAttribute(Count = 1)] ref int c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexs")]
        public static void Index(short c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// [length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexsv")]
        public static void Index([CountAttribute(Count = 1)] ref short c)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Initialize the name stack
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glInitNames")]
        public static void InitNames()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.OpenGL.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Determine if a name corresponds to a display list
        /// </summary>
        /// <param name="list">
        /// Specifies a potential display list name.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsList")]
        public static bool IsList(uint list)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelf")]
        public static void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static unsafe void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeli")]
        public static void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static unsafe void LightModel(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightf")]
        public static void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static unsafe void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLighti")]
        public static void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightiv")]
        public static void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightiv")]
        public static void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightiv")]
        public static unsafe void Light(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the line stipple pattern
        /// </summary>
        /// <param name="factor">
        /// Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
        /// </param>
        /// <param name="pattern">
        /// Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineStipple")]
        public static void LineStipple(int factor, ushort pattern)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(float width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the display-list base for glCallLists
        /// </summary>
        /// <param name="@base">
        /// Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glListBase")]
        public static void ListBase(uint @base)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the identity matrix
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadIdentity")]
        public static void LoadIdentity()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static void LoadMatrix([CountAttribute(Count = 16)] double[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static void LoadMatrix([CountAttribute(Count = 16)] ref double m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static void LoadMatrix([CountAttribute(Count = 16)] float[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static void LoadMatrix([CountAttribute(Count = 16)] ref float m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Load a name onto the name stack
        /// </summary>
        /// <param name="name">
        /// Specifies a name that will replace the top value on the name stack.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadName")]
        public static void LoadName(uint name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode">
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static void LogicOp(OpenTK.Graphics.OpenGL.LogicOp opcode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1d")]
        public static void Map1(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] double[] points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1d")]
        public static void Map1(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] ref double points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1d")]
        public static unsafe void Map1(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] double* points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1f")]
        public static void Map1(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] float[] points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1f")]
        public static void Map1(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] ref float points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1f")]
        public static unsafe void Map1(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] float* points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2d")]
        public static void Map2(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] double[] points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2d")]
        public static void Map2(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] ref double points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2d")]
        public static unsafe void Map2(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] double* points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2f")]
        public static void Map2(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] float[] points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2f")]
        public static void Map2(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] ref float points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">
        /// [length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2f")]
        public static unsafe void Map2(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] float* points)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid1d")]
        public static void MapGrid1(int un, double u1, double u2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid1f")]
        public static void MapGrid1(int un, float u1, float u2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="vn">
        /// Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
        /// </param>
        /// <param name="v1">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        /// <param name="v2">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid2d")]
        public static void MapGrid2(int un, double u1, double u2, int vn, double v1, double v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="vn">
        /// Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
        /// </param>
        /// <param name="v1">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        /// <param name="v2">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid2f")]
        public static void MapGrid2(int un, float u1, float u2, int vn, float v1, float v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialf")]
        public static void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static unsafe void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMateriali")]
        public static void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static unsafe void Material(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode">
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static void MatrixMode(OpenTK.Graphics.OpenGL.MatrixMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static void MultMatrix([CountAttribute(Count = 16)] double[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static void MultMatrix([CountAttribute(Count = 16)] ref double m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static void MultMatrix([CountAttribute(Count = 16)] float[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static void MultMatrix([CountAttribute(Count = 16)] ref float m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Create or replace a display list
        /// </summary>
        /// <param name="list">
        /// Specifies the display-list name.
        /// </param>
        /// <param name="mode">
        /// Specifies the compilation mode, which can be Compile or CompileAndExecute.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNewList")]
        public static void NewList(uint list, OpenTK.Graphics.OpenGL.ListMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3b")]
        public static void Normal3(SByte nx, SByte ny, SByte nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static void Normal3([CountAttribute(Count = 3)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static void Normal3([CountAttribute(Count = 3)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3d")]
        public static void Normal3(double nx, double ny, double nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static void Normal3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static void Normal3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3f")]
        public static void Normal3(float nx, float ny, float nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static void Normal3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static void Normal3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3i")]
        public static void Normal3(int nx, int ny, int nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static void Normal3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static void Normal3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3s")]
        public static void Normal3(short nx, short ny, short nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static void Normal3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static void Normal3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with an orthographic matrix
        /// </summary>
        /// <param name="left">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="right">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="top">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="zNear">
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        /// <param name="zFar">
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glOrtho")]
        public static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Place a marker in the feedback buffer
        /// </summary>
        /// <param name="token">
        /// Specifies a marker value to be placed in the feedback buffer following a PassThroughToken.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPassThrough")]
        public static void PassThrough(float token)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] float[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] ref float values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] float* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] uint[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] ref uint values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] uint* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] ushort[] values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] ref ushort values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">
        /// [length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static unsafe void PixelMap(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] ushort* values)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static void PixelStore(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set pixel transfer modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: MapColor, MapStencil, IndexShift, IndexOffset, RedScale, RedBias, GreenScale, GreenBias, BlueScale, BlueBias, AlphaScale, AlphaBias, DepthScale, or DepthBias.  Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: PostColorMatrixRedScale, PostColorMatrixGreenScale, PostColorMatrixBlueScale, PostColorMatrixAlphaScale, PostColorMatrixRedBias, PostColorMatrixGreenBias, PostColorMatrixBlueBias, PostColorMatrixAlphaBias, PostConvolutionRedScale, PostConvolutionGreenScale, PostConvolutionBlueScale, PostConvolutionAlphaScale, PostConvolutionRedBias, PostConvolutionGreenBias, PostConvolutionBlueBias, and PostConvolutionAlphaBias.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelTransferf")]
        public static void PixelTransfer(OpenTK.Graphics.OpenGL.PixelTransferParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set pixel transfer modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: MapColor, MapStencil, IndexShift, IndexOffset, RedScale, RedBias, GreenScale, GreenBias, BlueScale, BlueBias, AlphaScale, AlphaBias, DepthScale, or DepthBias.  Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: PostColorMatrixRedScale, PostColorMatrixGreenScale, PostColorMatrixBlueScale, PostColorMatrixAlphaScale, PostColorMatrixRedBias, PostColorMatrixGreenBias, PostColorMatrixBlueBias, PostColorMatrixAlphaBias, PostConvolutionRedScale, PostConvolutionGreenScale, PostConvolutionBlueScale, PostConvolutionAlphaScale, PostConvolutionRedBias, PostConvolutionGreenBias, PostConvolutionBlueBias, and PostConvolutionAlphaBias.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelTransferi")]
        public static void PixelTransfer(OpenTK.Graphics.OpenGL.PixelTransferParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the pixel zoom factors
        /// </summary>
        /// <param name="xfactor">
        /// Specify the  and  zoom factors for pixel write operations.
        /// </param>
        /// <param name="yfactor">
        /// Specify the  and  zoom factors for pixel write operations.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelZoom")]
        public static void PixelZoom(float xfactor, float yfactor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size">
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static void PointSize(float size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Select a polygon rasterization mode
        /// </summary>
        /// <param name="face">
        /// Specifies the polygons that mode applies to. Must be FrontAndBack for front- and back-facing polygons.
        /// </param>
        /// <param name="mode">
        /// Specifies how polygons will be rasterized. Accepted values are Point, Line, and Fill. The initial value is Fill for both front- and back-facing polygons.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static void PolygonMode(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.PolygonMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="mask">
        /// [length: COMPSIZE()]
        /// Specifies a pointer to a 32  times  32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static void PolygonStipple([CountAttribute(Computed = "")] Byte[] mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="mask">
        /// [length: COMPSIZE()]
        /// Specifies a pointer to a 32  times  32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static void PolygonStipple([CountAttribute(Computed = "")] ref Byte mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPopAttrib")]
        public static void PopAttrib()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPopMatrix")]
        public static void PopMatrix()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPopName")]
        public static void PopName()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Push and pop the server attribute stack
        /// </summary>
        /// <param name="mask">
        /// Specifies a mask that indicates which attributes to save. Values for mask are listed below.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushAttrib")]
        public static void PushAttrib(OpenTK.Graphics.OpenGL.AttribMask mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Push and pop the current matrix stack
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushMatrix")]
        public static void PushMatrix()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Push and pop the name stack
        /// </summary>
        /// <param name="name">
        /// Specifies a name that will be pushed onto the name stack.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushName")]
        public static void PushName(uint name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2d")]
        public static void RasterPos2(double x, double y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static void RasterPos2([CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static void RasterPos2([CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2f")]
        public static void RasterPos2(float x, float y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static void RasterPos2([CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static void RasterPos2([CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2i")]
        public static void RasterPos2(int x, int y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static void RasterPos2([CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static void RasterPos2([CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2s")]
        public static void RasterPos2(short x, short y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static void RasterPos2([CountAttribute(Count = 2)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static void RasterPos2([CountAttribute(Count = 2)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3d")]
        public static void RasterPos3(double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static void RasterPos3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static void RasterPos3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3f")]
        public static void RasterPos3(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static void RasterPos3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static void RasterPos3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3i")]
        public static void RasterPos3(int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static void RasterPos3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static void RasterPos3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3s")]
        public static void RasterPos3(short x, short y, short z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static void RasterPos3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static void RasterPos3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4d")]
        public static void RasterPos4(double x, double y, double z, double w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static void RasterPos4([CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static void RasterPos4([CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4f")]
        public static void RasterPos4(float x, float y, float z, float w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static void RasterPos4([CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static void RasterPos4([CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4i")]
        public static void RasterPos4(int x, int y, int z, int w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static void RasterPos4([CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static void RasterPos4([CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4s")]
        public static void RasterPos4(short x, short y, short z, short w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static void RasterPos4([CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static void RasterPos4([CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="src">
        /// Specifies a color buffer. Accepted values are FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and the constants ColorAttachmenti.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenTK.Graphics.OpenGL.ReadBufferMode src)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="x1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="y1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="x2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        /// <param name="y2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectd")]
        public static void Rect(double x1, double y1, double x2, double y2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectdv")]
        public static void Rect([CountAttribute(Count = 2)] double[] v1, [CountAttribute(Count = 2)] double[] v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectdv")]
        public static void Rect([CountAttribute(Count = 2)] ref double v1, [CountAttribute(Count = 2)] ref double v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="x1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="y1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="x2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        /// <param name="y2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectf")]
        public static void Rect(float x1, float y1, float x2, float y2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectfv")]
        public static void Rect([CountAttribute(Count = 2)] float[] v1, [CountAttribute(Count = 2)] float[] v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectfv")]
        public static void Rect([CountAttribute(Count = 2)] ref float v1, [CountAttribute(Count = 2)] ref float v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="x1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="y1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="x2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        /// <param name="y2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRecti")]
        public static void Rect(int x1, int y1, int x2, int y2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectiv")]
        public static void Rect([CountAttribute(Count = 2)] int[] v1, [CountAttribute(Count = 2)] int[] v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectiv")]
        public static void Rect([CountAttribute(Count = 2)] ref int v1, [CountAttribute(Count = 2)] ref int v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        /// <param name="x1">
        /// </param>
        /// <param name="y1">
        /// </param>
        /// <param name="x2">
        /// </param>
        /// <param name="y2">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRects")]
        public static void Rects(short x1, short y1, short x2, short y2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectsv")]
        public static void Rect([CountAttribute(Count = 2)] short[] v1, [CountAttribute(Count = 2)] short[] v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">
        /// [length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectsv")]
        public static void Rect([CountAttribute(Count = 2)] ref short v1, [CountAttribute(Count = 2)] ref short v2)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set rasterization mode
        /// </summary>
        /// <param name="mode">
        /// Specifies the rasterization mode. Three values are accepted: Render, Select, and Feedback. The initial value is Render.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRenderMode")]
        public static int RenderMode(OpenTK.Graphics.OpenGL.RenderingMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a rotation matrix
        /// </summary>
        /// <param name="angle">
        /// Specifies the angle of rotation, in degrees.
        /// </param>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRotated")]
        public static void Rotate(double angle, double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a rotation matrix
        /// </summary>
        /// <param name="angle">
        /// Specifies the angle of rotation, in degrees.
        /// </param>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRotatef")]
        public static void Rotate(float angle, float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="y">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="z">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScaled")]
        public static void Scale(double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="y">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="z">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScalef")]
        public static void Scale(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static void Scissor(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">
        /// [length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static void SelectBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] uint[] buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">
        /// [length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static void SelectBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] out uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">
        /// [length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static unsafe void SelectBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] uint* buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode">
        /// Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glShadeModel")]
        public static void ShadeModel(OpenTK.Graphics.OpenGL.ShadingModel mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.OpenGL.StencilFunction func, int @ref, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static void StencilMask(uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.OpenGL.StencilOp fail, OpenTK.Graphics.OpenGL.StencilOp zfail, OpenTK.Graphics.OpenGL.StencilOp zpass)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1d")]
        public static void TexCoord1(double s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1dv")]
        public static void TexCoord1([CountAttribute(Count = 1)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1f")]
        public static void TexCoord1(float s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1fv")]
        public static void TexCoord1([CountAttribute(Count = 1)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1i")]
        public static void TexCoord1(int s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1iv")]
        public static void TexCoord1([CountAttribute(Count = 1)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1s")]
        public static void TexCoord1(short s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1sv")]
        public static void TexCoord1([CountAttribute(Count = 1)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2d")]
        public static void TexCoord2(double s, double t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static void TexCoord2([CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static void TexCoord2([CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2f")]
        public static void TexCoord2(float s, float t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static void TexCoord2([CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static void TexCoord2([CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2i")]
        public static void TexCoord2(int s, int t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static void TexCoord2([CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static void TexCoord2([CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2s")]
        public static void TexCoord2(short s, short t)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static void TexCoord2([CountAttribute(Count = 2)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static void TexCoord2([CountAttribute(Count = 2)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3d")]
        public static void TexCoord3(double s, double t, double r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static void TexCoord3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static void TexCoord3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3f")]
        public static void TexCoord3(float s, float t, float r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static void TexCoord3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static void TexCoord3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3i")]
        public static void TexCoord3(int s, int t, int r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static void TexCoord3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static void TexCoord3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3s")]
        public static void TexCoord3(short s, short t, short r)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static void TexCoord3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static void TexCoord3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4d")]
        public static void TexCoord4(double s, double t, double r, double q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static void TexCoord4([CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static void TexCoord4([CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4f")]
        public static void TexCoord4(float s, float t, float r, float q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static void TexCoord4([CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static void TexCoord4([CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4i")]
        public static void TexCoord4(int s, int t, int r, int q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static void TexCoord4([CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static void TexCoord4([CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4s")]
        public static void TexCoord4(short s, short t, short r, short q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static void TexCoord4([CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static void TexCoord4([CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static unsafe void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static unsafe void TexEnv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// </summary>
        /// <param name="coord">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGend")]
        public static void TexGend(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, double param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGendv")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGendv")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref double @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGendv")]
        public static unsafe void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="param">
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenf")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static unsafe void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="param">
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeni")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static unsafe void TexGen(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static unsafe void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static unsafe void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a translation matrix
        /// </summary>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTranslated")]
        public static void Translate(double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a translation matrix
        /// </summary>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTranslatef")]
        public static void Translate(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2d")]
        public static void Vertex2(double x, double y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static void Vertex2([CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static void Vertex2([CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2f")]
        public static void Vertex2(float x, float y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static void Vertex2([CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static void Vertex2([CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2i")]
        public static void Vertex2(int x, int y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static void Vertex2([CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static void Vertex2([CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2s")]
        public static void Vertex2(short x, short y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static void Vertex2([CountAttribute(Count = 2)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static void Vertex2([CountAttribute(Count = 2)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3d")]
        public static void Vertex3(double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static void Vertex3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static void Vertex3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3f")]
        public static void Vertex3(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static void Vertex3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static void Vertex3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3i")]
        public static void Vertex3(int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static void Vertex3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static void Vertex3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3s")]
        public static void Vertex3(short x, short y, short z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static void Vertex3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static void Vertex3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4d")]
        public static void Vertex4(double x, double y, double z, double w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static void Vertex4([CountAttribute(Count = 4)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static void Vertex4([CountAttribute(Count = 4)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4f")]
        public static void Vertex4(float x, float y, float z, float w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static void Vertex4([CountAttribute(Count = 4)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static void Vertex4([CountAttribute(Count = 4)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4i")]
        public static void Vertex4(int x, int y, int z, int w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static void Vertex4([CountAttribute(Count = 4)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static void Vertex4([CountAttribute(Count = 4)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4s")]
        public static void Vertex4(short x, short y, short z, short w)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static void Vertex4([CountAttribute(Count = 4)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">
        /// [length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static void Vertex4([CountAttribute(Count = 4)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static void Viewport(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(0)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAccum(OpenTK.Graphics.OpenGL.AccumOp op, float value);

        [Slot(13)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFunc(OpenTK.Graphics.OpenGL.AlphaFunction func, float @ref);

        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBegin(OpenTK.Graphics.OpenGL.PrimitiveType mode);

        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap);

        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunc(OpenTK.Graphics.OpenGL.BlendingFactor sfactor, OpenTK.Graphics.OpenGL.BlendingFactor dfactor);

        [Slot(146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCallList(uint list);

        [Slot(147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCallLists(int n, OpenTK.Graphics.OpenGL.ListNameType type, [CountAttribute(Computed = "n,type")] IntPtr lists);

        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClear(OpenTK.Graphics.OpenGL.ClearBufferMask mask);

        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearAccum(float red, float green, float blue, float alpha);

        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColor(float red, float green, float blue, float alpha);

        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepth(double depth);

        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearIndex(float c);

        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearStencil(int s);

        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] double* equation);

        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3b(SByte red, SByte green, SByte blue);

        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3bv([CountAttribute(Count = 3)] SByte* v);

        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3d(double red, double green, double blue);

        [Slot(196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3dv([CountAttribute(Count = 3)] double* v);

        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3f(float red, float green, float blue);

        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3fv([CountAttribute(Count = 3)] float* v);

        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3i(int red, int green, int blue);

        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3iv([CountAttribute(Count = 3)] int* v);

        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3s(short red, short green, short blue);

        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3sv([CountAttribute(Count = 3)] short* v);

        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3ub(Byte red, Byte green, Byte blue);

        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3ubv([CountAttribute(Count = 3)] Byte* v);

        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3ui(uint red, uint green, uint blue);

        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3uiv([CountAttribute(Count = 3)] uint* v);

        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor3us(ushort red, ushort green, ushort blue);

        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor3usv([CountAttribute(Count = 3)] ushort* v);

        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4b(SByte red, SByte green, SByte blue, SByte alpha);

        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4bv([CountAttribute(Count = 4)] SByte* v);

        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4d(double red, double green, double blue, double alpha);

        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4dv([CountAttribute(Count = 4)] double* v);

        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4f(float red, float green, float blue, float alpha);

        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4fv([CountAttribute(Count = 4)] float* v);

        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4i(int red, int green, int blue, int alpha);

        [Slot(226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4iv([CountAttribute(Count = 4)] int* v);

        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4s(short red, short green, short blue, short alpha);

        [Slot(228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4sv([CountAttribute(Count = 4)] short* v);

        [Slot(229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4ub(Byte red, Byte green, Byte blue, Byte alpha);

        [Slot(230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4ubv([CountAttribute(Count = 4)] Byte* v);

        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4ui(uint red, uint green, uint blue, uint alpha);

        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4uiv([CountAttribute(Count = 4)] uint* v);

        [Slot(237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4us(ushort red, ushort green, ushort blue, ushort alpha);

        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glColor4usv([CountAttribute(Count = 4)] ushort* v);

        [Slot(245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMask(bool red, bool green, bool blue, bool alpha);

        [Slot(248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMaterial(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.ColorMaterialParameter mode);

        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelCopyType type);

        [Slot(385)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCullFace(OpenTK.Graphics.OpenGL.CullFaceMode mode);

        [Slot(413)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDeleteLists(uint list, int range);

        [Slot(446)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthFunc(OpenTK.Graphics.OpenGL.DepthFunction func);

        [Slot(447)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthMask(bool flag);

        [Slot(448)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRange(double near, double far);

        [Slot(458)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisable(OpenTK.Graphics.OpenGL.EnableCap cap);

        [Slot(481)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawBuffer(OpenTK.Graphics.OpenGL.DrawBufferMode buf);

        [Slot(501)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawPixels(int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(514)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEdgeFlag(bool flag);

        [Slot(519)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEdgeFlagv([CountAttribute(Count = 1)] bool* flag);

        [Slot(522)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnable(OpenTK.Graphics.OpenGL.EnableCap cap);

        [Slot(535)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnd();

        [Slot(540)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEndList();

        [Slot(552)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalCoord1d(double u);

        [Slot(553)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEvalCoord1dv([CountAttribute(Count = 1)] double* u);

        [Slot(554)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalCoord1f(float u);

        [Slot(555)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEvalCoord1fv([CountAttribute(Count = 1)] float* u);

        [Slot(558)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalCoord2d(double u, double v);

        [Slot(559)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEvalCoord2dv([CountAttribute(Count = 2)] double* u);

        [Slot(560)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalCoord2f(float u, float v);

        [Slot(561)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glEvalCoord2fv([CountAttribute(Count = 2)] float* u);

        [Slot(565)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalMesh1(OpenTK.Graphics.OpenGL.MeshMode1 mode, int i1, int i2);

        [Slot(566)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalMesh2(OpenTK.Graphics.OpenGL.MeshMode2 mode, int i1, int i2, int j1, int j2);

        [Slot(567)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalPoint1(int i);

        [Slot(568)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEvalPoint2(int i, int j);

        [Slot(572)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFeedbackBuffer(int size, OpenTK.Graphics.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] float* buffer);

        [Slot(576)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinish();

        [Slot(582)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlush();

        [Slot(606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogf(OpenTK.Graphics.OpenGL.FogParameter pname, float param);

        [Slot(608)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogfv(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(609)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogi(OpenTK.Graphics.OpenGL.FogParameter pname, int param);

        [Slot(610)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogiv(OpenTK.Graphics.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(654)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrontFace(OpenTK.Graphics.OpenGL.FrontFaceDirection mode);

        [Slot(655)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);

        [Slot(671)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern uint glGenLists(int range);

        [Slot(716)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanv(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);

        [Slot(725)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlane(OpenTK.Graphics.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] double* equation);

        [Slot(765)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetDoublev(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] double* data);

        [Slot(766)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.OpenGL.ErrorCode glGetError();

        [Slot(775)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatv(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data);

        [Slot(812)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerv(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data);

        [Slot(819)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightfv(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(820)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightiv(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(831)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMapdv(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] double* v);

        [Slot(832)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMapfv(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] float* v);

        [Slot(833)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMapiv(OpenTK.Graphics.OpenGL.MapTarget target, OpenTK.Graphics.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] int* v);

        [Slot(837)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialfv(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(838)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialiv(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(962)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPixelMapfv(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] float* values);

        [Slot(963)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPixelMapuiv(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] uint* values);

        [Slot(964)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPixelMapusv(OpenTK.Graphics.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] ushort* values);

        [Slot(975)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetPolygonStipple([OutAttribute, CountAttribute(Computed = "")] Byte* mask);

        [Slot(1039)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetString(OpenTK.Graphics.OpenGL.StringName name);

        [Slot(1046)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnvfv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(1047)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnviv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(1050)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexGendv(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] double* @params);

        [Slot(1051)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexGenfv(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(1052)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexGeniv(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(1054)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glGetTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);

        [Slot(1055)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameterfv(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(1056)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexLevelParameteriv(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(1058)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterfv(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(1063)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameteriv(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(1166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHint(OpenTK.Graphics.OpenGL.HintTarget target, OpenTK.Graphics.OpenGL.HintMode mode);

        [Slot(1190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexMask(uint mask);

        [Slot(1182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexd(double c);

        [Slot(1183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glIndexdv([CountAttribute(Count = 1)] double* c);

        [Slot(1184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexf(float c);

        [Slot(1187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glIndexfv([CountAttribute(Count = 1)] float* c);

        [Slot(1188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexi(int c);

        [Slot(1189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glIndexiv([CountAttribute(Count = 1)] int* c);

        [Slot(1195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glIndexs(short c);

        [Slot(1196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glIndexsv([CountAttribute(Count = 1)] short* c);

        [Slot(1201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glInitNames();

        [Slot(1220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabled(OpenTK.Graphics.OpenGL.EnableCap cap);

        [Slot(1229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsList(uint list);

        [Slot(1272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModelf(OpenTK.Graphics.OpenGL.LightModelParameter pname, float param);

        [Slot(1273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModelfv(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(1274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModeli(OpenTK.Graphics.OpenGL.LightModelParameter pname, int param);

        [Slot(1275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModeliv(OpenTK.Graphics.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(1268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightf(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, float param);

        [Slot(1269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightfv(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(1270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLighti(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, int param);

        [Slot(1271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightiv(OpenTK.Graphics.OpenGL.LightName light, OpenTK.Graphics.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(1280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineStipple(int factor, ushort pattern);

        [Slot(1281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidth(float width);

        [Slot(1285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glListBase(uint @base);

        [Slot(1291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLoadIdentity();

        [Slot(1293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixd([CountAttribute(Count = 16)] double* m);

        [Slot(1294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(1296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLoadName(uint name);

        [Slot(1304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLogicOp(OpenTK.Graphics.OpenGL.LogicOp opcode);

        [Slot(1317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMap1d(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] double* points);

        [Slot(1318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMap1f(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int stride, int order, [CountAttribute(Computed = "target,stride,order")] float* points);

        [Slot(1320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMap2d(OpenTK.Graphics.OpenGL.MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] double* points);

        [Slot(1321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMap2f(OpenTK.Graphics.OpenGL.MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] float* points);

        [Slot(1327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMapGrid1d(int un, double u1, double u2);

        [Slot(1328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMapGrid1f(int un, float u1, float u2);

        [Slot(1330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

        [Slot(1331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

        [Slot(1345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaterialf(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, float param);

        [Slot(1346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialfv(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(1347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMateriali(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, int param);

        [Slot(1348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialiv(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(1364)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixMode(OpenTK.Graphics.OpenGL.MatrixMode mode);

        [Slot(1544)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixd([CountAttribute(Count = 16)] double* m);

        [Slot(1545)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(1599)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNewList(uint list, OpenTK.Graphics.OpenGL.ListMode mode);

        [Slot(1601)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3b(SByte nx, SByte ny, SByte nz);

        [Slot(1602)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormal3bv([CountAttribute(Count = 3)] SByte* v);

        [Slot(1603)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3d(double nx, double ny, double nz);

        [Slot(1604)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormal3dv([CountAttribute(Count = 3)] double* v);

        [Slot(1605)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3f(float nx, float ny, float nz);

        [Slot(1606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormal3fv([CountAttribute(Count = 3)] float* v);

        [Slot(1611)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3i(int nx, int ny, int nz);

        [Slot(1612)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormal3iv([CountAttribute(Count = 3)] int* v);

        [Slot(1613)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3s(short nx, short ny, short nz);

        [Slot(1614)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glNormal3sv([CountAttribute(Count = 3)] short* v);

        [Slot(1640)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);

        [Slot(1644)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPassThrough(float token);

        [Slot(1672)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPixelMapfv(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] float* values);

        [Slot(1673)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPixelMapuiv(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] uint* values);

        [Slot(1674)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPixelMapusv(OpenTK.Graphics.OpenGL.PixelMap map, int mapsize, [CountAttribute(Parameter = "mapsize")] ushort* values);

        [Slot(1676)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStoref(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, float param);

        [Slot(1677)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorei(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, int param);

        [Slot(1684)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelTransferf(OpenTK.Graphics.OpenGL.PixelTransferParameter pname, float param);

        [Slot(1685)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelTransferi(OpenTK.Graphics.OpenGL.PixelTransferParameter pname, int param);

        [Slot(1691)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelZoom(float xfactor, float yfactor);

        [Slot(1710)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSize(float size);

        [Slot(1714)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonMode(OpenTK.Graphics.OpenGL.MaterialFace face, OpenTK.Graphics.OpenGL.PolygonMode mode);

        [Slot(1720)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPolygonStipple([CountAttribute(Computed = "")] Byte* mask);

        [Slot(1721)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopAttrib();

        [Slot(1726)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopMatrix();

        [Slot(1727)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopName();

        [Slot(1920)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushAttrib(OpenTK.Graphics.OpenGL.AttribMask mask);

        [Slot(1926)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushMatrix();

        [Slot(1927)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushName(uint name);

        [Slot(1933)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos2d(double x, double y);

        [Slot(1934)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos2dv([CountAttribute(Count = 2)] double* v);

        [Slot(1935)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos2f(float x, float y);

        [Slot(1936)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos2fv([CountAttribute(Count = 2)] float* v);

        [Slot(1937)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos2i(int x, int y);

        [Slot(1938)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos2iv([CountAttribute(Count = 2)] int* v);

        [Slot(1939)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos2s(short x, short y);

        [Slot(1940)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos2sv([CountAttribute(Count = 2)] short* v);

        [Slot(1943)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos3d(double x, double y, double z);

        [Slot(1944)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos3dv([CountAttribute(Count = 3)] double* v);

        [Slot(1945)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos3f(float x, float y, float z);

        [Slot(1946)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos3fv([CountAttribute(Count = 3)] float* v);

        [Slot(1947)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos3i(int x, int y, int z);

        [Slot(1948)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos3iv([CountAttribute(Count = 3)] int* v);

        [Slot(1949)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos3s(short x, short y, short z);

        [Slot(1950)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos3sv([CountAttribute(Count = 3)] short* v);

        [Slot(1953)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos4d(double x, double y, double z, double w);

        [Slot(1954)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos4dv([CountAttribute(Count = 4)] double* v);

        [Slot(1955)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos4f(float x, float y, float z, float w);

        [Slot(1956)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos4fv([CountAttribute(Count = 4)] float* v);

        [Slot(1957)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos4i(int x, int y, int z, int w);

        [Slot(1958)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos4iv([CountAttribute(Count = 4)] int* v);

        [Slot(1959)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRasterPos4s(short x, short y, short z, short w);

        [Slot(1960)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRasterPos4sv([CountAttribute(Count = 4)] short* v);

        [Slot(1964)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadBuffer(OpenTK.Graphics.OpenGL.ReadBufferMode src);

        [Slot(1969)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadPixels(int x, int y, int width, int height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(1970)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRectd(double x1, double y1, double x2, double y2);

        [Slot(1971)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRectdv([CountAttribute(Count = 2)] double* v1, [CountAttribute(Count = 2)] double* v2);

        [Slot(1972)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRectf(float x1, float y1, float x2, float y2);

        [Slot(1973)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRectfv([CountAttribute(Count = 2)] float* v1, [CountAttribute(Count = 2)] float* v2);

        [Slot(1974)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRecti(int x1, int y1, int x2, int y2);

        [Slot(1975)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRectiv([CountAttribute(Count = 2)] int* v1, [CountAttribute(Count = 2)] int* v2);

        [Slot(1976)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRects(short x1, short y1, short x2, short y2);

        [Slot(1977)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glRectsv([CountAttribute(Count = 2)] short* v1, [CountAttribute(Count = 2)] short* v2);

        [Slot(1989)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern int glRenderMode(OpenTK.Graphics.OpenGL.RenderingMode mode);

        [Slot(2022)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotated(double angle, double x, double y, double z);

        [Slot(2023)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotatef(float angle, float x, float y, float z);

        [Slot(2041)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScaled(double x, double y, double z);

        [Slot(2042)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScalef(float x, float y, float z);

        [Slot(2044)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissor(int x, int y, int width, int height);

        [Slot(2088)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSelectBuffer(int size, [OutAttribute, CountAttribute(Parameter = "size")] uint* buffer);

        [Slot(2099)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glShadeModel(OpenTK.Graphics.OpenGL.ShadingModel mode);

        [Slot(2122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFunc(OpenTK.Graphics.OpenGL.StencilFunction func, int @ref, uint mask);

        [Slot(2125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMask(uint mask);

        [Slot(2127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOp(OpenTK.Graphics.OpenGL.StencilOp fail, OpenTK.Graphics.OpenGL.StencilOp zfail, OpenTK.Graphics.OpenGL.StencilOp zpass);

        [Slot(2168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord1d(double s);

        [Slot(2169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord1dv([CountAttribute(Count = 1)] double* v);

        [Slot(2170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord1f(float s);

        [Slot(2171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord1fv([CountAttribute(Count = 1)] float* v);

        [Slot(2174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord1i(int s);

        [Slot(2175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord1iv([CountAttribute(Count = 1)] int* v);

        [Slot(2176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord1s(short s);

        [Slot(2177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord1sv([CountAttribute(Count = 1)] short* v);

        [Slot(2182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord2d(double s, double t);

        [Slot(2183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord2dv([CountAttribute(Count = 2)] double* v);

        [Slot(2184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord2f(float s, float t);

        [Slot(2193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord2fv([CountAttribute(Count = 2)] float* v);

        [Slot(2198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord2i(int s, int t);

        [Slot(2199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord2iv([CountAttribute(Count = 2)] int* v);

        [Slot(2200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord2s(short s, short t);

        [Slot(2201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord2sv([CountAttribute(Count = 2)] short* v);

        [Slot(2206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord3d(double s, double t, double r);

        [Slot(2207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord3dv([CountAttribute(Count = 3)] double* v);

        [Slot(2208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord3f(float s, float t, float r);

        [Slot(2209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord3fv([CountAttribute(Count = 3)] float* v);

        [Slot(2212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord3i(int s, int t, int r);

        [Slot(2213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord3iv([CountAttribute(Count = 3)] int* v);

        [Slot(2214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord3s(short s, short t, short r);

        [Slot(2215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord3sv([CountAttribute(Count = 3)] short* v);

        [Slot(2220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord4d(double s, double t, double r, double q);

        [Slot(2221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord4dv([CountAttribute(Count = 4)] double* v);

        [Slot(2222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord4f(float s, float t, float r, float q);

        [Slot(2225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord4fv([CountAttribute(Count = 4)] float* v);

        [Slot(2230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord4i(int s, int t, int r, int q);

        [Slot(2231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord4iv([CountAttribute(Count = 4)] int* v);

        [Slot(2232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoord4s(short s, short t, short r, short q);

        [Slot(2233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexCoord4sv([CountAttribute(Count = 4)] short* v);

        [Slot(2249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvf(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, float param);

        [Slot(2250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnvfv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(2251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvi(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, int param);

        [Slot(2252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnviv(OpenTK.Graphics.OpenGL.TextureEnvTarget target, OpenTK.Graphics.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(2256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexGend(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, double param);

        [Slot(2257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexGendv(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] double* @params);

        [Slot(2258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexGenf(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, float param);

        [Slot(2259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexGenfv(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(2260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexGeni(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, int param);

        [Slot(2261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexGeniv(OpenTK.Graphics.OpenGL.TextureCoordName coord, OpenTK.Graphics.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(2264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);

        [Slot(2265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, int level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(2274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterf(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, float param);

        [Slot(2275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterfv(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(2276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameteri(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, int param);

        [Slot(2281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameteriv(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(2367)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslated(double x, double y, double z);

        [Slot(2368)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslatef(float x, float y, float z);

        [Slot(2527)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex2d(double x, double y);

        [Slot(2528)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex2dv([CountAttribute(Count = 2)] double* v);

        [Slot(2529)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex2f(float x, float y);

        [Slot(2530)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex2fv([CountAttribute(Count = 2)] float* v);

        [Slot(2533)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex2i(int x, int y);

        [Slot(2534)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex2iv([CountAttribute(Count = 2)] int* v);

        [Slot(2535)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex2s(short x, short y);

        [Slot(2536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex2sv([CountAttribute(Count = 2)] short* v);

        [Slot(2541)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex3d(double x, double y, double z);

        [Slot(2542)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex3dv([CountAttribute(Count = 3)] double* v);

        [Slot(2543)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex3f(float x, float y, float z);

        [Slot(2544)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex3fv([CountAttribute(Count = 3)] float* v);

        [Slot(2547)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex3i(int x, int y, int z);

        [Slot(2548)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex3iv([CountAttribute(Count = 3)] int* v);

        [Slot(2549)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex3s(short x, short y, short z);

        [Slot(2550)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex3sv([CountAttribute(Count = 3)] short* v);

        [Slot(2555)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex4d(double x, double y, double z, double w);

        [Slot(2556)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex4dv([CountAttribute(Count = 4)] double* v);

        [Slot(2557)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex4f(float x, float y, float z, float w);

        [Slot(2558)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex4fv([CountAttribute(Count = 4)] float* v);

        [Slot(2561)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex4i(int x, int y, int z, int w);

        [Slot(2562)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex4iv([CountAttribute(Count = 4)] int* v);

        [Slot(2563)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertex4s(short x, short y, short z, short w);

        [Slot(2564)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glVertex4sv([CountAttribute(Count = 4)] short* v);

        [Slot(2876)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewport(int x, int y, int width, int height);
    }
}
