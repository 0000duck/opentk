//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.OpenGL
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v1.4]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorAlpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer(OpenTK.Graphics.OpenGL.FogPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordd")]
        public static void FogCoord(double coord)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// [length: 1]
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoorddv")]
        public static void FogCoord([CountAttribute(Count = 1)] ref double coord)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordf")]
        public static void FogCoord(float coord)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// [length: 1]
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordfv")]
        public static void FogCoord([CountAttribute(Count = 1)] ref float coord)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static void MultiDrawArrays(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] int[] first, [CountAttribute(Computed = "drawcount")] int[] count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static void MultiDrawArrays(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] ref int first, [CountAttribute(Computed = "drawcount")] ref int count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// [length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] int* first, [CountAttribute(Computed = "drawcount")] int* count, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref int count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// [length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, int drawcount)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static unsafe void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static unsafe void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3b")]
        public static void SecondaryColor3(SByte red, SByte green, SByte blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] SByte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref SByte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3d")]
        public static void SecondaryColor3(double red, double green, double blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3f")]
        public static void SecondaryColor3(float red, float green, float blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3i")]
        public static void SecondaryColor3(int red, int green, int blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3s")]
        public static void SecondaryColor3(short red, short green, short blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ub")]
        public static void SecondaryColor3(Byte red, Byte green, Byte blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] Byte[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref Byte v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ui")]
        public static void SecondaryColor3(uint red, uint green, uint blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] uint[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref uint v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3us")]
        public static void SecondaryColor3(ushort red, ushort green, ushort blue)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ushort[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref ushort v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer<T3>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer<T3>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer<T3>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer<T3>(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2d")]
        public static void WindowPos2(double x, double y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static void WindowPos2([CountAttribute(Count = 2)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static void WindowPos2([CountAttribute(Count = 2)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2f")]
        public static void WindowPos2(float x, float y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static void WindowPos2([CountAttribute(Count = 2)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static void WindowPos2([CountAttribute(Count = 2)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2i")]
        public static void WindowPos2(int x, int y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static void WindowPos2([CountAttribute(Count = 2)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static void WindowPos2([CountAttribute(Count = 2)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2s")]
        public static void WindowPos2(short x, short y)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static void WindowPos2([CountAttribute(Count = 2)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static void WindowPos2([CountAttribute(Count = 2)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3d")]
        public static void WindowPos3(double x, double y, double z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static void WindowPos3([CountAttribute(Count = 3)] double[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static void WindowPos3([CountAttribute(Count = 3)] ref double v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3f")]
        public static void WindowPos3(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static void WindowPos3([CountAttribute(Count = 3)] float[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static void WindowPos3([CountAttribute(Count = 3)] ref float v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3i")]
        public static void WindowPos3(int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static void WindowPos3([CountAttribute(Count = 3)] int[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static void WindowPos3([CountAttribute(Count = 3)] ref int v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3s")]
        public static void WindowPos3(short x, short y, short z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static void WindowPos3([CountAttribute(Count = 3)] short[] v)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">
        /// [length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static void WindowPos3([CountAttribute(Count = 3)] ref short v)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFuncSeparate(OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorAlpha);

        [Slot(603)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogCoordPointer(OpenTK.Graphics.OpenGL.FogPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

        [Slot(592)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogCoordd(double coord);

        [Slot(594)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogCoorddv([CountAttribute(Count = 1)] double* coord);

        [Slot(596)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogCoordf(float coord);

        [Slot(599)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogCoordfv([CountAttribute(Count = 1)] float* coord);

        [Slot(1402)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawArrays(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] int* first, [CountAttribute(Computed = "drawcount")] int* count, int drawcount);

        [Slot(1411)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultiDrawElements(OpenTK.Graphics.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] int* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, int drawcount);

        [Slot(1696)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterf(OpenTK.Graphics.OpenGL.PointParameterName pname, float param);

        [Slot(1700)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterfv(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(1704)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameteri(OpenTK.Graphics.OpenGL.PointParameterName pname, int param);

        [Slot(1706)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameteriv(OpenTK.Graphics.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(2048)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3b(SByte red, SByte green, SByte blue);

        [Slot(2050)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3bv([CountAttribute(Count = 3)] SByte* v);

        [Slot(2052)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3d(double red, double green, double blue);

        [Slot(2054)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3dv([CountAttribute(Count = 3)] double* v);

        [Slot(2056)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3f(float red, float green, float blue);

        [Slot(2058)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3fv([CountAttribute(Count = 3)] float* v);

        [Slot(2062)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3i(int red, int green, int blue);

        [Slot(2064)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3iv([CountAttribute(Count = 3)] int* v);

        [Slot(2066)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3s(short red, short green, short blue);

        [Slot(2068)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3sv([CountAttribute(Count = 3)] short* v);

        [Slot(2070)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3ub(Byte red, Byte green, Byte blue);

        [Slot(2072)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3ubv([CountAttribute(Count = 3)] Byte* v);

        [Slot(2074)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3ui(uint red, uint green, uint blue);

        [Slot(2076)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3uiv([CountAttribute(Count = 3)] uint* v);

        [Slot(2078)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColor3us(ushort red, ushort green, ushort blue);

        [Slot(2080)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glSecondaryColor3usv([CountAttribute(Count = 3)] ushort* v);

        [Slot(2085)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSecondaryColorPointer(int size, OpenTK.Graphics.OpenGL.ColorPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(2895)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos2d(double x, double y);

        [Slot(2898)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos2dv([CountAttribute(Count = 2)] double* v);

        [Slot(2901)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos2f(float x, float y);

        [Slot(2904)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos2fv([CountAttribute(Count = 2)] float* v);

        [Slot(2907)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos2i(int x, int y);

        [Slot(2910)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos2iv([CountAttribute(Count = 2)] int* v);

        [Slot(2913)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos2s(short x, short y);

        [Slot(2916)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos2sv([CountAttribute(Count = 2)] short* v);

        [Slot(2919)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos3d(double x, double y, double z);

        [Slot(2922)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos3dv([CountAttribute(Count = 3)] double* v);

        [Slot(2925)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos3f(float x, float y, float z);

        [Slot(2928)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos3fv([CountAttribute(Count = 3)] float* v);

        [Slot(2931)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos3i(int x, int y, int z);

        [Slot(2934)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos3iv([CountAttribute(Count = 3)] int* v);

        [Slot(2937)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glWindowPos3s(short x, short y, short z);

        [Slot(2940)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glWindowPos3sv([CountAttribute(Count = 3)] short* v);
    }
}
