//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES11
{
    public sealed partial class GL
    {
        /// <summary>
        /// [requires: v1.0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="func">
        /// </param>
        /// <param name="@ref">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static void AlphaFunc(OpenTK.Graphics.ES11.AlphaFunction func, float @ref)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="func">
        /// </param>
        /// <param name="@ref">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glAlphaFuncx")]
        public static void AlphaFuncx(OpenTK.Graphics.ES11.AlphaFunction func, int @ref)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindBuffer")]
        public static void BindBuffer(OpenTK.Graphics.ES11.BufferTargetArb target, uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBindTexture")]
        public static void BindTexture(OpenTK.Graphics.ES11.TextureTarget target, uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES11.BlendingFactor sfactor, OpenTK.Graphics.ES11.BlendingFactor dfactor)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.BufferUsageArb usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.BufferUsageArb usage)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenTK.Graphics.ES11.BufferUsageArb usage)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, int size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">
        /// [length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES11.ClearBufferMask mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static void ClearColor(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="red">
        /// </param>
        /// <param name="green">
        /// </param>
        /// <param name="blue">
        /// </param>
        /// <param name="alpha">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearColorx")]
        public static void ClearColorx(int red, int green, int blue, int alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(float d)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="depth">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearDepthx")]
        public static void ClearDepthx(int depth)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(int s)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="texture">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClientActiveTexture")]
        public static void ClientActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="p">
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float[] eqn)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="p">
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] ref float eqn)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="p">
        /// </param>
        /// <param name="eqn">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanef")]
        public static unsafe void ClipPlane(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float* eqn)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int[] equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] ref int equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glClipPlanex")]
        public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int* equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="red">
        /// </param>
        /// <param name="green">
        /// </param>
        /// <param name="blue">
        /// </param>
        /// <param name="alpha">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColor4f")]
        public static void Color4(float red, float green, float blue, float alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="red">
        /// </param>
        /// <param name="green">
        /// </param>
        /// <param name="blue">
        /// </param>
        /// <param name="alpha">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColor4ub")]
        public static void Color4(Byte red, Byte green, Byte blue, Byte alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="red">
        /// </param>
        /// <param name="green">
        /// </param>
        /// <param name="blue">
        /// </param>
        /// <param name="alpha">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColor4x")]
        public static void Color4x(int red, int green, int blue, int alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">
        /// [length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES11.CullFaceMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] ref uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteBuffers")]
        public static unsafe void DeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static void DeleteTextures(int n, [CountAttribute(Parameter = "n")] ref uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDeleteTextures")]
        public static unsafe void DeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES11.DepthFunction func)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthRangef")]
        public static void DepthRange(float n, float f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDepthRangex")]
        public static void DepthRangex(int n, int f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="cap">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES11.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="array">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDisableClientState")]
        public static void DisableClientState(OpenTK.Graphics.ES11.EnableCap array)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, int first, int count)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">
        /// [length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES11.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="array">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glEnableClientState")]
        public static void EnableClientState(OpenTK.Graphics.ES11.EnableCap array)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static void Finish()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static void Flush()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogf")]
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static void Fog(OpenTK.Graphics.ES11.FogParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        public static unsafe void Fog(OpenTK.Graphics.ES11.FogParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogx")]
        public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFogxv")]
        public static unsafe void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES11.FrontFaceDirection mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="l">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrustumf")]
        public static void Frustum(float l, float r, float b, float t, float n, float f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="l">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glFrustumx")]
        public static void Frustumx(int l, int r, int b, int t, int n, int f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static uint GenBuffer()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">
        /// [length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenBuffers")]
        public static unsafe void GenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static uint GenTexture()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">
        /// [length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGenTextures")]
        public static unsafe void GenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static bool GetBoolean(OpenTK.Graphics.ES11.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.VersionEsCm10 pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static void GetBufferParameter(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.VersionEsCm10 pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetBufferParameteriv")]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.VersionEsCm10 pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float[] equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out float equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanef")]
        public static unsafe void GetClipPlane(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float* equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int[] equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out int equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="plane">
        /// </param>
        /// <param name="equation">
        /// [length: 4]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetClipPlanex")]
        public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int* equation)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.ES11.ErrorCode GetError()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static int GetFixed(OpenTK.Graphics.ES11.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFixedv")]
        public static unsafe void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static float GetFloat(OpenTK.Graphics.ES11.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out float data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static unsafe void GetFloat(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static int GetInteger(OpenTK.Graphics.ES11.GetPName pname)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="data">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static unsafe void GetInteger(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static unsafe void GetLight(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetLightxv")]
        public static unsafe void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static unsafe void GetMaterial(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetMaterialxv")]
        public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES11.StringName name)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static unsafe void GetTexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexEnvxv")]
        public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glGetTexParameterxv")]
        public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES11.HintTarget target, OpenTK.Graphics.ES11.HintMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsBuffer")]
        public static bool IsBuffer(uint buffer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES11.EnableCap cap)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glIsTexture")]
        public static bool IsTexture(uint texture)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelf")]
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static unsafe void LightModel(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelx")]
        public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightModelxv")]
        public static unsafe void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightf")]
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        public static unsafe void Light(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightx")]
        public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="light">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLightxv")]
        public static unsafe void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(float width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="width">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLineWidthx")]
        public static void LineWidthx(int width)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadIdentity")]
        public static void LoadIdentity()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static void LoadMatrix([CountAttribute(Count = 16)] float[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static void LoadMatrix([CountAttribute(Count = 16)] ref float m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
        public static void LoadMatrixx([CountAttribute(Count = 16)] int[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
        public static void LoadMatrixx([CountAttribute(Count = 16)] ref int m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="opcode">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static void LogicOp(OpenTK.Graphics.ES11.LogicOp opcode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialf")]
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static unsafe void Material(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialx")]
        public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int[] param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] ref int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="face">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMaterialxv")]
        public static unsafe void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="mode">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static void MatrixMode(OpenTK.Graphics.ES11.MatrixMode mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static void MultMatrix([CountAttribute(Count = 16)] float[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static void MultMatrix([CountAttribute(Count = 16)] ref float m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixx")]
        public static void MultMatrixx([CountAttribute(Count = 16)] int[] m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="m">
        /// [length: 16]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultMatrixx")]
        public static void MultMatrixx([CountAttribute(Count = 16)] ref int m)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="s">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="q">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultiTexCoord4f")]
        public static void MultiTexCoord4(OpenTK.Graphics.ES11.TextureUnit target, float s, float t, float r, float q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="texture">
        /// </param>
        /// <param name="s">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="q">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glMultiTexCoord4x")]
        public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r, int q)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="nx">
        /// </param>
        /// <param name="ny">
        /// </param>
        /// <param name="nz">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormal3f")]
        public static void Normal3(float nx, float ny, float nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="nx">
        /// </param>
        /// <param name="ny">
        /// </param>
        /// <param name="nz">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormal3x")]
        public static void Normal3x(int nx, int ny, int nz)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="l">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glOrthof")]
        public static void Ortho(float l, float r, float b, float t, float n, float f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="l">
        /// </param>
        /// <param name="r">
        /// </param>
        /// <param name="b">
        /// </param>
        /// <param name="t">
        /// </param>
        /// <param name="n">
        /// </param>
        /// <param name="f">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glOrthox")]
        public static void Orthox(int l, int r, int b, int t, int n, int f)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES11.PixelStoreParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterf")]
        public static void PointParameter(OpenTK.Graphics.ES11.VersionEsCm10 pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterfv")]
        public static void PointParameter(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterfv")]
        public static unsafe void PointParameter(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterx")]
        public static void PointParameterx(OpenTK.Graphics.ES11.VersionEsCm10 pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterxv")]
        public static void PointParameterx(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterxv")]
        public static void PointParameterx(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointParameterxv")]
        public static unsafe void PointParameterx(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static void PointSize(float size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPointSizex")]
        public static void PointSizex(int size)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units">
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(float factor, float units)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="factor">
        /// </param>
        /// <param name="units">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPolygonOffsetx")]
        public static void PolygonOffsetx(int factor, int units)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPopMatrix")]
        public static void PopMatrix()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glPushMatrix")]
        public static void PushMatrix()
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="angle">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glRotatef")]
        public static void Rotate(float angle, float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="angle">
        /// </param>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glRotatex")]
        public static void Rotatex(int angle, int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(float value, bool invert)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="value">
        /// </param>
        /// <param name="invert">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glSampleCoveragex")]
        public static void SampleCoveragex(int value, bool invert)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glScalef")]
        public static void Scale(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glScalex")]
        public static void Scalex(int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static void Scissor(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="mode">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glShadeModel")]
        public static void ShadeModel(OpenTK.Graphics.ES11.ShadingModel mode)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static void StencilFunc(OpenTK.Graphics.ES11.StencilFunction func, int @ref, uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static void StencilMask(uint mask)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES11.StencilOp fail, OpenTK.Graphics.ES11.StencilOp zfail, OpenTK.Graphics.ES11.StencilOp zpass)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static unsafe void TexEnv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvx")]
        public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexEnvxv")]
        public static unsafe void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border">
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, float param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] float[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref float @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param">
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static unsafe void TexParameter(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="param">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterx")]
        public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, int param)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="target">
        /// </param>
        /// <param name="pname">
        /// </param>
        /// <param name="@params">
        /// [length: COMPSIZE(pname)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexParameterxv")]
        public static unsafe void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int* @params)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">
        /// [length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTranslatef")]
        public static void Translate(float x, float y, float z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="x">
        /// </param>
        /// <param name="y">
        /// </param>
        /// <param name="z">
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glTranslatex")]
        public static void Translatex(int x, int y, int z)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer)
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// </summary>
        /// <param name="size">
        /// </param>
        /// <param name="type">
        /// </param>
        /// <param name="stride">
        /// </param>
        /// <param name="pointer">
        /// [length: COMPSIZE(size,type,stride)]
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
        {
            throw new BindingsNotRewrittenException();
        }

        /// <summary>
        /// [requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_ES_CM_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static void Viewport(int x, int y, int width, int height)
        {
            throw new BindingsNotRewrittenException();
        }

        [Slot(1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture);

        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFunc(OpenTK.Graphics.ES11.AlphaFunction func, float @ref);

        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glAlphaFuncx(OpenTK.Graphics.ES11.AlphaFunction func, int @ref);

        [Slot(5)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindBuffer(OpenTK.Graphics.ES11.BufferTargetArb target, uint buffer);

        [Slot(8)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBindTexture(OpenTK.Graphics.ES11.TextureTarget target, uint texture);

        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBlendFunc(OpenTK.Graphics.ES11.BlendingFactor sfactor, OpenTK.Graphics.ES11.BlendingFactor dfactor);

        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenTK.Graphics.ES11.BufferUsageArb usage);

        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glBufferSubData(OpenTK.Graphics.ES11.BufferTargetArb target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);

        [Slot(20)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClear(OpenTK.Graphics.ES11.ClearBufferMask mask);

        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColor(float red, float green, float blue, float alpha);

        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearColorx(int red, int green, int blue, int alpha);

        [Slot(25)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthf(float d);

        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearDepthx(int depth);

        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClearStencil(int s);

        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glClientActiveTexture(OpenTK.Graphics.ES11.TextureUnit texture);

        [Slot(32)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanef(OpenTK.Graphics.ES11.ClipPlaneName p, [CountAttribute(Count = 4)] float* eqn);

        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int* equation);

        [Slot(40)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4f(float red, float green, float blue, float alpha);

        [Slot(41)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4ub(Byte red, Byte green, Byte blue, Byte alpha);

        [Slot(42)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColor4x(int red, int green, int blue, int alpha);

        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorMask(bool red, bool green, bool blue, bool alpha);

        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glColorPointer(int size, OpenTK.Graphics.ES11.ColorPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(48)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCompressedTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, int imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);

        [Slot(51)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int x, int y, int width, int height, int border);

        [Slot(52)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCopyTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glCullFace(OpenTK.Graphics.ES11.CullFaceMode mode);

        [Slot(62)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteBuffers(int n, [CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glDeleteTextures(int n, [CountAttribute(Parameter = "n")] uint* textures);

        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthFunc(OpenTK.Graphics.ES11.DepthFunction func);

        [Slot(70)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthMask(bool flag);

        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangef(float n, float f);

        [Slot(73)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDepthRangex(int n, int f);

        [Slot(75)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisable(OpenTK.Graphics.ES11.EnableCap cap);

        [Slot(76)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDisableClientState(OpenTK.Graphics.ES11.EnableCap array);

        [Slot(79)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawArrays(OpenTK.Graphics.ES11.PrimitiveType mode, int first, int count);

        [Slot(80)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glDrawElements(OpenTK.Graphics.ES11.PrimitiveType mode, int count, OpenTK.Graphics.ES11.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices);

        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnable(OpenTK.Graphics.ES11.EnableCap cap);

        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glEnableClientState(OpenTK.Graphics.ES11.EnableCap array);

        [Slot(113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFinish();

        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFlush();

        [Slot(117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogf(OpenTK.Graphics.ES11.FogParameter pname, float param);

        [Slot(118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogfv(OpenTK.Graphics.ES11.FogParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFogx(OpenTK.Graphics.ES11.FogPName pname, int param);

        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glFogxv(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrontFace(OpenTK.Graphics.ES11.FrontFaceDirection mode);

        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustumf(float l, float r, float b, float t, float n, float f);

        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glFrustumx(int l, int r, int b, int t, int n, int f);

        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenBuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* buffers);

        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGenTextures(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* textures);

        [Slot(139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBooleanv(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);

        [Slot(140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetBufferParameteriv(OpenTK.Graphics.ES11.BufferTargetArb target, OpenTK.Graphics.ES11.VersionEsCm10 pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlanef(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] float* equation);

        [Slot(144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int* equation);

        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern OpenTK.Graphics.ES11.ErrorCode glGetError();

        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFixedv(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute] int* @params);

        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetFloatv(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] float* data);

        [Slot(160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetIntegerv(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* data);

        [Slot(161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightfv(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetLightxv(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialfv(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetMaterialxv(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern IntPtr glGetString(OpenTK.Graphics.ES11.StringName name);

        [Slot(182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnvfv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnviv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexEnvxv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterfv(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] float* @params);

        [Slot(191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameteriv(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glGetTexParameterxv(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glHint(OpenTK.Graphics.ES11.HintTarget target, OpenTK.Graphics.ES11.HintMode mode);

        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsBuffer(uint buffer);

        [Slot(199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsEnabled(OpenTK.Graphics.ES11.EnableCap cap);

        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern byte glIsTexture(uint texture);

        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModelf(OpenTK.Graphics.ES11.LightModelParameter pname, float param);

        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModelfv(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, int param);

        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightModelxv(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightf(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, float param);

        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightfv(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, int param);

        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLightxv(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidth(float width);

        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLineWidthx(int width);

        [Slot(221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLoadIdentity();

        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glLoadMatrixx([CountAttribute(Count = 16)] int* m);

        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glLogicOp(OpenTK.Graphics.ES11.LogicOp opcode);

        [Slot(234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaterialf(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, float param);

        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialfv(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param);

        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMaterialxv(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* param);

        [Slot(241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMatrixMode(OpenTK.Graphics.ES11.MatrixMode mode);

        [Slot(262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixf([CountAttribute(Count = 16)] float* m);

        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glMultMatrixx([CountAttribute(Count = 16)] int* m);

        [Slot(258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4f(OpenTK.Graphics.ES11.TextureUnit target, float s, float t, float r, float q);

        [Slot(259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glMultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r, int q);

        [Slot(266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3f(float nx, float ny, float nz);

        [Slot(267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormal3x(int nx, int ny, int nz);

        [Slot(270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glNormalPointer(OpenTK.Graphics.ES11.NormalPointerType type, int stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer);

        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrthof(float l, float r, float b, float t, float n, float f);

        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glOrthox(int l, int r, int b, int t, int n, int f);

        [Slot(281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPixelStorei(OpenTK.Graphics.ES11.PixelStoreParameter pname, int param);

        [Slot(285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterf(OpenTK.Graphics.ES11.VersionEsCm10 pname, float param);

        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterfv(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointParameterx(OpenTK.Graphics.ES11.VersionEsCm10 pname, int param);

        [Slot(289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glPointParameterxv(OpenTK.Graphics.ES11.VersionEsCm10 pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSize(float size);

        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPointSizex(int size);

        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffset(float factor, float units);

        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPolygonOffsetx(int factor, int units);

        [Slot(301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPopMatrix();

        [Slot(306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glPushMatrix();

        [Slot(315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glReadPixels(int x, int y, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotatef(float angle, float x, float y, float z);

        [Slot(324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glRotatex(int angle, int x, int y, int z);

        [Slot(326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoverage(float value, bool invert);

        [Slot(327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glSampleCoveragex(int value, bool invert);

        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScalef(float x, float y, float z);

        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScalex(int x, int y, int z);

        [Slot(332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glScissor(int x, int y, int width, int height);

        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glShadeModel(OpenTK.Graphics.ES11.ShadingModel mode);

        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilFunc(OpenTK.Graphics.ES11.StencilFunction func, int @ref, uint mask);

        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilMask(uint mask);

        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glStencilOp(OpenTK.Graphics.ES11.StencilOp fail, OpenTK.Graphics.ES11.StencilOp zfail, OpenTK.Graphics.ES11.StencilOp zpass);

        [Slot(356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexCoordPointer(int size, OpenTK.Graphics.ES11.TexCoordPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvf(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, float param);

        [Slot(358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnvfv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvi(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param);

        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnviv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(361)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param);

        [Slot(363)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexEnvxv(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(371)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height, int border, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterf(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, float param);

        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterfv(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] float* @params);

        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameteri(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, int param);

        [Slot(375)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameteriv(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.TextureParameterName pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(376)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, int param);

        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern unsafe void glTexParameterxv(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int* @params);

        [Slot(383)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTexSubImage2D(OpenTK.Graphics.ES11.TextureTarget target, int level, int xoffset, int yoffset, int width, int height, OpenTK.Graphics.ES11.PixelFormat format, OpenTK.Graphics.ES11.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);

        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslatef(float x, float y, float z);

        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glTranslatex(int x, int y, int z);

        [Slot(403)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glVertexPointer(int size, OpenTK.Graphics.ES11.VertexPointerType type, int stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);

        [Slot(404)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        private static extern void glViewport(int x, int y, int width, int height);
    }
}
