//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES11
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "FixedPoint" in the extension "Oes".
        /// </summary>
        public static partial class Oes
        {
            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="op">
            /// </param>
            /// <param name="value">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glAccumxOES")]
            public static void Accumx(OpenTK.Graphics.ES11.OesFixedPoint op, int value)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="func">
            /// </param>
            /// <param name="@ref">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glAlphaFuncxOES")]
            public static void AlphaFuncx(OpenTK.Graphics.ES11.AlphaFunction func, int @ref)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="xorig">
            /// </param>
            /// <param name="yorig">
            /// </param>
            /// <param name="xmove">
            /// </param>
            /// <param name="ymove">
            /// </param>
            /// <param name="bitmap">
            /// [length: COMPSIZE(width,height)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBitmapxOES")]
            public static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] Byte[] bitmap)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="xorig">
            /// </param>
            /// <param name="yorig">
            /// </param>
            /// <param name="xmove">
            /// </param>
            /// <param name="ymove">
            /// </param>
            /// <param name="bitmap">
            /// [length: COMPSIZE(width,height)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBitmapxOES")]
            public static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] ref Byte bitmap)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            /// <param name="height">
            /// </param>
            /// <param name="xorig">
            /// </param>
            /// <param name="yorig">
            /// </param>
            /// <param name="xmove">
            /// </param>
            /// <param name="ymove">
            /// </param>
            /// <param name="bitmap">
            /// [length: COMPSIZE(width,height)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBitmapxOES")]
            public static unsafe void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glBlendColorxOES")]
            public static void BlendColorx(int red, int green, int blue, int alpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClearAccumxOES")]
            public static void ClearAccumx(int red, int green, int blue, int alpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClearColorxOES")]
            public static void ClearColorx(int red, int green, int blue, int alpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="depth">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClearDepthxOES")]
            public static void ClearDepthx(int depth)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int[] equation)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] ref int equation)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glClipPlanexOES")]
            public static unsafe void ClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int* equation)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xOES")]
            public static void Color3x(int red, int green, int blue)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xvOES")]
            public static void Color3x([CountAttribute(Count = 3)] int[] components)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor3xvOES")]
            public static void Color3x([CountAttribute(Count = 3)] ref int components)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="red">
            /// </param>
            /// <param name="green">
            /// </param>
            /// <param name="blue">
            /// </param>
            /// <param name="alpha">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xOES")]
            public static void Color4x(int red, int green, int blue, int alpha)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xvOES")]
            public static void Color4x([CountAttribute(Count = 4)] int[] components)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="components">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glColor4xvOES")]
            public static void Color4x([CountAttribute(Count = 4)] ref int components)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glConvolutionParameterxvOES")]
            public static unsafe void ConvolutionParameterx(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glDepthRangexOES")]
            public static void DepthRangex(int n, int f)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="u">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord1xOES")]
            public static void EvalCoord1x(int u)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord1xvOES")]
            public static void EvalCoord1x([CountAttribute(Count = 1)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="u">
            /// </param>
            /// <param name="v">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xOES")]
            public static void EvalCoord2x(int u, int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xvOES")]
            public static void EvalCoord2x([CountAttribute(Count = 2)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glEvalCoord2xvOES")]
            public static void EvalCoord2x([CountAttribute(Count = 2)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="buffer">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFeedbackBufferxOES")]
            public static void FeedbackBufferx(int n, OpenTK.Graphics.ES11.OesFixedPoint type, [CountAttribute(Parameter = "n")] int[] buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="buffer">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFeedbackBufferxOES")]
            public static void FeedbackBufferx(int n, OpenTK.Graphics.ES11.OesFixedPoint type, [CountAttribute(Parameter = "n")] ref int buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="type">
            /// </param>
            /// <param name="buffer">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFeedbackBufferxOES")]
            public static unsafe void FeedbackBufferx(int n, OpenTK.Graphics.ES11.OesFixedPoint type, [CountAttribute(Parameter = "n")] int* buffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxOES")]
            public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] ref int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFogxvOES")]
            public static unsafe void Fogx(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="l">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="b">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glFrustumxOES")]
            public static void Frustumx(int l, int r, int b, int t, int n, int f)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int[] equation)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out int equation)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="plane">
            /// </param>
            /// <param name="equation">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetClipPlanexOES")]
            public static unsafe void GetClipPlanex(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int* equation)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetConvolutionParameterxvOES")]
            public static void GetConvolutionParameterx(OpenTK.Graphics.ES11.OesFixedPoint target, OpenTK.Graphics.ES11.OesFixedPoint pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetConvolutionParameterxvOES")]
            public static void GetConvolutionParameterx(OpenTK.Graphics.ES11.OesFixedPoint target, OpenTK.Graphics.ES11.OesFixedPoint pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetConvolutionParameterxvOES")]
            public static unsafe void GetConvolutionParameterx(OpenTK.Graphics.ES11.OesFixedPoint target, OpenTK.Graphics.ES11.OesFixedPoint pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static int GetFixed(OpenTK.Graphics.ES11.GetPName pname)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetFixedvOES")]
            public static unsafe void GetFixed(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static void GetHistogramParameterx(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetHistogramParameterxvOES")]
            public static unsafe void GetHistogramParameterx(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetLightxOES")]
            public static unsafe void GetLightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static void GetMapx(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] int[] v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static void GetMapx(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] out int v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="query">
            /// </param>
            /// <param name="v">
            /// [length: COMPSIZE(query)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMapxvOES")]
            public static unsafe void GetMapx(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] int* v)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetMaterialxvOES")]
            public static unsafe void GetMaterialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexEnvxvOES")]
            public static unsafe void GetTexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static void GetTexLevelParameterx(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="level">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexLevelParameterxvOES")]
            public static unsafe void GetTexLevelParameterx(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetTexParameterxvOES")]
            public static unsafe void GetTexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="component">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glIndexxOES")]
            public static void Indexx(int component)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="component">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glIndexxvOES")]
            public static void Indexx([CountAttribute(Count = 1)] ref int component)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] ref int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightModelxvOES")]
            public static unsafe void LightModelx(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxOES")]
            public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="light">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLightxvOES")]
            public static unsafe void Lightx(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="width">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLineWidthxOES")]
            public static void LineWidthx(int width)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadMatrixxOES")]
            public static void LoadMatrixx([CountAttribute(Count = 16)] int[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadMatrixxOES")]
            public static void LoadMatrixx([CountAttribute(Count = 16)] ref int m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadTransposeMatrixxOES")]
            public static void LoadTransposeMatrixx([CountAttribute(Count = 16)] int[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glLoadTransposeMatrixxOES")]
            public static void LoadTransposeMatrixx([CountAttribute(Count = 16)] ref int m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="stride">
            /// </param>
            /// <param name="order">
            /// </param>
            /// <param name="points">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMap1xOES")]
            public static void Map1x(OpenTK.Graphics.ES11.MapTarget target, int u1, int u2, int stride, int order, int points)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="ustride">
            /// </param>
            /// <param name="uorder">
            /// </param>
            /// <param name="v1">
            /// </param>
            /// <param name="v2">
            /// </param>
            /// <param name="vstride">
            /// </param>
            /// <param name="vorder">
            /// </param>
            /// <param name="points">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMap2xOES")]
            public static void Map2x(OpenTK.Graphics.ES11.MapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMapGrid1xOES")]
            public static void MapGrid1x(int n, int u1, int u2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="u1">
            /// </param>
            /// <param name="u2">
            /// </param>
            /// <param name="v1">
            /// </param>
            /// <param name="v2">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMapGrid2xOES")]
            public static void MapGrid2x(int n, int u1, int u2, int v1, int v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxOES")]
            public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int[] param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] ref int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="face">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMaterialxvOES")]
            public static unsafe void Materialx(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultMatrixxOES")]
            public static void MultMatrixx([CountAttribute(Count = 16)] int[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultMatrixxOES")]
            public static void MultMatrixx([CountAttribute(Count = 16)] ref int m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultTransposeMatrixxOES")]
            public static void MultTransposeMatrixx([CountAttribute(Count = 16)] int[] m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="m">
            /// [length: 16]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultTransposeMatrixxOES")]
            public static void MultTransposeMatrixx([CountAttribute(Count = 16)] ref int m)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xOES")]
            public static void MultiTexCoord1x(OpenTK.Graphics.ES11.TextureUnit texture, int s)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xvOES")]
            public static void MultiTexCoord1x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 1)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord1xvOES")]
            public static unsafe void MultiTexCoord1x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 1)] int* coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord2xvOES")]
            public static unsafe void MultiTexCoord2x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] int* coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord3xvOES")]
            public static unsafe void MultiTexCoord3x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] int* coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="q">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r, int q)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="texture">
            /// </param>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glMultiTexCoord4xvOES")]
            public static unsafe void MultiTexCoord4x(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] int* coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="nx">
            /// </param>
            /// <param name="ny">
            /// </param>
            /// <param name="nz">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xOES")]
            public static void Normal3x(int nx, int ny, int nz)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xvOES")]
            public static void Normal3x([CountAttribute(Count = 3)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glNormal3xvOES")]
            public static void Normal3x([CountAttribute(Count = 3)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="l">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="b">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="n">
            /// </param>
            /// <param name="f">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glOrthoxOES")]
            public static void Orthox(int l, int r, int b, int t, int n, int f)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="token">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPassThroughxOES")]
            public static void PassThroughx(int token)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelTransferxOES")]
            public static void PixelTransferx(OpenTK.Graphics.ES11.PixelTransferParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="xfactor">
            /// </param>
            /// <param name="yfactor">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelZoomxOES")]
            public static void PixelZoomx(int xfactor, int yfactor)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxOES")]
            public static void PointParameterx(OpenTK.Graphics.ES11.OesFixedPoint pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxvOES")]
            public static void PointParameterx(OpenTK.Graphics.ES11.OesFixedPoint pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxvOES")]
            public static void PointParameterx(OpenTK.Graphics.ES11.OesFixedPoint pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointParameterxvOES")]
            public static unsafe void PointParameterx(OpenTK.Graphics.ES11.OesFixedPoint pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="size">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPointSizexOES")]
            public static void PointSizex(int size)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="factor">
            /// </param>
            /// <param name="units">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPolygonOffsetxOES")]
            public static void PolygonOffsetx(int factor, int units)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] uint[] textures, [CountAttribute(Parameter = "n")] int[] priorities)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] ref uint textures, [CountAttribute(Parameter = "n")] ref int priorities)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="n">
            /// </param>
            /// <param name="textures">
            /// [length: n]
            /// </param>
            /// <param name="priorities">
            /// [length: n]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPrioritizeTexturesxOES")]
            public static unsafe void PrioritizeTexturesx(int n, [CountAttribute(Parameter = "n")] uint* textures, [CountAttribute(Parameter = "n")] int* priorities)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xOES")]
            public static void RasterPos2x(int x, int y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xvOES")]
            public static void RasterPos2x([CountAttribute(Count = 2)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos2xvOES")]
            public static void RasterPos2x([CountAttribute(Count = 2)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xOES")]
            public static void RasterPos3x(int x, int y, int z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xvOES")]
            public static void RasterPos3x([CountAttribute(Count = 3)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos3xvOES")]
            public static void RasterPos3x([CountAttribute(Count = 3)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            /// <param name="w">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xOES")]
            public static void RasterPos4x(int x, int y, int z, int w)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xvOES")]
            public static void RasterPos4x([CountAttribute(Count = 4)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRasterPos4xvOES")]
            public static void RasterPos4x([CountAttribute(Count = 4)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x1">
            /// </param>
            /// <param name="y1">
            /// </param>
            /// <param name="x2">
            /// </param>
            /// <param name="y2">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxOES")]
            public static void Rectx(int x1, int y1, int x2, int y2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="v1">
            /// [length: 2]
            /// </param>
            /// <param name="v2">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxvOES")]
            public static void Rectx([CountAttribute(Count = 2)] int[] v1, [CountAttribute(Count = 2)] int[] v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="v1">
            /// [length: 2]
            /// </param>
            /// <param name="v2">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRectxvOES")]
            public static void Rectx([CountAttribute(Count = 2)] ref int v1, [CountAttribute(Count = 2)] ref int v2)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="angle">
            /// </param>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glRotatexOES")]
            public static void Rotatex(int angle, int x, int y, int z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="value">
            /// </param>
            /// <param name="invert">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glSampleCoveragexOES")]
            public static void SampleCoveragex(int value, bool invert)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glScalexOES")]
            public static void Scalex(int x, int y, int z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord1xOES")]
            public static void TexCoord1x(int s)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 1]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord1xvOES")]
            public static void TexCoord1x([CountAttribute(Count = 1)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xOES")]
            public static void TexCoord2x(int s, int t)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xvOES")]
            public static void TexCoord2x([CountAttribute(Count = 2)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord2xvOES")]
            public static void TexCoord2x([CountAttribute(Count = 2)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xOES")]
            public static void TexCoord3x(int s, int t, int r)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xvOES")]
            public static void TexCoord3x([CountAttribute(Count = 3)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord3xvOES")]
            public static void TexCoord3x([CountAttribute(Count = 3)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="s">
            /// </param>
            /// <param name="t">
            /// </param>
            /// <param name="r">
            /// </param>
            /// <param name="q">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xOES")]
            public static void TexCoord4x(int s, int t, int r, int q)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xvOES")]
            public static void TexCoord4x([CountAttribute(Count = 4)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexCoord4xvOES")]
            public static void TexCoord4x([CountAttribute(Count = 4)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexEnvxvOES")]
            public static unsafe void TexEnvx(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="param">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, int param)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] ref int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTexParameterxvOES")]
            public static unsafe void TexParameterx(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glTranslatexOES")]
            public static void Translatex(int x, int y, int z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex2xOES")]
            public static void Vertex2x(int x)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex2xvOES")]
            public static void Vertex2x([CountAttribute(Count = 2)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 2]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex2xvOES")]
            public static void Vertex2x([CountAttribute(Count = 2)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xOES")]
            public static void Vertex3x(int x, int y)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xvOES")]
            public static void Vertex3x([CountAttribute(Count = 3)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 3]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex3xvOES")]
            public static void Vertex3x([CountAttribute(Count = 3)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="x">
            /// </param>
            /// <param name="y">
            /// </param>
            /// <param name="z">
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xOES")]
            public static void Vertex4x(int x, int y, int z)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xvOES")]
            public static void Vertex4x([CountAttribute(Count = 4)] int[] coords)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_fixed_point]
            /// </summary>
            /// <param name="coords">
            /// [length: 4]
            /// </param>
            [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glVertex4xvOES")]
            public static void Vertex4x([CountAttribute(Count = 4)] ref int coords)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(0)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glAccumxOES(OpenTK.Graphics.ES11.OesFixedPoint op, int value);

            [Slot(4)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glAlphaFuncxOES(OpenTK.Graphics.ES11.AlphaFunction func, int @ref);

            [Slot(10)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glBitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap);

            [Slot(11)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBlendColorxOES(int red, int green, int blue, int alpha);

            [Slot(21)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glClearAccumxOES(int red, int green, int blue, int alpha);

            [Slot(24)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glClearColorxOES(int red, int green, int blue, int alpha);

            [Slot(28)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glClearDepthxOES(int depth);

            [Slot(37)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glClipPlanexOES(OpenTK.Graphics.ES11.ClipPlaneName plane, [CountAttribute(Count = 4)] int* equation);

            [Slot(38)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColor3xOES(int red, int green, int blue);

            [Slot(39)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glColor3xvOES([CountAttribute(Count = 3)] int* components);

            [Slot(43)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glColor4xOES(int red, int green, int blue, int alpha);

            [Slot(44)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glColor4xvOES([CountAttribute(Count = 4)] int* components);

            [Slot(49)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glConvolutionParameterxOES(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, int param);

            [Slot(50)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glConvolutionParameterxvOES(OpenTK.Graphics.ES11.ConvolutionTargetExt target, OpenTK.Graphics.ES11.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(74)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glDepthRangexOES(int n, int f);

            [Slot(95)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEvalCoord1xOES(int u);

            [Slot(96)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glEvalCoord1xvOES([CountAttribute(Count = 1)] int* coords);

            [Slot(97)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glEvalCoord2xOES(int u, int v);

            [Slot(98)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glEvalCoord2xvOES([CountAttribute(Count = 2)] int* coords);

            [Slot(111)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glFeedbackBufferxOES(int n, OpenTK.Graphics.ES11.OesFixedPoint type, [CountAttribute(Parameter = "n")] int* buffer);

            [Slot(120)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFogxOES(OpenTK.Graphics.ES11.FogPName pname, int param);

            [Slot(122)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glFogxvOES(OpenTK.Graphics.ES11.FogPName pname, [CountAttribute(Computed = "pname")] int* param);

            [Slot(131)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFrustumxOES(int l, int r, int b, int t, int n, int f);

            [Slot(145)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetClipPlanexOES(OpenTK.Graphics.ES11.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] int* equation);

            [Slot(146)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetConvolutionParameterxvOES(OpenTK.Graphics.ES11.OesFixedPoint target, OpenTK.Graphics.ES11.OesFixedPoint pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(154)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFixedvOES(OpenTK.Graphics.ES11.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(158)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetHistogramParameterxvOES(OpenTK.Graphics.ES11.HistogramTargetExt target, OpenTK.Graphics.ES11.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(162)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetLightxOES(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(165)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMapxvOES(OpenTK.Graphics.ES11.MapTarget target, OpenTK.Graphics.ES11.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "query")] int* v);

            [Slot(167)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGetMaterialxOES(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param);

            [Slot(169)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetMaterialxvOES(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(185)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTexEnvxvOES(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(189)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTexLevelParameterxvOES(OpenTK.Graphics.ES11.TextureTarget target, int level, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(193)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetTexParameterxvOES(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(195)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glIndexxOES(int component);

            [Slot(196)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glIndexxvOES([CountAttribute(Count = 1)] int* component);

            [Slot(211)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glLightModelxOES(OpenTK.Graphics.ES11.LightModelParameter pname, int param);

            [Slot(213)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glLightModelxvOES(OpenTK.Graphics.ES11.LightModelParameter pname, [CountAttribute(Computed = "pname")] int* param);

            [Slot(215)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glLightxOES(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, int param);

            [Slot(217)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glLightxvOES(OpenTK.Graphics.ES11.LightName light, OpenTK.Graphics.ES11.LightParameter pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(220)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glLineWidthxOES(int width);

            [Slot(224)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glLoadMatrixxOES([CountAttribute(Count = 16)] int* m);

            [Slot(226)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glLoadTransposeMatrixxOES([CountAttribute(Count = 16)] int* m);

            [Slot(228)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMap1xOES(OpenTK.Graphics.ES11.MapTarget target, int u1, int u2, int stride, int order, int points);

            [Slot(229)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMap2xOES(OpenTK.Graphics.ES11.MapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points);

            [Slot(232)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMapGrid1xOES(int n, int u1, int u2);

            [Slot(233)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMapGrid2xOES(int n, int u1, int u2, int v1, int v2);

            [Slot(237)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMaterialxOES(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, int param);

            [Slot(239)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMaterialxvOES(OpenTK.Graphics.ES11.MaterialFace face, OpenTK.Graphics.ES11.MaterialParameter pname, [CountAttribute(Computed = "pname")] int* param);

            [Slot(264)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultMatrixxOES([CountAttribute(Count = 16)] int* m);

            [Slot(265)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultTransposeMatrixxOES([CountAttribute(Count = 16)] int* m);

            [Slot(246)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexCoord1xOES(OpenTK.Graphics.ES11.TextureUnit texture, int s);

            [Slot(247)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexCoord1xvOES(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 1)] int* coords);

            [Slot(250)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexCoord2xOES(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t);

            [Slot(251)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexCoord2xvOES(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 2)] int* coords);

            [Slot(254)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexCoord3xOES(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r);

            [Slot(255)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexCoord3xvOES(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 3)] int* coords);

            [Slot(260)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glMultiTexCoord4xOES(OpenTK.Graphics.ES11.TextureUnit texture, int s, int t, int r, int q);

            [Slot(261)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glMultiTexCoord4xvOES(OpenTK.Graphics.ES11.TextureUnit texture, [CountAttribute(Count = 4)] int* coords);

            [Slot(268)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glNormal3xOES(int nx, int ny, int nz);

            [Slot(269)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glNormal3xvOES([CountAttribute(Count = 3)] int* coords);

            [Slot(278)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glOrthoxOES(int l, int r, int b, int t, int n, int f);

            [Slot(279)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPassThroughxOES(int token);

            [Slot(283)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPixelTransferxOES(OpenTK.Graphics.ES11.PixelTransferParameter pname, int param);

            [Slot(284)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPixelZoomxOES(int xfactor, int yfactor);

            [Slot(288)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPointParameterxOES(OpenTK.Graphics.ES11.OesFixedPoint pname, int param);

            [Slot(290)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glPointParameterxvOES(OpenTK.Graphics.ES11.OesFixedPoint pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(294)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPointSizexOES(int size);

            [Slot(297)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glPolygonOffsetxOES(int factor, int units);

            [Slot(302)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glPrioritizeTexturesxOES(int n, [CountAttribute(Parameter = "n")] uint* textures, [CountAttribute(Parameter = "n")] int* priorities);

            [Slot(308)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRasterPos2xOES(int x, int y);

            [Slot(309)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glRasterPos2xvOES([CountAttribute(Count = 2)] int* coords);

            [Slot(310)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRasterPos3xOES(int x, int y, int z);

            [Slot(311)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glRasterPos3xvOES([CountAttribute(Count = 3)] int* coords);

            [Slot(312)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRasterPos4xOES(int x, int y, int z, int w);

            [Slot(313)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glRasterPos4xvOES([CountAttribute(Count = 4)] int* coords);

            [Slot(316)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRectxOES(int x1, int y1, int x2, int y2);

            [Slot(317)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glRectxvOES([CountAttribute(Count = 2)] int* v1, [CountAttribute(Count = 2)] int* v2);

            [Slot(325)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRotatexOES(int angle, int x, int y, int z);

            [Slot(328)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glSampleCoveragexOES(int value, bool invert);

            [Slot(331)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glScalexOES(int x, int y, int z);

            [Slot(342)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexCoord1xOES(int s);

            [Slot(343)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTexCoord1xvOES([CountAttribute(Count = 1)] int* coords);

            [Slot(346)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexCoord2xOES(int s, int t);

            [Slot(347)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTexCoord2xvOES([CountAttribute(Count = 2)] int* coords);

            [Slot(350)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexCoord3xOES(int s, int t, int r);

            [Slot(351)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTexCoord3xvOES([CountAttribute(Count = 3)] int* coords);

            [Slot(354)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexCoord4xOES(int s, int t, int r, int q);

            [Slot(355)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTexCoord4xvOES([CountAttribute(Count = 4)] int* coords);

            [Slot(362)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexEnvxOES(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, int param);

            [Slot(364)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTexEnvxvOES(OpenTK.Graphics.ES11.TextureEnvTarget target, OpenTK.Graphics.ES11.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(377)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTexParameterxOES(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, int param);

            [Slot(379)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glTexParameterxvOES(OpenTK.Graphics.ES11.TextureTarget target, OpenTK.Graphics.ES11.GetTextureParameter pname, [CountAttribute(Computed = "pname")] int* @params);

            [Slot(389)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glTranslatexOES(int x, int y, int z);

            [Slot(393)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertex2xOES(int x);

            [Slot(394)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertex2xvOES([CountAttribute(Count = 2)] int* coords);

            [Slot(397)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertex3xOES(int x, int y);

            [Slot(398)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertex3xvOES([CountAttribute(Count = 3)] int* coords);

            [Slot(401)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glVertex4xOES(int x, int y, int z);

            [Slot(402)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glVertex4xvOES([CountAttribute(Count = 4)] int* coords);
        }
    }
}
