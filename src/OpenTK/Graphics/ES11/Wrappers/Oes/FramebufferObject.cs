//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES11
{
    public sealed partial class GL
    {
        /// <summary>
        /// Contains native bindings to functions in the category "FramebufferObject" in the extension "Oes".
        /// </summary>
        public static partial class Oes
        {
            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="framebuffer">
            /// Specifies the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindFramebufferOES")]
            public static void BindFramebuffer(OpenTK.Graphics.ES11.FramebufferTarget target, uint framebuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Bind a named renderbuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glBindRenderbufferOES")]
            public static void BindRenderbuffer(OpenTK.Graphics.ES11.RenderbufferTarget target, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Return the framebuffer completeness status of a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glCheckFramebufferStatusOES")]
            public static OpenTK.Graphics.ES11.FramebufferStatus CheckFramebufferStatus(OpenTK.Graphics.ES11.FramebufferTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] uint framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint[] framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] ref uint framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named framebuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer objects to be deleted.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array of framebuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteFramebuffersOES")]
            public static unsafe void DeleteFramebuffers(int n, [CountAttribute(Parameter = "n")] uint* framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] uint renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint[] renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] ref uint renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Delete named renderbuffer objects
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer objects to be deleted.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array of renderbuffer objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glDeleteRenderbuffersOES")]
            public static unsafe void DeleteRenderbuffers(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a renderbuffer object to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="renderbuffertarget">
            /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="renderbuffer">
            /// Specifies the renderbuffer object that is to be attached.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferRenderbufferOES")]
            public static void FramebufferRenderbuffer(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.RenderbufferTarget renderbuffertarget, uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Attach a texture image to a framebuffer object
            /// </summary>
            /// <param name="target">
            /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
            /// </param>
            /// <param name="attachment">
            /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
            /// </param>
            /// <param name="textarget">
            /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
            /// </param>
            /// <param name="texture">
            /// Specifies the texture object whose image is to be attached.
            /// </param>
            /// <param name="level">
            /// Specifies the mipmap level of the texture image to be attached, which must be 0.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glFramebufferTexture2DOES")]
            public static void FramebufferTexture2D(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, uint texture, int level)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static uint GenFramebuffer()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate framebuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of framebuffer object names to be generated.
            /// </param>
            /// <param name="framebuffers">
            /// [length: n]
            /// Specifies an array in which the generated framebuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenFramebuffersOES")]
            public static unsafe void GenFramebuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static uint GenRenderbuffer()
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint[] renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] out uint renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate renderbuffer object names
            /// </summary>
            /// <param name="n">
            /// Specifies the number of renderbuffer object names to be generated.
            /// </param>
            /// <param name="renderbuffers">
            /// [length: n]
            /// Specifies an array in which the generated renderbuffer object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenRenderbuffersOES")]
            public static unsafe void GenRenderbuffers(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Generate a complete set of mipmaps for a texture object
            /// </summary>
            /// <param name="target">
            /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGenerateMipmapOES")]
            public static void GenerateMipmap(OpenTK.Graphics.ES11.TextureTarget target)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="attachment">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
            public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int[] @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static void GetRenderbufferParameter(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out int @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// </summary>
            /// <param name="target">
            /// </param>
            /// <param name="pname">
            /// </param>
            /// <param name="@params">
            /// [length: COMPSIZE(pname)]
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glGetRenderbufferParameterivOES")]
            public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a framebuffer object
            /// </summary>
            /// <param name="framebuffer">
            /// Specifies a value that may be the name of a framebuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glIsFramebufferOES")]
            public static bool IsFramebuffer(uint framebuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Determine if a name corresponds to a renderbuffer object
            /// </summary>
            /// <param name="renderbuffer">
            /// Specifies a value that may be the name of a renderbuffer object.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glIsRenderbufferOES")]
            public static bool IsRenderbuffer(uint renderbuffer)
            {
                throw new BindingsNotRewrittenException();
            }

            /// <summary>
            /// [requires: OES_framebuffer_object]
            /// Create and initialize a renderbuffer object's data store
            /// </summary>
            /// <param name="target">
            /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
            /// </param>
            /// <param name="internalformat">
            /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
            /// </param>
            /// <param name="width">
            /// Specifies the width of the renderbuffer in pixels.
            /// </param>
            /// <param name="height">
            /// Specifies the height of the renderbuffer in pixels.
            /// </param>
            [AutoGenerated(Category = "OES_framebuffer_object", Version = "", EntryPoint = "glRenderbufferStorageOES")]
            public static void RenderbufferStorage(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height)
            {
                throw new BindingsNotRewrittenException();
            }

            [Slot(6)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindFramebufferOES(OpenTK.Graphics.ES11.FramebufferTarget target, uint framebuffer);

            [Slot(7)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glBindRenderbufferOES(OpenTK.Graphics.ES11.RenderbufferTarget target, uint renderbuffer);

            [Slot(19)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern OpenTK.Graphics.ES11.FramebufferStatus glCheckFramebufferStatusOES(OpenTK.Graphics.ES11.FramebufferTarget target);

            [Slot(64)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteFramebuffersOES(int n, [CountAttribute(Parameter = "n")] uint* framebuffers);

            [Slot(65)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glDeleteRenderbuffersOES(int n, [CountAttribute(Parameter = "n")] uint* renderbuffers);

            [Slot(123)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferRenderbufferOES(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.RenderbufferTarget renderbuffertarget, uint renderbuffer);

            [Slot(126)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glFramebufferTexture2DOES(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.TextureTarget textarget, uint texture, int level);

            [Slot(135)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenFramebuffersOES(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* framebuffers);

            [Slot(136)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGenRenderbuffersOES(int n, [OutAttribute, CountAttribute(Parameter = "n")] uint* renderbuffers);

            [Slot(133)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glGenerateMipmapOES(OpenTK.Graphics.ES11.TextureTarget target);

            [Slot(156)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetFramebufferAttachmentParameterivOES(OpenTK.Graphics.ES11.FramebufferTarget target, OpenTK.Graphics.ES11.FramebufferAttachment attachment, OpenTK.Graphics.ES11.FramebufferAttachmentParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(179)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern unsafe void glGetRenderbufferParameterivOES(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] int* @params);

            [Slot(201)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsFramebufferOES(uint framebuffer);

            [Slot(202)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern byte glIsRenderbufferOES(uint renderbuffer);

            [Slot(321)]
            [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
            private static extern void glRenderbufferStorageOES(OpenTK.Graphics.ES11.RenderbufferTarget target, OpenTK.Graphics.ES11.InternalFormat internalformat, int width, int height);
        }
    }
}
